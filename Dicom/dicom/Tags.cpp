#include "dicom_pch.h"
#include "dicom/Tags.h"

using namespace std;
using namespace dicom::data;

/** \brief Contains constants representing the entire DICOM Data Dictionary */
namespace dicom::tags {
    const tag AbortFlag = { "AbortFlag", 0x40101024, {1, 1}, VRType::CS, false };
    const tag AbortReason = { "AbortReason", 0x40101021, {1, 1}, VRType::CS, false };
    const tag AbsoluteChannelDisplayScale = { "AbsoluteChannelDisplayScale", 0x003A0248, {1, 1}, VRType::FL, false };
    const tag AbstractPriorCodeSequence = { "AbstractPriorCodeSequence", 0x0072003E, {1, 1}, VRType::SQ, false };
    const tag AbstractPriorValue = { "AbstractPriorValue", 0x0072003C, {2, 2}, VRType::SS, false };
    const tag AccessionNumber = { "AccessionNumber", 0x00080050, {1, 1}, VRType::SH, false };
    const tag AccessoryCode = { "AccessoryCode", 0x300A00F9, {1, 1}, VRType::LO, false };
    const tag AcquiredImageAreaDoseProduct = { "AcquiredImageAreaDoseProduct", 0x00189473, {1, 1}, VRType::FL, false };
    const tag AcquiredSoundpathLength = { "AcquiredSoundpathLength", 0x00144031, {1, 1}, VRType::DS, false };
    const tag AcquisitionComments = { "AcquisitionComments", 0x00184000, {1, 1}, VRType::LT, false };
    const tag AcquisitionCompressionType = { "AcquisitionCompressionType", 0x00144032, {1, 1}, VRType::CS, false };
    const tag AcquisitionContextDescription = { "AcquisitionContextDescription", 0x00400556, {1, 1}, VRType::ST, false };
    const tag AcquisitionContextSequence = { "AcquisitionContextSequence", 0x00400555, {1, 1}, VRType::SQ, false };
    const tag AcquisitionContrast = { "AcquisitionContrast", 0x00089209, {1, 1}, VRType::CS, false };
    const tag AcquisitionDate = { "AcquisitionDate", 0x00080022, {1, 1}, VRType::DA, false };
    const tag AcquisitionDateTime = { "AcquisitionDateTime", 0x0008002A, {1, 1}, VRType::DT, false };
    const tag AcquisitionDeviceProcessingCode = { "AcquisitionDeviceProcessingCode", 0x00181401, {1, 1}, VRType::LO, false };
    const tag AcquisitionDeviceProcessingDescription = { "AcquisitionDeviceProcessingDescription", 0x00181400, {1, 1}, VRType::LO, false };
    const tag AcquisitionDeviceTypeCodeSequence = { "AcquisitionDeviceTypeCodeSequence", 0x00220015, {1, 1}, VRType::SQ, false };
    const tag AcquisitionDuration = { "AcquisitionDuration", 0x00189073, {1, 1}, VRType::FD, false };
    const tag AcquisitionEndLocationSequence = { "AcquisitionEndLocationSequence", 0x00189932, {1, 1}, VRType::SQ, false };
    const tag AcquisitionIndex = { "AcquisitionIndex", 0x00209518, {1, 1}, VRType::US, false };
    const tag AcquisitionMatrix = { "AcquisitionMatrix", 0x00181310, {4, 4}, VRType::US, false };
    const tag AcquisitionMethodAlgorithmSequence = { "AcquisitionMethodAlgorithmSequence", 0x00221423, {1, 1}, VRType::SQ, false };
    const tag AcquisitionMethodCodeSequence = { "AcquisitionMethodCodeSequence", 0x00221420, {1, 1}, VRType::SQ, false };
    const tag AcquisitionMotion = { "AcquisitionMotion", 0x00189930, {1, 1}, VRType::CS, false };
    const tag AcquisitionNumber = { "AcquisitionNumber", 0x00200012, {1, 1}, VRType::IS, false };
    const tag AcquisitionProtocolDescription = { "AcquisitionProtocolDescription", 0x00189424, {1, 1}, VRType::LT, false };
    const tag AcquisitionProtocolElementSequence = { "AcquisitionProtocolElementSequence", 0x00189920, {1, 1}, VRType::SQ, false };
    const tag AcquisitionProtocolElementSpecificationSequence = { "AcquisitionProtocolElementSpecificationSequence", 0x0018991F, {1, 1}, VRType::SQ, false };
    const tag AcquisitionProtocolName = { "AcquisitionProtocolName", 0x00189423, {1, 1}, VRType::LO, false };
    const tag AcquisitionSampleSize = { "AcquisitionSampleSize", 0x00144033, {1, 1}, VRType::IS, false };
    const tag AcquisitionsInSeries = { "AcquisitionsInSeries", 0x00201001, {1, 1}, VRType::IS, false };
    const tag AcquisitionsInStudy = { "AcquisitionsInStudy", 0x00201004, {1, 1}, VRType::IS, false };
    const tag AcquisitionStartCondition = { "AcquisitionStartCondition", 0x00180073, {1, 1}, VRType::CS, false };
    const tag AcquisitionStartConditionData = { "AcquisitionStartConditionData", 0x00180074, {1, 1}, VRType::IS, false };
    const tag AcquisitionStartLocationSequence = { "AcquisitionStartLocationSequence", 0x00189931, {1, 1}, VRType::SQ, false };
    const tag AcquisitionStatus = { "AcquisitionStatus", 0x40101044, {1, 1}, VRType::CS, false };
    const tag AcquisitionTerminationCondition = { "AcquisitionTerminationCondition", 0x00180071, {1, 1}, VRType::CS, false };
    const tag AcquisitionTerminationConditionData = { "AcquisitionTerminationConditionData", 0x00180075, {1, 1}, VRType::IS, false };
    const tag AcquisitionTime = { "AcquisitionTime", 0x00080032, {1, 1}, VRType::TM, false };
    const tag AcquisitionTimeSynchronized = { "AcquisitionTimeSynchronized", 0x00181800, {1, 1}, VRType::CS, false };
    const tag AcquisitionType = { "AcquisitionType", 0x00189302, {1, 1}, VRType::CS, false };
    const tag AcrossScanSpatialResolution = { "AcrossScanSpatialResolution", 0x00220048, {1, 1}, VRType::FL, false };
    const tag ActiveAperture = { "ActiveAperture", 0x00145100, {1, 1}, VRType::US, false };
    const tag ActiveSourceDiameter = { "ActiveSourceDiameter", 0x300A0218, {1, 1}, VRType::DS, false };
    const tag ActiveSourceLength = { "ActiveSourceLength", 0x300A021A, {1, 1}, VRType::DS, false };
    const tag ActualCardiacTriggerDelayTime = { "ActualCardiacTriggerDelayTime", 0x00209252, {1, 1}, VRType::FD, false };
    const tag ActualCardiacTriggerTimePriorToRPeak = { "ActualCardiacTriggerTimePriorToRPeak", 0x00209155, {1, 1}, VRType::FL, false };
    const tag ActualEnvironmentalConditions = { "ActualEnvironmentalConditions", 0x00141010, {1, 1}, VRType::ST, false };
    const tag ActualFrameDuration = { "ActualFrameDuration", 0x00181242, {1, 1}, VRType::IS, false };
    const tag ActualHumanPerformersSequence = { "ActualHumanPerformersSequence", 0x00404035, {1, 1}, VRType::SQ, false };
    const tag ActualRespiratoryTriggerDelayTime = { "ActualRespiratoryTriggerDelayTime", 0x00209257, {1, 1}, VRType::FD, false };
    const tag AdaptiveMapFormat = { "AdaptiveMapFormat", 0x00280730, {1, 1}, VRType::US, false };
    const tag AddIntermediateSequence = { "AddIntermediateSequence", 0x00460101, {1, 1}, VRType::SQ, false };
    const tag AdditionalDrugSequence = { "AdditionalDrugSequence", 0x0018002A, {1, 1}, VRType::SQ, false };
    const tag AdditionalInspectionMethodSequence = { "AdditionalInspectionMethodSequence", 0x4010106F, {1, 1}, VRType::SQ, false };
    const tag AdditionalInspectionSelectionCriteria = { "AdditionalInspectionSelectionCriteria", 0x4010106E, {1, 1}, VRType::CS, false };
    const tag AdditionalPatientHistory = { "AdditionalPatientHistory", 0x001021B0, {1, 1}, VRType::LT, false };
    const tag AdditionalRTROIIdentificationCodeSequence = { "AdditionalRTROIIdentificationCodeSequence", 0x300600B9, {1, 1}, VRType::SQ, false };
    const tag AdditionalScreeningPerformed = { "AdditionalScreeningPerformed", 0x4010106D, {1, 1}, VRType::CS, false };
    const tag AddNearSequence = { "AddNearSequence", 0x00460100, {1, 1}, VRType::SQ, false };
    const tag AddOtherSequence = { "AddOtherSequence", 0x00460102, {1, 1}, VRType::SQ, false };
    const tag AddPower = { "AddPower", 0x00460104, {1, 1}, VRType::FD, false };
    const tag AddressTrial = { "AddressTrial", 0x0040A353, {1, 1}, VRType::ST, false };
    const tag AdministrationRouteCodeSequence = { "AdministrationRouteCodeSequence", 0x00540302, {1, 1}, VRType::SQ, false };
    const tag AdmissionID = { "AdmissionID", 0x00380010, {1, 1}, VRType::LO, false };
    const tag AdmittingDate = { "AdmittingDate", 0x00380020, {1, 1}, VRType::DA, false };
    const tag AdmittingDiagnosesCodeSequence = { "AdmittingDiagnosesCodeSequence", 0x00081084, {1, 1}, VRType::SQ, false };
    const tag AdmittingDiagnosesDescription = { "AdmittingDiagnosesDescription", 0x00081080, {1, 1}, VRType::LO, false };
    const tag AdmittingTime = { "AdmittingTime", 0x00380021, {1, 1}, VRType::TM, false };
    const tag AdvancedBlendingSequence = { "AdvancedBlendingSequence", 0x00701B01, {1, 1}, VRType::SQ, false };
    const tag AfterloaderChannelID = { "AfterloaderChannelID", 0x300A0273, {1, 1}, VRType::SH, false };
    const tag AgeCorrectedSensitivityDeviationAlgorithmSequence = { "AgeCorrectedSensitivityDeviationAlgorithmSequence", 0x00240065, {1, 1}, VRType::SQ, false };
    const tag AgeCorrectedSensitivityDeviationProbabilityValue = { "AgeCorrectedSensitivityDeviationProbabilityValue", 0x00240100, {1, 1}, VRType::FL, false };
    const tag AgeCorrectedSensitivityDeviationValue = { "AgeCorrectedSensitivityDeviationValue", 0x00240092, {1, 1}, VRType::FL, false };
    const tag AirCounts = { "AirCounts", 0x00143070, {1, 1}, VRType::OB, true };
    const tag AITDeviceType = { "AITDeviceType", 0x40101070, {1, 1}, VRType::CS, false };
    const tag AlarmDecision = { "AlarmDecision", 0x40101031, {1, 1}, VRType::CS, false };
    const tag AlarmDecisionTime = { "AlarmDecisionTime", 0x4010102B, {1, 1}, VRType::DT, false };
    const tag AlgorithmCodeSequenceTrial = { "AlgorithmCodeSequenceTrial", 0x0040A296, {1, 1}, VRType::SQ, false };
    const tag AlgorithmDescription = { "AlgorithmDescription", 0x00189528, {1, 1}, VRType::LO, false };
    const tag AlgorithmDescriptionTrial = { "AlgorithmDescriptionTrial", 0x0040A297, {1, 1}, VRType::ST, false };
    const tag AlgorithmFamilyCodeSequence = { "AlgorithmFamilyCodeSequence", 0x0066002F, {1, 1}, VRType::SQ, false };
    const tag AlgorithmName = { "AlgorithmName", 0x00660036, {1, 1}, VRType::LO, false };
    const tag AlgorithmNameCodeSequence = { "AlgorithmNameCodeSequence", 0x00660030, {1, 1}, VRType::SQ, false };
    const tag AlgorithmParameters = { "AlgorithmParameters", 0x00660032, {1, 1}, VRType::LT, false };
    const tag AlgorithmRoutingCodeSequence = { "AlgorithmRoutingCodeSequence", 0x40101064, {1, 1}, VRType::SQ, false };
    const tag AlgorithmSource = { "AlgorithmSource", 0x00240202, {1, 1}, VRType::LO, false };
    const tag AlgorithmType = { "AlgorithmType", 0x00189527, {1, 1}, VRType::CS, false };
    const tag AlgorithmVersion = { "AlgorithmVersion", 0x00660031, {1, 1}, VRType::LO, false };
    const tag AliasedDataType = { "AliasedDataType", 0x0018980B, {1, 1}, VRType::CS, false };
    const tag ALinePixelSpacing = { "ALinePixelSpacing", 0x00520014, {1, 1}, VRType::FD, false };
    const tag ALineRate = { "ALineRate", 0x00520011, {1, 1}, VRType::FD, false };
    const tag ALinesPerFrame = { "ALinesPerFrame", 0x00520012, {1, 1}, VRType::US, false };
    const tag Allergies = { "Allergies", 0x00102110, {1, 1}, VRType::LO, false };
    const tag AllowLossyCompression = { "AllowLossyCompression", 0x2200000F, {1, 1}, VRType::CS, false };
    const tag AllowMediaSplitting = { "AllowMediaSplitting", 0x22000007, {1, 1}, VRType::CS, false };
    const tag AlongScanSpatialResolution = { "AlongScanSpatialResolution", 0x00220037, {1, 1}, VRType::FL, false };
    const tag AlphaLUTTransferFunction = { "AlphaLUTTransferFunction", 0x00281410, {1, 1}, VRType::CS, false };
    const tag AlphaPaletteColorLookupTableData = { "AlphaPaletteColorLookupTableData", 0x00281204, {1, 1}, VRType::OW, false };
    const tag AlphaPaletteColorLookupTableDescriptor = { "AlphaPaletteColorLookupTableDescriptor", 0x00281104, {3, 3}, VRType::US, false };
    const tag AlternateBeamDose = { "AlternateBeamDose", 0x300A0091, {1, 1}, VRType::DS, false };
    const tag AlternateBeamDoseType = { "AlternateBeamDoseType", 0x300A0092, {1, 1}, VRType::CS, false };
    const tag AlternateContainerIdentifierSequence = { "AlternateContainerIdentifierSequence", 0x00400515, {1, 1}, VRType::SQ, false };
    const tag AlternateContentDescriptionSequence = { "AlternateContentDescriptionSequence", 0x00700087, {1, 1}, VRType::SQ, false };
    const tag AlternateRepresentationSequence = { "AlternateRepresentationSequence", 0x00083001, {1, 1}, VRType::SQ, false };
    const tag AmbientLightValueSource = { "AmbientLightValueSource", 0x00287025, {1, 1}, VRType::CS, false };
    const tag AmbientReflectionIntensity = { "AmbientReflectionIntensity", 0x00701702, {1, 1}, VRType::FD, false };
    const tag AmplifierType = { "AmplifierType", 0x0014400A, {1, 1}, VRType::CS, false };
    const tag AnalyzedArea = { "AnalyzedArea", 0x00460227, {1, 1}, VRType::FL, false };
    const tag AnatomicalOrientationType = { "AnatomicalOrientationType", 0x00102210, {1, 1}, VRType::CS, false };
    const tag AnatomicApproachDirectionCodeSequenceTrial = { "AnatomicApproachDirectionCodeSequenceTrial", 0x00082255, {1, 1}, VRType::SQ, false };
    const tag AnatomicLocationOfExaminingInstrumentCodeSequenceTrial = { "AnatomicLocationOfExaminingInstrumentCodeSequenceTrial", 0x00082259, {1, 1}, VRType::SQ, false };
    const tag AnatomicLocationOfExaminingInstrumentDescriptionTrial = { "AnatomicLocationOfExaminingInstrumentDescriptionTrial", 0x00082258, {1, 1}, VRType::ST, false };
    const tag AnatomicPerspectiveCodeSequenceTrial = { "AnatomicPerspectiveCodeSequenceTrial", 0x00082257, {1, 1}, VRType::SQ, false };
    const tag AnatomicPerspectiveDescriptionTrial = { "AnatomicPerspectiveDescriptionTrial", 0x00082256, {1, 1}, VRType::ST, false };
    const tag AnatomicPortalOfEntranceCodeSequenceTrial = { "AnatomicPortalOfEntranceCodeSequenceTrial", 0x00082253, {1, 1}, VRType::SQ, false };
    const tag AnatomicRegionModifierSequence = { "AnatomicRegionModifierSequence", 0x00082220, {1, 1}, VRType::SQ, false };
    const tag AnatomicRegionSequence = { "AnatomicRegionSequence", 0x00082218, {1, 1}, VRType::SQ, false };
    const tag AnatomicRegionsInStudyCodeSequence = { "AnatomicRegionsInStudyCodeSequence", 0x00080063, {1, 1}, VRType::SQ, false };
    const tag AnatomicStructure = { "AnatomicStructure", 0x00082208, {1, 1}, VRType::CS, false };
    const tag AnatomicStructureReferencePoint = { "AnatomicStructureReferencePoint", 0x00221463, {2, 2}, VRType::FL, false };
    const tag AnatomicStructureSpaceOrRegionCodeSequenceTrial = { "AnatomicStructureSpaceOrRegionCodeSequenceTrial", 0x00082251, {1, 1}, VRType::SQ, false };
    const tag AnatomicStructureSpaceOrRegionModifierCodeSequenceTrial = { "AnatomicStructureSpaceOrRegionModifierCodeSequenceTrial", 0x0008225A, {1, 1}, VRType::SQ, false };
    const tag AnatomicStructureSpaceOrRegionSequence = { "AnatomicStructureSpaceOrRegionSequence", 0x00082229, {1, 1}, VRType::SQ, false };
    const tag AnchorPoint = { "AnchorPoint", 0x00700014, {2, 2}, VRType::FL, false };
    const tag AnchorPointAnnotationUnits = { "AnchorPointAnnotationUnits", 0x00700004, {1, 1}, VRType::CS, false };
    const tag AnchorPointVisibility = { "AnchorPointVisibility", 0x00700015, {1, 1}, VRType::CS, false };
    const tag AngioFlag = { "AngioFlag", 0x00180025, {1, 1}, VRType::CS, false };
    const tag AngleNumber = { "AngleNumber", 0x00200018, {1, 1}, VRType::IS, false };
    const tag AngularPosition = { "AngularPosition", 0x00181141, {1, 1}, VRType::DS, false };
    const tag AngularStep = { "AngularStep", 0x00181144, {1, 1}, VRType::DS, false };
    const tag AngularViewVector = { "AngularViewVector", 0x00540090, {1, 1}, VRType::US, false };
    const tag AnimationCurveSequence = { "AnimationCurveSequence", 0x00701A04, {1, 1}, VRType::SQ, false };
    const tag AnimationStepSize = { "AnimationStepSize", 0x00701A05, {1, 1}, VRType::FD, false };
    const tag AnnotationClipping = { "AnnotationClipping", 0x00701907, {1, 1}, VRType::CS, false };
    const tag AnnotationContentSequence = { "AnnotationContentSequence", 0x21300050, {1, 1}, VRType::SQ, false };
    const tag AnnotationDisplayFormatID = { "AnnotationDisplayFormatID", 0x20100030, {1, 1}, VRType::CS, false };
    const tag AnnotationFlag = { "AnnotationFlag", 0x20000065, {1, 1}, VRType::CS, false };
    const tag AnnotationGroupNumber = { "AnnotationGroupNumber", 0x0040A180, {1, 1}, VRType::US, false };
    const tag AnnotationPosition = { "AnnotationPosition", 0x20300010, {1, 1}, VRType::US, false };
    const tag AnodeTargetMaterial = { "AnodeTargetMaterial", 0x00181191, {1, 1}, VRType::CS, false };
    const tag AnomalyLocatorIndicator = { "AnomalyLocatorIndicator", 0x4010107A, {3, 3}, VRType::FL, false };
    const tag AnomalyLocatorIndicatorSequence = { "AnomalyLocatorIndicatorSequence", 0x40101079, {1, 1}, VRType::SQ, false };
    const tag AnteriorChamberDepth = { "AnteriorChamberDepth", 0x00221131, {1, 1}, VRType::FL, false };
    const tag AnteriorChamberDepthDefinitionCodeSequence = { "AnteriorChamberDepthDefinitionCodeSequence", 0x00221125, {1, 1}, VRType::SQ, false };
    const tag AnteriorChamberDepthSequence = { "AnteriorChamberDepthSequence", 0x00221128, {1, 1}, VRType::SQ, false };
    const tag ApertureElevation = { "ApertureElevation", 0x00145102, {1, 1}, VRType::DS, false };
    const tag ApexPosition = { "ApexPosition", 0x00209308, {3, 3}, VRType::FD, false };
    const tag ApplicableFrameRange = { "ApplicableFrameRange", 0x00286102, {2, 2}, VRType::US, false };
    const tag ApplicableSafetyStandardAgency = { "ApplicableSafetyStandardAgency", 0x00189174, {1, 1}, VRType::CS, false };
    const tag ApplicableSafetyStandardDescription = { "ApplicableSafetyStandardDescription", 0x00189175, {1, 1}, VRType::LO, false };
    const tag ApplicationManufacturer = { "ApplicationManufacturer", 0x00189526, {1, 1}, VRType::LO, false };
    const tag ApplicationMaximumRepaintTime = { "ApplicationMaximumRepaintTime", 0x0072010E, {1, 1}, VRType::US, false };
    const tag ApplicationName = { "ApplicationName", 0x00189524, {1, 1}, VRType::LO, false };
    const tag ApplicationSetupCheck = { "ApplicationSetupCheck", 0x30080116, {1, 1}, VRType::CS, false };
    const tag ApplicationSetupManufacturer = { "ApplicationSetupManufacturer", 0x300A0238, {1, 1}, VRType::LO, false };
    const tag ApplicationSetupName = { "ApplicationSetupName", 0x300A0236, {1, 1}, VRType::LO, false };
    const tag ApplicationSetupNumber = { "ApplicationSetupNumber", 0x300A0234, {1, 1}, VRType::IS, false };
    const tag ApplicationSetupSequence = { "ApplicationSetupSequence", 0x300A0230, {1, 1}, VRType::SQ, false };
    const tag ApplicationSetupType = { "ApplicationSetupType", 0x300A0232, {1, 1}, VRType::CS, false };
    const tag ApplicationVersion = { "ApplicationVersion", 0x00189525, {1, 1}, VRType::LO, false };
    const tag ApplicatorApertureShape = { "ApplicatorApertureShape", 0x300A0432, {1, 1}, VRType::CS, false };
    const tag ApplicatorDescription = { "ApplicatorDescription", 0x300A010A, {1, 1}, VRType::LO, false };
    const tag ApplicatorGeometrySequence = { "ApplicatorGeometrySequence", 0x300A0431, {1, 1}, VRType::SQ, false };
    const tag ApplicatorID = { "ApplicatorID", 0x300A0108, {1, 1}, VRType::SH, false };
    const tag ApplicatorOpening = { "ApplicatorOpening", 0x300A0433, {1, 1}, VRType::FL, false };
    const tag ApplicatorOpeningX = { "ApplicatorOpeningX", 0x300A0434, {1, 1}, VRType::FL, false };
    const tag ApplicatorOpeningY = { "ApplicatorOpeningY", 0x300A0435, {1, 1}, VRType::FL, false };
    const tag ApplicatorSequence = { "ApplicatorSequence", 0x300A0107, {1, 1}, VRType::SQ, false };
    const tag ApplicatorType = { "ApplicatorType", 0x300A0109, {1, 1}, VRType::CS, false };
    const tag ApprovalSequence = { "ApprovalSequence", 0x00440100, {1, 1}, VRType::SQ, false };
    const tag ApprovalStatus = { "ApprovalStatus", 0x300E0002, {1, 1}, VRType::CS, false };
    const tag ApprovalStatusDateTime = { "ApprovalStatusDateTime", 0x00440004, {1, 1}, VRType::DT, false };
    const tag ApprovalStatusFurtherDescription = { "ApprovalStatusFurtherDescription", 0x00440003, {1, 1}, VRType::LT, false };
    const tag ApprovalSubjectSequence = { "ApprovalSubjectSequence", 0x00440109, {1, 1}, VRType::SQ, false };
    const tag Arbitrary = { "Arbitrary", 0x40000010, {1, 1}, VRType::LT, false };
    const tag ArchiveRequested = { "ArchiveRequested", 0x0040A494, {1, 1}, VRType::CS, false };
    const tag ArterialSpinLabelingContrast = { "ArterialSpinLabelingContrast", 0x00189250, {1, 1}, VRType::CS, false };
    const tag AscanRate = { "AscanRate", 0x00221649, {1, 1}, VRType::FL, false };
    const tag ASLBolusCutoffDelayTime = { "ASLBolusCutoffDelayTime", 0x0018925F, {1, 1}, VRType::UL, false };
    const tag ASLBolusCutoffFlag = { "ASLBolusCutoffFlag", 0x0018925C, {1, 1}, VRType::CS, false };
    const tag ASLBolusCutoffTechnique = { "ASLBolusCutoffTechnique", 0x0018925E, {1, 1}, VRType::LO, false };
    const tag ASLBolusCutoffTimingSequence = { "ASLBolusCutoffTimingSequence", 0x0018925D, {1, 1}, VRType::SQ, false };
    const tag ASLContext = { "ASLContext", 0x00189257, {1, 1}, VRType::CS, false };
    const tag ASLCrusherDescription = { "ASLCrusherDescription", 0x0018925B, {1, 1}, VRType::LO, false };
    const tag ASLCrusherFlag = { "ASLCrusherFlag", 0x00189259, {1, 1}, VRType::CS, false };
    const tag ASLCrusherFlowLimit = { "ASLCrusherFlowLimit", 0x0018925A, {1, 1}, VRType::FD, false };
    const tag ASLMidSlabPosition = { "ASLMidSlabPosition", 0x00189256, {3, 3}, VRType::FD, false };
    const tag ASLPulseTrainDuration = { "ASLPulseTrainDuration", 0x00189258, {1, 1}, VRType::UL, false };
    const tag ASLSlabNumber = { "ASLSlabNumber", 0x00189253, {1, 1}, VRType::US, false };
    const tag ASLSlabOrientation = { "ASLSlabOrientation", 0x00189255, {3, 3}, VRType::FD, false };
    const tag ASLSlabSequence = { "ASLSlabSequence", 0x00189260, {1, 1}, VRType::SQ, false };
    const tag ASLSlabThickness = { "ASLSlabThickness", 0x00189254, {1, 1}, VRType::FD, false };
    const tag ASLTechniqueDescription = { "ASLTechniqueDescription", 0x00189252, {1, 1}, VRType::LO, false };
    const tag AsserterIdentificationSequence = { "AsserterIdentificationSequence", 0x00440103, {1, 1}, VRType::SQ, false };
    const tag AssertionCodeSequence = { "AssertionCodeSequence", 0x00440101, {1, 1}, VRType::SQ, false };
    const tag AssertionComments = { "AssertionComments", 0x00440106, {1, 1}, VRType::UT, false };
    const tag AssertionDateTime = { "AssertionDateTime", 0x00440104, {1, 1}, VRType::DT, false };
    const tag AssertionExpirationDateTime = { "AssertionExpirationDateTime", 0x00440105, {1, 1}, VRType::DT, false };
    const tag AssertionUID = { "AssertionUID", 0x00440102, {1, 1}, VRType::UI, false };
    const tag AssessedAttributeValueSequence = { "AssessedAttributeValueSequence", 0x00820010, {1, 1}, VRType::SQ, false };
    const tag AssessedSOPInstanceSequence = { "AssessedSOPInstanceSequence", 0x00820004, {1, 1}, VRType::SQ, false };
    const tag AssessmentLabel = { "AssessmentLabel", 0x00820023, {1, 1}, VRType::LO, false };
    const tag AssessmentObservationsSequence = { "AssessmentObservationsSequence", 0x00820007, {1, 1}, VRType::SQ, false };
    const tag AssessmentRequesterSequence = { "AssessmentRequesterSequence", 0x00820017, {1, 1}, VRType::SQ, false };
    const tag AssessmentSetID = { "AssessmentSetID", 0x00820016, {1, 1}, VRType::LO, false };
    const tag AssessmentSummary = { "AssessmentSummary", 0x00820001, {1, 1}, VRType::CS, false };
    const tag AssessmentSummaryDescription = { "AssessmentSummaryDescription", 0x00820003, {1, 1}, VRType::UT, false };
    const tag AssessmentTypeCodeSequence = { "AssessmentTypeCodeSequence", 0x00820021, {1, 1}, VRType::SQ, false };
    const tag AssignedLocation = { "AssignedLocation", 0x4010102A, {1, 1}, VRType::SH, false };
    const tag AssigningAgencyOrDepartmentCodeSequence = { "AssigningAgencyOrDepartmentCodeSequence", 0x0040003A, {1, 1}, VRType::SQ, false };
    const tag AssigningFacilitySequence = { "AssigningFacilitySequence", 0x00400036, {1, 1}, VRType::SQ, false };
    const tag AssigningJurisdictionCodeSequence = { "AssigningJurisdictionCodeSequence", 0x00400039, {1, 1}, VRType::SQ, false };
    const tag ATDAbilityAssessment = { "ATDAbilityAssessment", 0x40101014, {1, 1}, VRType::CS, false };
    const tag ATDAssessmentFlag = { "ATDAssessmentFlag", 0x40101015, {1, 1}, VRType::CS, false };
    const tag ATDAssessmentProbability = { "ATDAssessmentProbability", 0x40101016, {1, 1}, VRType::FL, false };
    const tag ATDAssessmentSequence = { "ATDAssessmentSequence", 0x40101038, {1, 1}, VRType::SQ, false };
    const tag AttachedContours = { "AttachedContours", 0x30060049, {1, 1}, VRType::IS, false };
    const tag AttenuationCorrected = { "AttenuationCorrected", 0x00189759, {1, 1}, VRType::CS, false };
    const tag AttenuationCorrectionMethod = { "AttenuationCorrectionMethod", 0x00541101, {1, 1}, VRType::LO, false };
    const tag AttenuationCorrectionSource = { "AttenuationCorrectionSource", 0x00189738, {1, 1}, VRType::CS, false };
    const tag AttenuationCorrectionTemporalRelationship = { "AttenuationCorrectionTemporalRelationship", 0x00189770, {1, 1}, VRType::CS, false };
    const tag AttributeItemSelector = { "AttributeItemSelector", 0x00741054, {1, 1}, VRType::UL, false };
    const tag AttributeModificationDateTime = { "AttributeModificationDateTime", 0x04000562, {1, 1}, VRType::DT, false };
    const tag AttributeOccurrencePointer = { "AttributeOccurrencePointer", 0x00741052, {1, 1}, VRType::AT, false };
    const tag AttributeOccurrencePrivateCreator = { "AttributeOccurrencePrivateCreator", 0x00741056, {1, 1}, VRType::LO, false };
    const tag AttributeOccurrenceSequence = { "AttributeOccurrenceSequence", 0x00741050, {1, 1}, VRType::SQ, false };
    const range_tag AudioComments = { "AudioComments", 0x5000200E, 0x50FF200E, 0x00010000, {1, 1}, VRType::LT, false };
    const range_tag AudioSampleData = { "AudioSampleData", 0x5000200C, 0x50FF200C, 0x00010000, {1, 1}, VRType::OB, true };
    const range_tag AudioSampleFormat = { "AudioSampleFormat", 0x50002002, 0x50FF2002, 0x00010000, {1, 1}, VRType::US, false };
    const range_tag AudioType = { "AudioType", 0x50002000, 0x50FF2000, 0x00010000, {1, 1}, VRType::US, false };
    const tag AuthorizationEquipmentCertificationNumber = { "AuthorizationEquipmentCertificationNumber", 0x01000426, {1, 1}, VRType::LO, false };
    const tag AuthorObserverSequence = { "AuthorObserverSequence", 0x0040A078, {1, 1}, VRType::SQ, false };
    const tag AutoKVPLowerBound = { "AutoKVPLowerBound", 0x00189946, {1, 1}, VRType::FD, false };
    const tag AutoKVPSelectionType = { "AutoKVPSelectionType", 0x00189944, {1, 1}, VRType::CS, false };
    const tag AutoKVPUpperBound = { "AutoKVPUpperBound", 0x00189945, {1, 1}, VRType::FD, false };
    const tag AutorefractionLeftEyeSequence = { "AutorefractionLeftEyeSequence", 0x00460052, {1, 1}, VRType::SQ, false };
    const tag AutorefractionRightEyeSequence = { "AutorefractionRightEyeSequence", 0x00460050, {1, 1}, VRType::SQ, false };
    const tag AutosequenceFlag = { "AutosequenceFlag", 0x00741025, {1, 1}, VRType::CS, false };
    const tag AverageBeamDosePointDepth = { "AverageBeamDosePointDepth", 0x300A008D, {1, 1}, VRType::FL, false };
    const tag AverageBeamDosePointEquivalentDepth = { "AverageBeamDosePointEquivalentDepth", 0x300A008E, {1, 1}, VRType::FL, false };
    const tag AverageBeamDosePointSourceToExternalContourDistance = { "AverageBeamDosePointSourceToExternalContourDistance", 0x300A0131, {1, 1}, VRType::FL, false };
    const tag AverageBeamDosePointSSD = { "AverageBeamDosePointSSD", 0x300A008F, {1, 1}, VRType::FL, false };
    const tag AverageCornealPower = { "AverageCornealPower", 0x00460220, {1, 1}, VRType::FL, false };
    const tag AveragePulseWidth = { "AveragePulseWidth", 0x00181154, {1, 1}, VRType::DS, false };
    const tag AxialAcceptance = { "AxialAcceptance", 0x00541200, {1, 1}, VRType::DS, false };
    const tag AxialDetectorDimension = { "AxialDetectorDimension", 0x00189727, {1, 1}, VRType::FD, false };
    const tag AxialLengthOfTheEye = { "AxialLengthOfTheEye", 0x00220030, {1, 1}, VRType::FL, false };
    const tag AxialMash = { "AxialMash", 0x00541201, {2, 2}, VRType::IS, false };
    const tag AxialPower = { "AxialPower", 0x00460249, {1, 1}, VRType::FL, false };
    const tag AxialResolution = { "AxialResolution", 0x00520008, {1, 1}, VRType::FD, false };
    const range_tag AxisLabels = { "AxisLabels", 0x50000040, 0x50FF0040, 0x00010000, {1, 1}, VRType::SH, false };
    const tag AxisOfRotation = { "AxisOfRotation", 0x0066001B, {3, 3}, VRType::FL, false };
    const range_tag AxisUnits = { "AxisUnits", 0x50000030, 0x50FF0030, 0x00010000, {1, 1}, VRType::SH, false };
    const tag B1rms = { "B1rms", 0x00181320, {1, 1}, VRType::FL, false };
    const tag BackgroundColor = { "BackgroundColor", 0x00460092, {1, 1}, VRType::CS, false };
    const tag BackgroundIlluminationColorCodeSequence = { "BackgroundIlluminationColorCodeSequence", 0x00240024, {1, 1}, VRType::SQ, false };
    const tag BackgroundLuminance = { "BackgroundLuminance", 0x00240020, {1, 1}, VRType::FL, false };
    const tag BadPixelImage = { "BadPixelImage", 0x00143080, {1, 1}, VRType::OB, false };
    const tag BarcodeSymbology = { "BarcodeSymbology", 0x22000006, {1, 1}, VRType::CS, false };
    const tag BarcodeValue = { "BarcodeValue", 0x22000005, {1, 1}, VRType::LT, false };
    const tag BaselineCorrection = { "BaselineCorrection", 0x00189067, {1, 1}, VRType::CS, false };
    const tag BasicColorImageSequence = { "BasicColorImageSequence", 0x20200111, {1, 1}, VRType::SQ, false };
    const tag BasicGrayscaleImageSequence = { "BasicGrayscaleImageSequence", 0x20200110, {1, 1}, VRType::SQ, false };
    const tag BasisMaterialsCodeSequence = { "BasisMaterialsCodeSequence", 0x40101045, {1, 1}, VRType::SQ, false };
    const tag BeamAngle = { "BeamAngle", 0x00189449, {1, 1}, VRType::FL, false };
    const tag BeamCurrentModulationID = { "BeamCurrentModulationID", 0x300A034C, {1, 1}, VRType::SH, false };
    const tag BeamDeliveryDurationLimit = { "BeamDeliveryDurationLimit", 0x300A00C5, {1, 1}, VRType::FD, false };
    const tag BeamDescription = { "BeamDescription", 0x300A00C3, {1, 1}, VRType::ST, false };
    const tag BeamDose = { "BeamDose", 0x300A0084, {1, 1}, VRType::DS, false };
    const tag BeamDoseMeaning = { "BeamDoseMeaning", 0x300A008B, {1, 1}, VRType::CS, false };
    const tag BeamDosePointDepth = { "BeamDosePointDepth", 0x300A0088, {1, 1}, VRType::FL, false };
    const tag BeamDosePointEquivalentDepth = { "BeamDosePointEquivalentDepth", 0x300A0089, {1, 1}, VRType::FL, false };
    const tag BeamDosePointSSD = { "BeamDosePointSSD", 0x300A008A, {1, 1}, VRType::FL, false };
    const tag BeamDoseSpecificationPoint = { "BeamDoseSpecificationPoint", 0x300A0082, {3, 3}, VRType::DS, false };
    const tag BeamDoseType = { "BeamDoseType", 0x300A0090, {1, 1}, VRType::CS, false };
    const tag BeamDoseVerificationControlPointSequence = { "BeamDoseVerificationControlPointSequence", 0x300A008C, {1, 1}, VRType::SQ, false };
    const tag BeamLimitingDeviceAngle = { "BeamLimitingDeviceAngle", 0x300A0120, {1, 1}, VRType::DS, false };
    const tag BeamLimitingDeviceAngleTolerance = { "BeamLimitingDeviceAngleTolerance", 0x300A0046, {1, 1}, VRType::DS, false };
    const tag BeamLimitingDeviceLeafPairsSequence = { "BeamLimitingDeviceLeafPairsSequence", 0x300800A0, {1, 1}, VRType::SQ, false };
    const tag BeamLimitingDevicePositionSequence = { "BeamLimitingDevicePositionSequence", 0x300A011A, {1, 1}, VRType::SQ, false };
    const tag BeamLimitingDevicePositionTolerance = { "BeamLimitingDevicePositionTolerance", 0x300A004A, {1, 1}, VRType::DS, false };
    const tag BeamLimitingDeviceRotationDirection = { "BeamLimitingDeviceRotationDirection", 0x300A0121, {1, 1}, VRType::CS, false };
    const tag BeamLimitingDeviceSequence = { "BeamLimitingDeviceSequence", 0x300A00B6, {1, 1}, VRType::SQ, false };
    const tag BeamLimitingDeviceToleranceSequence = { "BeamLimitingDeviceToleranceSequence", 0x300A0048, {1, 1}, VRType::SQ, false };
    const tag BeamMeterset = { "BeamMeterset", 0x300A0086, {1, 1}, VRType::DS, false };
    const tag BeamName = { "BeamName", 0x300A00C2, {1, 1}, VRType::LO, false };
    const tag BeamNumber = { "BeamNumber", 0x300A00C0, {1, 1}, VRType::IS, false };
    const tag BeamOrderIndex = { "BeamOrderIndex", 0x00741324, {1, 1}, VRType::UL, false };
    const tag BeamOrderIndexTrial = { "BeamOrderIndexTrial", 0x00741024, {1, 1}, VRType::IS, false };
    const tag BeamSequence = { "BeamSequence", 0x300A00B0, {1, 1}, VRType::SQ, false };
    const tag BeamSpotSize = { "BeamSpotSize", 0x00520003, {1, 1}, VRType::FD, false };
    const tag BeamStopperPosition = { "BeamStopperPosition", 0x30080230, {1, 1}, VRType::CS, false };
    const tag BeamTaskSequence = { "BeamTaskSequence", 0x00741020, {1, 1}, VRType::SQ, false };
    const tag BeamTaskType = { "BeamTaskType", 0x00741022, {1, 1}, VRType::CS, false };
    const tag BeamType = { "BeamType", 0x300A00C4, {1, 1}, VRType::CS, false };
    const tag BeatRejectionFlag = { "BeatRejectionFlag", 0x00181080, {1, 1}, VRType::CS, false };
    const tag BeltHeight = { "BeltHeight", 0x40101062, {1, 1}, VRType::FL, false };
    const tag BibliographicCitationTrial = { "BibliographicCitationTrial", 0x0040A16A, {1, 1}, VRType::ST, false };
    const tag BillingItemSequence = { "BillingItemSequence", 0x00400296, {1, 1}, VRType::SQ, false };
    const tag BillingProcedureStepSequence = { "BillingProcedureStepSequence", 0x00400320, {1, 1}, VRType::SQ, false };
    const tag BillingSuppliesAndDevicesSequence = { "BillingSuppliesAndDevicesSequence", 0x00400324, {1, 1}, VRType::SQ, false };
    const tag BiopsyTargetSequence = { "BiopsyTargetSequence", 0x00182041, {1, 1}, VRType::SQ, false };
    const tag BiPlaneAcquisitionSequence = { "BiPlaneAcquisitionSequence", 0x00285000, {1, 1}, VRType::SQ, false };
    const tag BitsAllocated = { "BitsAllocated", 0x00280100, {1, 1}, VRType::US, false };
    const range_tag BitsForCodeWord = { "BitsForCodeWord", 0x00280804, 0x002808F4, 0x00000010, {1, 1}, VRType::US, false };
    const tag BitsGrouped = { "BitsGrouped", 0x00280069, {1, 1}, VRType::US, false };
    const tag BitsMappedToColorLookupTable = { "BitsMappedToColorLookupTable", 0x00281403, {1, 1}, VRType::US, false };
    const tag BitsStored = { "BitsStored", 0x00280101, {1, 1}, VRType::US, false };
    const tag BlendingDisplayInputSequence = { "BlendingDisplayInputSequence", 0x00701B03, {1, 1}, VRType::SQ, false };
    const tag BlendingDisplaySequence = { "BlendingDisplaySequence", 0x00701B04, {1, 1}, VRType::SQ, false };
    const tag BlendingInputNumber = { "BlendingInputNumber", 0x00701B02, {1, 1}, VRType::US, false };
    const tag BlendingLookupTableData = { "BlendingLookupTableData", 0x00281408, {1, 1}, VRType::OW, false };
    const tag BlendingLookupTableDescriptor = { "BlendingLookupTableDescriptor", 0x00281407, {3, 3}, VRType::US, false };
    const tag BlendingLUT1Sequence = { "BlendingLUT1Sequence", 0x00281404, {1, 1}, VRType::SQ, false };
    const tag BlendingLUT1TransferFunction = { "BlendingLUT1TransferFunction", 0x00281405, {1, 1}, VRType::CS, false };
    const tag BlendingLUT2Sequence = { "BlendingLUT2Sequence", 0x0028140C, {1, 1}, VRType::SQ, false };
    const tag BlendingLUT2TransferFunction = { "BlendingLUT2TransferFunction", 0x0028140D, {1, 1}, VRType::CS, false };
    const tag BlendingMode = { "BlendingMode", 0x00701B06, {1, 1}, VRType::CS, false };
    const tag BlendingOperationType = { "BlendingOperationType", 0x00720500, {1, 1}, VRType::CS, false };
    const tag BlendingPosition = { "BlendingPosition", 0x00700405, {1, 1}, VRType::CS, false };
    const tag BlendingSequence = { "BlendingSequence", 0x00700402, {1, 1}, VRType::SQ, false };
    const tag BlendingWeightConstant = { "BlendingWeightConstant", 0x00281406, {1, 1}, VRType::FD, false };
    const tag BlindSpotLocalized = { "BlindSpotLocalized", 0x00240106, {1, 1}, VRType::CS, false };
    const tag BlindSpotXCoordinate = { "BlindSpotXCoordinate", 0x00240107, {1, 1}, VRType::FL, false };
    const tag BlindSpotYCoordinate = { "BlindSpotYCoordinate", 0x00240108, {1, 1}, VRType::FL, false };
    const tag BlockColumns = { "BlockColumns", 0x00280092, {1, 1}, VRType::US, false };
    const tag BlockData = { "BlockData", 0x300A0106, {2, 2}, VRType::DS, false };
    const tag BlockDivergence = { "BlockDivergence", 0x300A00FA, {1, 1}, VRType::CS, false };
    const tag BlockedPixels = { "BlockedPixels", 0x00280090, {1, 1}, VRType::CS, false };
    const tag BlockIdentifyingInformationStatus = { "BlockIdentifyingInformationStatus", 0x00080303, {1, 1}, VRType::CS, false };
    const tag BlockMountingPosition = { "BlockMountingPosition", 0x300A00FB, {1, 1}, VRType::CS, false };
    const tag BlockName = { "BlockName", 0x300A00FE, {1, 1}, VRType::LO, false };
    const tag BlockNumber = { "BlockNumber", 0x300A00FC, {1, 1}, VRType::IS, false };
    const tag BlockNumberOfPoints = { "BlockNumberOfPoints", 0x300A0104, {1, 1}, VRType::IS, false };
    const tag BlockRows = { "BlockRows", 0x00280091, {1, 1}, VRType::US, false };
    const tag BlockSequence = { "BlockSequence", 0x300A00F4, {1, 1}, VRType::SQ, false };
    const tag BlockSlabNumber = { "BlockSlabNumber", 0x300A0443, {1, 1}, VRType::US, false };
    const tag BlockSlabSequence = { "BlockSlabSequence", 0x300A0441, {1, 1}, VRType::SQ, false };
    const tag BlockSlabThickness = { "BlockSlabThickness", 0x300A0442, {1, 1}, VRType::DS, false };
    const tag BlockThickness = { "BlockThickness", 0x300A0100, {1, 1}, VRType::DS, false };
    const tag BlockTransmission = { "BlockTransmission", 0x300A0102, {1, 1}, VRType::DS, false };
    const tag BlockTrayID = { "BlockTrayID", 0x300A00F5, {1, 1}, VRType::SH, false };
    const tag BlockType = { "BlockType", 0x300A00F8, {1, 1}, VRType::CS, false };
    const tag BloodSignalNulling = { "BloodSignalNulling", 0x00189022, {1, 1}, VRType::CS, false };
    const tag BluePaletteColorLookupTableData = { "BluePaletteColorLookupTableData", 0x00281203, {1, 1}, VRType::OW, false };
    const tag BluePaletteColorLookupTableDescriptor = { "BluePaletteColorLookupTableDescriptor", 0x00281103, {3, 3}, VRType::US, true };
    const tag BoardingPassID = { "BoardingPassID", 0x4010101A, {1, 1}, VRType::SH, false };
    const tag BodyPartExamined = { "BodyPartExamined", 0x00180015, {1, 1}, VRType::CS, false };
    const tag BodyPartThickness = { "BodyPartThickness", 0x001811A0, {1, 1}, VRType::DS, false };
    const tag Bold = { "Bold", 0x00700249, {1, 1}, VRType::CS, false };
    const tag BolusDescription = { "BolusDescription", 0x300A00DD, {1, 1}, VRType::ST, false };
    const tag BolusID = { "BolusID", 0x300A00DC, {1, 1}, VRType::SH, false };
    const tag BoneThermalIndex = { "BoneThermalIndex", 0x00185024, {1, 1}, VRType::DS, false };
    const tag BorderDensity = { "BorderDensity", 0x20100100, {1, 1}, VRType::CS, false };
    const tag BottomRightHandCornerOfLocalizerArea = { "BottomRightHandCornerOfLocalizerArea", 0x00480202, {2, 2}, VRType::US, false };
    const tag BoundingBoxAnnotationUnits = { "BoundingBoxAnnotationUnits", 0x00700003, {1, 1}, VRType::CS, false };
    const tag BoundingBoxBottomRightHandCorner = { "BoundingBoxBottomRightHandCorner", 0x00700011, {2, 2}, VRType::FL, false };
    const tag BoundingBoxCrop = { "BoundingBoxCrop", 0x00701303, {6, 6}, VRType::FD, false };
    const tag BoundingBoxTextHorizontalJustification = { "BoundingBoxTextHorizontalJustification", 0x00700012, {1, 1}, VRType::CS, false };
    const tag BoundingBoxTopLeftHandCorner = { "BoundingBoxTopLeftHandCorner", 0x00700010, {2, 2}, VRType::FL, false };
    const tag BoundingPolygon = { "BoundingPolygon", 0x4010101D, {6, 6}, VRType::FL, false };
    const tag BoundingRectangle = { "BoundingRectangle", 0x00686347, {4, 4}, VRType::FD, false };
    const tag BrachyAccessoryDeviceID = { "BrachyAccessoryDeviceID", 0x300A0263, {1, 1}, VRType::SH, false };
    const tag BrachyAccessoryDeviceName = { "BrachyAccessoryDeviceName", 0x300A0266, {1, 1}, VRType::LO, false };
    const tag BrachyAccessoryDeviceNominalThickness = { "BrachyAccessoryDeviceNominalThickness", 0x300A026A, {1, 1}, VRType::DS, false };
    const tag BrachyAccessoryDeviceNominalTransmission = { "BrachyAccessoryDeviceNominalTransmission", 0x300A026C, {1, 1}, VRType::DS, false };
    const tag BrachyAccessoryDeviceNumber = { "BrachyAccessoryDeviceNumber", 0x300A0262, {1, 1}, VRType::IS, false };
    const tag BrachyAccessoryDeviceSequence = { "BrachyAccessoryDeviceSequence", 0x300A0260, {1, 1}, VRType::SQ, false };
    const tag BrachyAccessoryDeviceType = { "BrachyAccessoryDeviceType", 0x300A0264, {1, 1}, VRType::CS, false };
    const tag BrachyApplicationSetupDose = { "BrachyApplicationSetupDose", 0x300A00A4, {1, 1}, VRType::DS, false };
    const tag BrachyApplicationSetupDoseSpecificationPoint = { "BrachyApplicationSetupDoseSpecificationPoint", 0x300A00A2, {3, 3}, VRType::DS, false };
    const tag BrachyControlPointDeliveredSequence = { "BrachyControlPointDeliveredSequence", 0x30080160, {1, 1}, VRType::SQ, false };
    const tag BrachyControlPointSequence = { "BrachyControlPointSequence", 0x300A02D0, {1, 1}, VRType::SQ, false };
    const tag BrachyPulseControlPointDeliveredSequence = { "BrachyPulseControlPointDeliveredSequence", 0x30080173, {1, 1}, VRType::SQ, false };
    const tag BrachyReferencedDoseReferenceSequence = { "BrachyReferencedDoseReferenceSequence", 0x300C0055, {1, 1}, VRType::SQ, false };
    const tag BrachyTaskSequence = { "BrachyTaskSequence", 0x00741401, {1, 1}, VRType::SQ, false };
    const tag BrachyTreatmentTechnique = { "BrachyTreatmentTechnique", 0x300A0200, {1, 1}, VRType::CS, false };
    const tag BrachyTreatmentType = { "BrachyTreatmentType", 0x300A0202, {1, 1}, VRType::CS, false };
    const tag BranchOfService = { "BranchOfService", 0x00101081, {1, 1}, VRType::LO, false };
    const tag BreastImplantPresent = { "BreastImplantPresent", 0x00281300, {1, 1}, VRType::CS, false };
    const tag BreastSupportIsocenterPrimaryAngle = { "BreastSupportIsocenterPrimaryAngle", 0x00189545, {1, 1}, VRType::FD, false };
    const tag BreastSupportIsocenterSecondaryAngle = { "BreastSupportIsocenterSecondaryAngle", 0x00189546, {1, 1}, VRType::FD, false };
    const tag BreastSupportXPositionToIsocenter = { "BreastSupportXPositionToIsocenter", 0x00189547, {1, 1}, VRType::FD, false };
    const tag BreastSupportYPositionToIsocenter = { "BreastSupportYPositionToIsocenter", 0x00189548, {1, 1}, VRType::FD, false };
    const tag BreastSupportZPositionToIsocenter = { "BreastSupportZPositionToIsocenter", 0x00189549, {1, 1}, VRType::FD, false };
    const tag BreedRegistrationNumber = { "BreedRegistrationNumber", 0x00102295, {1, 1}, VRType::LO, false };
    const tag BreedRegistrationSequence = { "BreedRegistrationSequence", 0x00102294, {1, 1}, VRType::SQ, false };
    const tag BreedRegistryCodeSequence = { "BreedRegistryCodeSequence", 0x00102296, {1, 1}, VRType::SQ, false };
    const tag BridgeResistors = { "BridgeResistors", 0x00144088, {1, 1}, VRType::DS, false };
    const tag BscanCycleTime = { "BscanCycleTime", 0x00221645, {1, 1}, VRType::FL, false };
    const tag BscanCycleTimeVector = { "BscanCycleTimeVector", 0x00221646, {1, 1}, VRType::FL, false };
    const tag BscanRate = { "BscanRate", 0x00221650, {1, 1}, VRType::FL, false };
    const tag BscanSlabThickness = { "BscanSlabThickness", 0x00221643, {1, 1}, VRType::FL, false };
    const tag BulkMotionCompensationTechnique = { "BulkMotionCompensationTechnique", 0x00189172, {1, 1}, VRType::CS, false };
    const tag BulkMotionSignalSource = { "BulkMotionSignalSource", 0x00189173, {1, 1}, VRType::CS, false };
    const tag BulkMotionStatus = { "BulkMotionStatus", 0x00189166, {1, 1}, VRType::CS, false };
    const tag BurnedInAnnotation = { "BurnedInAnnotation", 0x00280301, {1, 1}, VRType::CS, false };
    const tag CADFileFormat = { "CADFileFormat", 0x00140023, {1, 1}, VRType::ST, false };
    const tag CalciumScoringMassFactorDevice = { "CalciumScoringMassFactorDevice", 0x00189352, {3, 3}, VRType::FL, false };
    const tag CalciumScoringMassFactorPatient = { "CalciumScoringMassFactorPatient", 0x00189351, {1, 1}, VRType::FL, false };
    const tag CalculatedAnatomyThickness = { "CalculatedAnatomyThickness", 0x00189452, {1, 1}, VRType::FL, false };
    const tag CalculatedDoseReferenceDescription = { "CalculatedDoseReferenceDescription", 0x30080074, {1, 1}, VRType::ST, false };
    const tag CalculatedDoseReferenceDoseValue = { "CalculatedDoseReferenceDoseValue", 0x30080076, {1, 1}, VRType::DS, false };
    const tag CalculatedDoseReferenceNumber = { "CalculatedDoseReferenceNumber", 0x30080072, {1, 1}, VRType::IS, false };
    const tag CalculatedDoseReferenceSequence = { "CalculatedDoseReferenceSequence", 0x30080070, {1, 1}, VRType::SQ, false };
    const tag CalculatedFrameList = { "CalculatedFrameList", 0x00081162, {3, 3}, VRType::UL, false };
    const tag CalculatedTargetPosition = { "CalculatedTargetPosition", 0x00182044, {3, 3}, VRType::FL, false };
    const tag CalibrationDataSequence = { "CalibrationDataSequence", 0x00540306, {1, 1}, VRType::SQ, false };
    const tag CalibrationDate = { "CalibrationDate", 0x0014407E, {1, 1}, VRType::DA, false };
    const tag CalibrationImage = { "CalibrationImage", 0x00500004, {1, 1}, VRType::CS, false };
    const tag CalibrationNotes = { "CalibrationNotes", 0x00143099, {1, 1}, VRType::LT, false };
    const tag CalibrationProcedure = { "CalibrationProcedure", 0x00144072, {1, 1}, VRType::ST, false };
    const tag CalibrationSequence = { "CalibrationSequence", 0x00189455, {1, 1}, VRType::SQ, false };
    const tag CalibrationSettingsSequence = { "CalibrationSettingsSequence", 0x00144070, {1, 1}, VRType::SQ, false };
    const tag CalibrationTime = { "CalibrationTime", 0x0014407C, {1, 1}, VRType::TM, false };
    const tag CameraAngleOfView = { "CameraAngleOfView", 0x0022001E, {1, 1}, VRType::FL, false };
    const tag CardiacBeatRejectionTechnique = { "CardiacBeatRejectionTechnique", 0x00189169, {1, 1}, VRType::CS, false };
    const tag CardiacCyclePosition = { "CardiacCyclePosition", 0x00189236, {1, 1}, VRType::CS, false };
    const tag CardiacFramingType = { "CardiacFramingType", 0x00181064, {1, 1}, VRType::LO, false };
    const tag CardiacNumberOfImages = { "CardiacNumberOfImages", 0x00181090, {1, 1}, VRType::IS, false };
    const tag CardiacRRIntervalSpecified = { "CardiacRRIntervalSpecified", 0x00189070, {1, 1}, VRType::FD, false };
    const tag CardiacSignalSource = { "CardiacSignalSource", 0x00189085, {1, 1}, VRType::CS, false };
    const tag CardiacSynchronizationSequence = { "CardiacSynchronizationSequence", 0x00189118, {1, 1}, VRType::SQ, false };
    const tag CardiacSynchronizationTechnique = { "CardiacSynchronizationTechnique", 0x00189037, {1, 1}, VRType::CS, false };
    const tag CArmPositionerTabletopRelationship = { "CArmPositionerTabletopRelationship", 0x00189474, {1, 1}, VRType::CS, false };
    const tag CarrierID = { "CarrierID", 0x40101058, {1, 1}, VRType::SH, false };
    const tag CarrierIDAssigningAuthority = { "CarrierIDAssigningAuthority", 0x40101059, {1, 1}, VRType::CS, false };
    const tag CassetteID = { "CassetteID", 0x00181007, {1, 1}, VRType::LO, false };
    const tag CassetteOrientation = { "CassetteOrientation", 0x00181402, {1, 1}, VRType::CS, false };
    const tag CassetteSize = { "CassetteSize", 0x00181403, {1, 1}, VRType::CS, false };
    const tag CatchTrialsDataFlag = { "CatchTrialsDataFlag", 0x00240055, {1, 1}, VRType::CS, false };
    const tag CatheterDirectionOfRotation = { "CatheterDirectionOfRotation", 0x00520031, {1, 1}, VRType::CS, false };
    const tag CatheterRotationalRate = { "CatheterRotationalRate", 0x00520013, {1, 1}, VRType::FD, false };
    const tag CenterOfCircularCollimator = { "CenterOfCircularCollimator", 0x00181710, {2, 2}, VRType::IS, false };
    const tag CenterOfCircularExposureControlSensingRegion = { "CenterOfCircularExposureControlSensingRegion", 0x00189440, {2, 2}, VRType::SS, false };
    const tag CenterOfCircularShutter = { "CenterOfCircularShutter", 0x00181610, {2, 2}, VRType::IS, false };
    const tag CenterOfMass = { "CenterOfMass", 0x4010101B, {3, 3}, VRType::FL, false };
    const tag CenterOfPTO = { "CenterOfPTO", 0x4010101C, {3, 3}, VRType::FL, false };
    const tag CenterOfRotation = { "CenterOfRotation", 0x0066001C, {3, 3}, VRType::FL, false };
    const tag CenterOfRotationOffset = { "CenterOfRotationOffset", 0x00181145, {1, 1}, VRType::DS, false };
    const tag CertificateOfSigner = { "CertificateOfSigner", 0x04000115, {1, 1}, VRType::OB, false };
    const tag CertificateType = { "CertificateType", 0x04000110, {1, 1}, VRType::CS, false };
    const tag CertifiedTimestamp = { "CertifiedTimestamp", 0x04000310, {1, 1}, VRType::OB, false };
    const tag CertifiedTimestampType = { "CertifiedTimestampType", 0x04000305, {1, 1}, VRType::CS, false };
    const tag ChairHeadFramePosition = { "ChairHeadFramePosition", 0x300A0151, {1, 1}, VRType::DS, false };
    const tag ChairHeadFramePositionTolerance = { "ChairHeadFramePositionTolerance", 0x300A0153, {1, 1}, VRType::DS, false };
    const tag ChannelBaseline = { "ChannelBaseline", 0x003A0213, {1, 1}, VRType::DS, false };
    const tag ChannelDefinitionSequence = { "ChannelDefinitionSequence", 0x003A0200, {1, 1}, VRType::SQ, false };
    const tag ChannelDeliveryContinuationSequence = { "ChannelDeliveryContinuationSequence", 0x0074140D, {1, 1}, VRType::SQ, false };
    const tag ChannelDeliveryOrderIndex = { "ChannelDeliveryOrderIndex", 0x0074140C, {1, 1}, VRType::IS, false };
    const tag ChannelDeliveryOrderSequence = { "ChannelDeliveryOrderSequence", 0x00741405, {1, 1}, VRType::SQ, false };
    const tag ChannelDerivationDescription = { "ChannelDerivationDescription", 0x003A020C, {1, 1}, VRType::LO, false };
    const tag ChannelDescriptionCodeSequence = { "ChannelDescriptionCodeSequence", 0x0022001A, {1, 1}, VRType::SQ, false };
    const tag ChannelDisplaySequence = { "ChannelDisplaySequence", 0x003A0242, {1, 1}, VRType::SQ, false };
    const tag ChannelEffectiveLength = { "ChannelEffectiveLength", 0x300A0271, {1, 1}, VRType::DS, false };
    const tag ChannelIdentificationCode = { "ChannelIdentificationCode", 0x003A0301, {1, 1}, VRType::IS, false };
    const tag ChannelInnerLength = { "ChannelInnerLength", 0x300A0272, {1, 1}, VRType::DS, false };
    const tag ChannelLabel = { "ChannelLabel", 0x003A0203, {1, 1}, VRType::SH, false };
    const tag ChannelLength = { "ChannelLength", 0x300A0284, {1, 1}, VRType::DS, false };
    const tag ChannelMaximumValue = { "ChannelMaximumValue", 0x54000112, {1, 1}, VRType::OB, true };
    const tag ChannelMinimumValue = { "ChannelMinimumValue", 0x54000110, {1, 1}, VRType::OB, true };
    const tag ChannelMode = { "ChannelMode", 0x003A0302, {1, 1}, VRType::CS, false };
    const tag ChannelNumber = { "ChannelNumber", 0x300A0282, {1, 1}, VRType::IS, false };
    const tag ChannelOffset = { "ChannelOffset", 0x003A0218, {1, 1}, VRType::DS, false };
    const tag ChannelOverlap = { "ChannelOverlap", 0x0014409F, {1, 1}, VRType::DS, false };
    const tag ChannelPosition = { "ChannelPosition", 0x003A0245, {1, 1}, VRType::FL, false };
    const tag ChannelRecommendedDisplayCIELabValue = { "ChannelRecommendedDisplayCIELabValue", 0x003A0244, {3, 3}, VRType::US, false };
    const tag ChannelSampleSkew = { "ChannelSampleSkew", 0x003A0215, {1, 1}, VRType::DS, false };
    const tag ChannelSensitivity = { "ChannelSensitivity", 0x003A0210, {1, 1}, VRType::DS, false };
    const tag ChannelSensitivityCorrectionFactor = { "ChannelSensitivityCorrectionFactor", 0x003A0212, {1, 1}, VRType::DS, false };
    const tag ChannelSensitivityUnitsSequence = { "ChannelSensitivityUnitsSequence", 0x003A0211, {1, 1}, VRType::SQ, false };
    const tag ChannelSequence = { "ChannelSequence", 0x300A0280, {1, 1}, VRType::SQ, false };
    const tag ChannelSettingsSequence = { "ChannelSettingsSequence", 0x00144091, {1, 1}, VRType::SQ, false };
    const tag ChannelShieldID = { "ChannelShieldID", 0x300A02B3, {1, 1}, VRType::SH, false };
    const tag ChannelShieldName = { "ChannelShieldName", 0x300A02B4, {1, 1}, VRType::LO, false };
    const tag ChannelShieldNominalThickness = { "ChannelShieldNominalThickness", 0x300A02B8, {1, 1}, VRType::DS, false };
    const tag ChannelShieldNominalTransmission = { "ChannelShieldNominalTransmission", 0x300A02BA, {1, 1}, VRType::DS, false };
    const tag ChannelShieldNumber = { "ChannelShieldNumber", 0x300A02B2, {1, 1}, VRType::IS, false };
    const tag ChannelShieldSequence = { "ChannelShieldSequence", 0x300A02B0, {1, 1}, VRType::SQ, false };
    const tag ChannelSourceModifiersSequence = { "ChannelSourceModifiersSequence", 0x003A0209, {1, 1}, VRType::SQ, false };
    const tag ChannelSourceSequence = { "ChannelSourceSequence", 0x003A0208, {1, 1}, VRType::SQ, false };
    const tag ChannelStatus = { "ChannelStatus", 0x003A0205, {1, 1}, VRType::CS, false };
    const tag ChannelThreshold = { "ChannelThreshold", 0x00144092, {1, 1}, VRType::DS, false };
    const tag ChannelTimeSkew = { "ChannelTimeSkew", 0x003A0214, {1, 1}, VRType::DS, false };
    const tag ChannelTotalTime = { "ChannelTotalTime", 0x300A0286, {1, 1}, VRType::DS, false };
    const tag ChannelWidth = { "ChannelWidth", 0x00460042, {1, 1}, VRType::FD, false };
    const tag ChemicalShiftMaximumIntegrationLimitInHz = { "ChemicalShiftMaximumIntegrationLimitInHz", 0x00189196, {1, 1}, VRType::FD, false };
    const tag ChemicalShiftMaximumIntegrationLimitInppm = { "ChemicalShiftMaximumIntegrationLimitInppm", 0x00189296, {1, 1}, VRType::FD, false };
    const tag ChemicalShiftMinimumIntegrationLimitInHz = { "ChemicalShiftMinimumIntegrationLimitInHz", 0x00189195, {1, 1}, VRType::FD, false };
    const tag ChemicalShiftMinimumIntegrationLimitInppm = { "ChemicalShiftMinimumIntegrationLimitInppm", 0x00189295, {1, 1}, VRType::FD, false };
    const tag ChemicalShiftReference = { "ChemicalShiftReference", 0x00189053, {1, 2}, VRType::FD, false };
    const tag ChemicalShiftSequence = { "ChemicalShiftSequence", 0x00189084, {1, 1}, VRType::SQ, false };
    const tag CIExyWhitePoint = { "CIExyWhitePoint", 0x00287018, {2, 2}, VRType::FL, false };
    const tag CineRate = { "CineRate", 0x00180040, {1, 1}, VRType::IS, false };
    const tag CineRelativeToRealTime = { "CineRelativeToRealTime", 0x00720330, {1, 1}, VRType::FD, false };
    const tag ClinicalTrialCoordinatingCenterName = { "ClinicalTrialCoordinatingCenterName", 0x00120060, {1, 1}, VRType::LO, false };
    const tag ClinicalTrialProtocolEthicsCommitteeApprovalNumber = { "ClinicalTrialProtocolEthicsCommitteeApprovalNumber", 0x00120082, {1, 1}, VRType::LO, false };
    const tag ClinicalTrialProtocolEthicsCommitteeName = { "ClinicalTrialProtocolEthicsCommitteeName", 0x00120081, {1, 1}, VRType::LO, false };
    const tag ClinicalTrialProtocolID = { "ClinicalTrialProtocolID", 0x00120020, {1, 1}, VRType::LO, false };
    const tag ClinicalTrialProtocolName = { "ClinicalTrialProtocolName", 0x00120021, {1, 1}, VRType::LO, false };
    const tag ClinicalTrialSeriesDescription = { "ClinicalTrialSeriesDescription", 0x00120072, {1, 1}, VRType::LO, false };
    const tag ClinicalTrialSeriesID = { "ClinicalTrialSeriesID", 0x00120071, {1, 1}, VRType::LO, false };
    const tag ClinicalTrialSiteID = { "ClinicalTrialSiteID", 0x00120030, {1, 1}, VRType::LO, false };
    const tag ClinicalTrialSiteName = { "ClinicalTrialSiteName", 0x00120031, {1, 1}, VRType::LO, false };
    const tag ClinicalTrialSponsorName = { "ClinicalTrialSponsorName", 0x00120010, {1, 1}, VRType::LO, false };
    const tag ClinicalTrialSubjectID = { "ClinicalTrialSubjectID", 0x00120040, {1, 1}, VRType::LO, false };
    const tag ClinicalTrialSubjectReadingID = { "ClinicalTrialSubjectReadingID", 0x00120042, {1, 1}, VRType::LO, false };
    const tag ClinicalTrialTimePointDescription = { "ClinicalTrialTimePointDescription", 0x00120051, {1, 1}, VRType::ST, false };
    const tag ClinicalTrialTimePointID = { "ClinicalTrialTimePointID", 0x00120050, {1, 1}, VRType::LO, false };
    const tag CoatingMaterialsCodeSequence = { "CoatingMaterialsCodeSequence", 0x006863A4, {1, 1}, VRType::SQ, false };
    const range_tag CodeLabel = { "CodeLabel", 0x00280800, 0x002808F0, 0x00000010, {1, 1}, VRType::CS, false };
    const tag CodeMeaning = { "CodeMeaning", 0x00080104, {1, 1}, VRType::LO, false };
    const tag CodeNumberFormat = { "CodeNumberFormat", 0x00280740, {1, 1}, VRType::US, false };
    const range_tag CodeTableLocation = { "CodeTableLocation", 0x00280803, 0x002808F3, 0x00000010, {1, 1}, VRType::AT, false };
    const tag CodeValue = { "CodeValue", 0x00080100, {1, 1}, VRType::SH, false };
    const tag CodingSchemeDesignator = { "CodingSchemeDesignator", 0x00080102, {1, 1}, VRType::SH, false };
    const tag CodingSchemeExternalID = { "CodingSchemeExternalID", 0x00080114, {1, 1}, VRType::ST, false };
    const tag CodingSchemeIdentificationSequence = { "CodingSchemeIdentificationSequence", 0x00080110, {1, 1}, VRType::SQ, false };
    const tag CodingSchemeName = { "CodingSchemeName", 0x00080115, {1, 1}, VRType::ST, false };
    const tag CodingSchemeRegistry = { "CodingSchemeRegistry", 0x00080112, {1, 1}, VRType::LO, false };
    const tag CodingSchemeResourcesSequence = { "CodingSchemeResourcesSequence", 0x00080109, {1, 1}, VRType::SQ, false };
    const tag CodingSchemeResponsibleOrganization = { "CodingSchemeResponsibleOrganization", 0x00080116, {1, 1}, VRType::ST, false };
    const tag CodingSchemeUID = { "CodingSchemeUID", 0x0008010C, {1, 1}, VRType::UI, false };
    const tag CodingSchemeURL = { "CodingSchemeURL", 0x0008010E, {1, 1}, VRType::UR, false };
    const tag CodingSchemeURLType = { "CodingSchemeURLType", 0x0008010A, {1, 1}, VRType::CS, false };
    const tag CodingSchemeVersion = { "CodingSchemeVersion", 0x00080103, {1, 1}, VRType::SH, false };
    const range_tag CoefficientCoding = { "CoefficientCoding", 0x00280402, 0x002804F2, 0x00000010, {1, 1}, VRType::LO, false };
    const range_tag CoefficientCodingPointers = { "CoefficientCodingPointers", 0x00280403, 0x002804F3, 0x00000010, {1, 1}, VRType::AT, false };
    const tag CoefficientsSDDN = { "CoefficientsSDDN", 0x7FE00040, {1, 1}, VRType::OW, false };
    const tag CoefficientsSDHN = { "CoefficientsSDHN", 0x7FE00030, {1, 1}, VRType::OW, false };
    const tag CoefficientsSDVN = { "CoefficientsSDVN", 0x7FE00020, {1, 1}, VRType::OW, false };
    const tag CoincidenceWindowWidth = { "CoincidenceWindowWidth", 0x00541210, {1, 1}, VRType::DS, false };
    const tag CollationFlag = { "CollationFlag", 0x20000063, {1, 1}, VRType::CS, false };
    const tag CollimatorGridName = { "CollimatorGridName", 0x00181180, {1, 1}, VRType::SH, false };
    const tag CollimatorLeftVerticalEdge = { "CollimatorLeftVerticalEdge", 0x00181702, {1, 1}, VRType::IS, false };
    const tag CollimatorLowerHorizontalEdge = { "CollimatorLowerHorizontalEdge", 0x00181708, {1, 1}, VRType::IS, false };
    const tag CollimatorRightVerticalEdge = { "CollimatorRightVerticalEdge", 0x00181704, {1, 1}, VRType::IS, false };
    const tag CollimatorShape = { "CollimatorShape", 0x00181700, {1, 3}, VRType::CS, false };
    const tag CollimatorShapeSequence = { "CollimatorShapeSequence", 0x00189407, {1, 1}, VRType::SQ, false };
    const tag CollimatorType = { "CollimatorType", 0x00181181, {1, 1}, VRType::CS, false };
    const tag CollimatorUpperHorizontalEdge = { "CollimatorUpperHorizontalEdge", 0x00181706, {1, 1}, VRType::IS, false };
    const tag ColorImagePrintingFlag = { "ColorImagePrintingFlag", 0x20000062, {1, 1}, VRType::CS, false };
    const tag ColorSpace = { "ColorSpace", 0x00282002, {1, 1}, VRType::CS, false };
    const tag ColumnAngulation = { "ColumnAngulation", 0x00181450, {1, 1}, VRType::DS, false };
    const tag ColumnAngulationPatient = { "ColumnAngulationPatient", 0x00189447, {1, 1}, VRType::FL, false };
    const tag ColumnOverlap = { "ColumnOverlap", 0x00280094, {1, 1}, VRType::US, false };
    const tag ColumnPositionInTotalImagePixelMatrix = { "ColumnPositionInTotalImagePixelMatrix", 0x0048021E, {1, 1}, VRType::SL, false };
    const tag Columns = { "Columns", 0x00280011, {1, 1}, VRType::US, false };
    const range_tag ColumnsForNthOrderCoefficients = { "ColumnsForNthOrderCoefficients", 0x00280401, 0x002804F1, 0x00000010, {1, 1}, VRType::US, false };
    const tag CommentsOnPatientPerformanceOfVisualField = { "CommentsOnPatientPerformanceOfVisualField", 0x00240044, {1, 1}, VRType::LT, false };
    const tag CommentsOnRadiationDose = { "CommentsOnRadiationDose", 0x00400310, {1, 1}, VRType::ST, false };
    const tag CommentsOnThePerformedProcedureStep = { "CommentsOnThePerformedProcedureStep", 0x00400280, {1, 1}, VRType::ST, false };
    const tag CommentsOnTheScheduledProcedureStep = { "CommentsOnTheScheduledProcedureStep", 0x00400400, {1, 1}, VRType::LT, false };
    const tag CompensatorColumnOffset = { "CompensatorColumnOffset", 0x300A02E5, {1, 1}, VRType::FL, false };
    const tag CompensatorColumns = { "CompensatorColumns", 0x300A00E8, {1, 1}, VRType::IS, false };
    const tag CompensatorDescription = { "CompensatorDescription", 0x300A02EB, {1, 1}, VRType::LT, false };
    const tag CompensatorDivergence = { "CompensatorDivergence", 0x300A02E0, {1, 1}, VRType::CS, false };
    const tag CompensatorID = { "CompensatorID", 0x300A00E5, {1, 1}, VRType::SH, false };
    const tag CompensatorMillingToolDiameter = { "CompensatorMillingToolDiameter", 0x300A02E8, {1, 1}, VRType::FL, false };
    const tag CompensatorMountingPosition = { "CompensatorMountingPosition", 0x300A02E1, {1, 1}, VRType::CS, false };
    const tag CompensatorNumber = { "CompensatorNumber", 0x300A00E4, {1, 1}, VRType::IS, false };
    const tag CompensatorPixelSpacing = { "CompensatorPixelSpacing", 0x300A00E9, {2, 2}, VRType::DS, false };
    const tag CompensatorPosition = { "CompensatorPosition", 0x300A00EA, {2, 2}, VRType::DS, false };
    const tag CompensatorRelativeStoppingPowerRatio = { "CompensatorRelativeStoppingPowerRatio", 0x300A02E7, {1, 1}, VRType::FL, false };
    const tag CompensatorRows = { "CompensatorRows", 0x300A00E7, {1, 1}, VRType::IS, false };
    const tag CompensatorSequence = { "CompensatorSequence", 0x300A00E3, {1, 1}, VRType::SQ, false };
    const tag CompensatorThicknessData = { "CompensatorThicknessData", 0x300A00EC, {1, 1}, VRType::DS, false };
    const tag CompensatorTransmissionData = { "CompensatorTransmissionData", 0x300A00EB, {1, 1}, VRType::DS, false };
    const tag CompensatorTrayID = { "CompensatorTrayID", 0x300A00EF, {1, 1}, VRType::SH, false };
    const tag CompensatorType = { "CompensatorType", 0x300A00EE, {1, 1}, VRType::CS, false };
    const tag CompletionFlag = { "CompletionFlag", 0x0040A491, {1, 1}, VRType::CS, false };
    const tag CompletionFlagDescription = { "CompletionFlagDescription", 0x0040A492, {1, 1}, VRType::LO, false };
    const tag ComplexImageComponent = { "ComplexImageComponent", 0x00089208, {1, 1}, VRType::CS, false };
    const tag Component1ReferencedID = { "Component1ReferencedID", 0x00760070, {1, 1}, VRType::US, false };
    const tag Component1ReferencedMatingFeatureID = { "Component1ReferencedMatingFeatureID", 0x00760090, {1, 1}, VRType::US, false };
    const tag Component1ReferencedMatingFeatureSetID = { "Component1ReferencedMatingFeatureSetID", 0x00760080, {1, 1}, VRType::US, false };
    const tag Component2ReferencedID = { "Component2ReferencedID", 0x007600A0, {1, 1}, VRType::US, false };
    const tag Component2ReferencedMatingFeatureID = { "Component2ReferencedMatingFeatureID", 0x007600C0, {1, 1}, VRType::US, false };
    const tag Component2ReferencedMatingFeatureSetID = { "Component2ReferencedMatingFeatureSetID", 0x007600B0, {1, 1}, VRType::US, false };
    const tag ComponentAssemblySequence = { "ComponentAssemblySequence", 0x00760060, {1, 1}, VRType::SQ, false };
    const tag ComponentID = { "ComponentID", 0x00760055, {1, 1}, VRType::US, false };
    const tag ComponentInputSequence = { "ComponentInputSequence", 0x00701803, {1, 1}, VRType::SQ, false };
    const tag ComponentManufacturer = { "ComponentManufacturer", 0x00140028, {1, 1}, VRType::ST, false };
    const tag ComponentManufacturingProcedure = { "ComponentManufacturingProcedure", 0x00140025, {1, 1}, VRType::ST, false };
    const tag ComponentReferenceSystem = { "ComponentReferenceSystem", 0x00140024, {1, 1}, VRType::ST, false };
    const tag ComponentSequence = { "ComponentSequence", 0x00760040, {1, 1}, VRType::SQ, false };
    const tag ComponentShape = { "ComponentShape", 0x00140050, {1, 1}, VRType::CS, false };
    const tag ComponentType = { "ComponentType", 0x00701802, {1, 1}, VRType::CS, false };
    const tag ComponentTypeCodeSequence = { "ComponentTypeCodeSequence", 0x00760034, {1, 1}, VRType::SQ, false };
    const tag ComponentTypesSequence = { "ComponentTypesSequence", 0x00760032, {1, 1}, VRType::SQ, false };
    const tag ComponentWelderIDs = { "ComponentWelderIDs", 0x00140100, {1, 1}, VRType::LO, false };
    const tag CompositingMethod = { "CompositingMethod", 0x00701206, {1, 1}, VRType::CS, false };
    const tag CompoundGraphicInstanceID = { "CompoundGraphicInstanceID", 0x00700226, {1, 1}, VRType::UL, false };
    const tag CompoundGraphicSequence = { "CompoundGraphicSequence", 0x00700209, {1, 1}, VRType::SQ, false };
    const tag CompoundGraphicType = { "CompoundGraphicType", 0x00700294, {1, 1}, VRType::CS, false };
    const tag CompoundGraphicUnits = { "CompoundGraphicUnits", 0x00700282, {1, 1}, VRType::CS, false };
    const tag CompressionCode = { "CompressionCode", 0x00280060, {1, 1}, VRType::CS, false };
    const tag CompressionContactArea = { "CompressionContactArea", 0x001811A5, {1, 1}, VRType::DS, false };
    const tag CompressionDescription = { "CompressionDescription", 0x00280063, {1, 1}, VRType::SH, false };
    const tag CompressionForce = { "CompressionForce", 0x001811A2, {1, 1}, VRType::DS, false };
    const tag CompressionLabel = { "CompressionLabel", 0x00280062, {1, 1}, VRType::LO, false };
    const tag CompressionOriginator = { "CompressionOriginator", 0x00280061, {1, 1}, VRType::SH, false };
    const tag CompressionPressure = { "CompressionPressure", 0x001811A3, {1, 1}, VRType::DS, false };
    const tag CompressionRecognitionCode = { "CompressionRecognitionCode", 0x0028005F, {1, 1}, VRType::LO, false };
    const tag CompressionSequence = { "CompressionSequence", 0x00280065, {1, 1}, VRType::CS, false };
    const tag CompressionStepPointers = { "CompressionStepPointers", 0x00280066, {1, 1}, VRType::AT, false };
    const tag ConcatenationFrameOffsetNumber = { "ConcatenationFrameOffsetNumber", 0x00209228, {1, 1}, VRType::UL, false };
    const tag ConcatenationUID = { "ConcatenationUID", 0x00209161, {1, 1}, VRType::UI, false };
    const tag ConceptCodeSequence = { "ConceptCodeSequence", 0x0040A168, {1, 1}, VRType::SQ, false };
    const tag ConceptNameCodeSequence = { "ConceptNameCodeSequence", 0x0040A043, {1, 1}, VRType::SQ, false };
    const tag CondenserLensPower = { "CondenserLensPower", 0x00480111, {1, 1}, VRType::DS, false };
    const tag ConfidentialityCode = { "ConfidentialityCode", 0x00401008, {1, 1}, VRType::LO, false };
    const tag ConfidentialityConstraintOnPatientDataDescription = { "ConfidentialityConstraintOnPatientDataDescription", 0x00403001, {1, 1}, VRType::LO, false };
    const tag ConfigurationDescription = { "ConfigurationDescription", 0x0028700D, {1, 1}, VRType::LO, false };
    const tag ConfigurationID = { "ConfigurationID", 0x0028700B, {1, 1}, VRType::US, false };
    const tag ConfigurationInformation = { "ConfigurationInformation", 0x20100150, {1, 1}, VRType::ST, false };
    const tag ConfigurationInformationDescription = { "ConfigurationInformationDescription", 0x20100152, {1, 1}, VRType::LT, false };
    const tag ConfigurationName = { "ConfigurationName", 0x0028700C, {1, 1}, VRType::SH, false };
    const tag ConfigurationQAResultsSequence = { "ConfigurationQAResultsSequence", 0x00287011, {1, 1}, VRType::SQ, false };
    const tag ConnectorType = { "ConnectorType", 0x00145105, {1, 1}, VRType::CS, false };
    const tag ConsentForClinicalTrialUseSequence = { "ConsentForClinicalTrialUseSequence", 0x00120083, {1, 1}, VRType::SQ, false };
    const tag ConsentForDistributionFlag = { "ConsentForDistributionFlag", 0x00120085, {1, 1}, VRType::CS, false };
    const tag ConstantVolumeFlag = { "ConstantVolumeFlag", 0x00189333, {1, 1}, VRType::CS, false };
    const tag ConstraintType = { "ConstraintType", 0x00820032, {1, 1}, VRType::CS, false };
    const tag ConstraintValueSequence = { "ConstraintValueSequence", 0x00820034, {1, 1}, VRType::SQ, false };
    const tag ConstraintViolationCondition = { "ConstraintViolationCondition", 0x00820037, {1, 1}, VRType::UT, false };
    const tag ConstraintViolationSignificance = { "ConstraintViolationSignificance", 0x00820036, {1, 1}, VRType::CS, false };
    const tag ConstraintWeight = { "ConstraintWeight", 0x300A0021, {1, 1}, VRType::DS, false };
    const tag ConsultingPhysicianIdentificationSequence = { "ConsultingPhysicianIdentificationSequence", 0x0008009D, {1, 1}, VRType::SQ, false };
    const tag ConsultingPhysicianName = { "ConsultingPhysicianName", 0x0008009C, {1, 1}, VRType::PN, false };
    const tag ContactDisplayName = { "ContactDisplayName", 0x0074100C, {1, 1}, VRType::LO, false };
    const tag ContactURI = { "ContactURI", 0x0074100A, {1, 1}, VRType::UR, false };
    const tag ContainerComponentDescription = { "ContainerComponentDescription", 0x0050001E, {1, 1}, VRType::LO, false };
    const tag ContainerComponentDiameter = { "ContainerComponentDiameter", 0x0050001D, {1, 1}, VRType::FD, false };
    const tag ContainerComponentID = { "ContainerComponentID", 0x0050001B, {1, 1}, VRType::LO, false };
    const tag ContainerComponentLength = { "ContainerComponentLength", 0x0050001C, {1, 1}, VRType::FD, false };
    const tag ContainerComponentMaterial = { "ContainerComponentMaterial", 0x0050001A, {1, 1}, VRType::CS, false };
    const tag ContainerComponentSequence = { "ContainerComponentSequence", 0x00400520, {1, 1}, VRType::SQ, false };
    const tag ContainerComponentThickness = { "ContainerComponentThickness", 0x00500013, {1, 1}, VRType::FD, false };
    const tag ContainerComponentTypeCodeSequence = { "ContainerComponentTypeCodeSequence", 0x00500012, {1, 1}, VRType::SQ, false };
    const tag ContainerComponentWidth = { "ContainerComponentWidth", 0x00500015, {1, 1}, VRType::FD, false };
    const tag ContainerDescription = { "ContainerDescription", 0x0040051A, {1, 1}, VRType::LO, false };
    const tag ContainerIdentifier = { "ContainerIdentifier", 0x00400512, {1, 1}, VRType::LO, false };
    const tag ContainerTypeCodeSequence = { "ContainerTypeCodeSequence", 0x00400518, {1, 1}, VRType::SQ, false };
    const tag ContentCreatorIdentificationCodeSequence = { "ContentCreatorIdentificationCodeSequence", 0x00700086, {1, 1}, VRType::SQ, false };
    const tag ContentCreatorName = { "ContentCreatorName", 0x00700084, {1, 1}, VRType::PN, false };
    const tag ContentDate = { "ContentDate", 0x00080023, {1, 1}, VRType::DA, false };
    const tag ContentDescription = { "ContentDescription", 0x00700081, {1, 1}, VRType::LO, false };
    const tag ContentItemModifierSequence = { "ContentItemModifierSequence", 0x00400441, {1, 1}, VRType::SQ, false };
    const tag ContentLabel = { "ContentLabel", 0x00700080, {1, 1}, VRType::CS, false };
    const tag ContentQualification = { "ContentQualification", 0x00189004, {1, 1}, VRType::CS, false };
    const tag ContentSequence = { "ContentSequence", 0x0040A730, {1, 1}, VRType::SQ, false };
    const tag ContentTemplateSequence = { "ContentTemplateSequence", 0x0040A504, {1, 1}, VRType::SQ, false };
    const tag ContentTime = { "ContentTime", 0x00080033, {1, 1}, VRType::TM, false };
    const tag ContextGroupExtensionCreatorUID = { "ContextGroupExtensionCreatorUID", 0x0008010D, {1, 1}, VRType::UI, false };
    const tag ContextGroupExtensionFlag = { "ContextGroupExtensionFlag", 0x0008010B, {1, 1}, VRType::CS, false };
    const tag ContextGroupIdentificationSequence = { "ContextGroupIdentificationSequence", 0x00080123, {1, 1}, VRType::SQ, false };
    const tag ContextGroupLocalVersion = { "ContextGroupLocalVersion", 0x00080107, {1, 1}, VRType::DT, false };
    const tag ContextGroupVersion = { "ContextGroupVersion", 0x00080106, {1, 1}, VRType::DT, false };
    const tag ContextIdentifier = { "ContextIdentifier", 0x0008010F, {1, 1}, VRType::CS, false };
    const tag ContextUID = { "ContextUID", 0x00080117, {1, 1}, VRType::UI, false };
    const tag ContinuationEndMeterset = { "ContinuationEndMeterset", 0x00740121, {1, 1}, VRType::FD, false };
    const tag ContinuationEndTotalReferenceAirKerma = { "ContinuationEndTotalReferenceAirKerma", 0x00741403, {1, 1}, VRType::DS, false };
    const tag ContinuationPulseNumber = { "ContinuationPulseNumber", 0x00741404, {1, 1}, VRType::IS, false };
    const tag ContinuationStartMeterset = { "ContinuationStartMeterset", 0x00740120, {1, 1}, VRType::FD, false };
    const tag ContinuationStartTotalReferenceAirKerma = { "ContinuationStartTotalReferenceAirKerma", 0x00741402, {1, 1}, VRType::DS, false };
    const tag ContinuityOfContent = { "ContinuityOfContent", 0x0040A050, {1, 1}, VRType::CS, false };
    const tag ContourData = { "ContourData", 0x30060050, {3, 3}, VRType::DS, false };
    const tag ContourGeometricType = { "ContourGeometricType", 0x30060042, {1, 1}, VRType::CS, false };
    const tag ContourImageSequence = { "ContourImageSequence", 0x30060016, {1, 1}, VRType::SQ, false };
    const tag ContourNumber = { "ContourNumber", 0x30060048, {1, 1}, VRType::IS, false };
    const tag ContourOffsetVector = { "ContourOffsetVector", 0x30060045, {3, 3}, VRType::DS, false };
    const tag ContourSequence = { "ContourSequence", 0x30060040, {1, 1}, VRType::SQ, false };
    const tag ContourSlabThickness = { "ContourSlabThickness", 0x30060044, {1, 1}, VRType::DS, false };
    const tag ContourUncertaintyRadius = { "ContourUncertaintyRadius", 0x00700312, {1, 1}, VRType::FD, false };
    const tag ContraindicationsCodeSequence = { "ContraindicationsCodeSequence", 0x0018990B, {1, 1}, VRType::SQ, false };
    const tag ContrastAdministrationProfileSequence = { "ContrastAdministrationProfileSequence", 0x00189340, {1, 1}, VRType::SQ, false };
    const tag ContrastBolusAdministrationRouteSequence = { "ContrastBolusAdministrationRouteSequence", 0x00180014, {1, 1}, VRType::SQ, false };
    const tag ContrastBolusAgent = { "ContrastBolusAgent", 0x00180010, {1, 1}, VRType::LO, false };
    const tag ContrastBolusAgentAdministered = { "ContrastBolusAgentAdministered", 0x00189342, {1, 1}, VRType::CS, false };
    const tag ContrastBolusAgentDetected = { "ContrastBolusAgentDetected", 0x00189343, {1, 1}, VRType::CS, false };
    const tag ContrastBolusAgentNumber = { "ContrastBolusAgentNumber", 0x00189337, {1, 1}, VRType::US, false };
    const tag ContrastBolusAgentPhase = { "ContrastBolusAgentPhase", 0x00189344, {1, 1}, VRType::CS, false };
    const tag ContrastBolusAgentSequence = { "ContrastBolusAgentSequence", 0x00180012, {1, 1}, VRType::SQ, false };
    const tag ContrastBolusIngredient = { "ContrastBolusIngredient", 0x00181048, {1, 1}, VRType::CS, false };
    const tag ContrastBolusIngredientCodeSequence = { "ContrastBolusIngredientCodeSequence", 0x00189338, {1, 1}, VRType::SQ, false };
    const tag ContrastBolusIngredientConcentration = { "ContrastBolusIngredientConcentration", 0x00181049, {1, 1}, VRType::DS, false };
    const tag ContrastBolusIngredientOpaque = { "ContrastBolusIngredientOpaque", 0x00189425, {1, 1}, VRType::CS, false };
    const tag ContrastBolusIngredientPercentByVolume = { "ContrastBolusIngredientPercentByVolume", 0x00520001, {1, 1}, VRType::FL, false };
    const tag ContrastBolusRoute = { "ContrastBolusRoute", 0x00181040, {1, 1}, VRType::LO, false };
    const tag ContrastBolusStartTime = { "ContrastBolusStartTime", 0x00181042, {1, 1}, VRType::TM, false };
    const tag ContrastBolusStopTime = { "ContrastBolusStopTime", 0x00181043, {1, 1}, VRType::TM, false };
    const tag ContrastBolusT1Relaxivity = { "ContrastBolusT1Relaxivity", 0x00180013, {1, 1}, VRType::FL, false };
    const tag ContrastBolusTotalDose = { "ContrastBolusTotalDose", 0x00181044, {1, 1}, VRType::DS, false };
    const tag ContrastBolusUsageSequence = { "ContrastBolusUsageSequence", 0x00189341, {1, 1}, VRType::SQ, false };
    const tag ContrastBolusVolume = { "ContrastBolusVolume", 0x00181041, {1, 1}, VRType::DS, false };
    const tag ContrastFlowDuration = { "ContrastFlowDuration", 0x00181047, {1, 1}, VRType::DS, false };
    const tag ContrastFlowRate = { "ContrastFlowRate", 0x00181046, {1, 1}, VRType::DS, false };
    const tag ContrastFrameAveraging = { "ContrastFrameAveraging", 0x00286112, {1, 1}, VRType::US, false };
    const tag ContributingEquipmentSequence = { "ContributingEquipmentSequence", 0x0018A001, {1, 1}, VRType::SQ, false };
    const tag ContributingSOPInstancesReferenceSequence = { "ContributingSOPInstancesReferenceSequence", 0x00209529, {1, 1}, VRType::SQ, false };
    const tag ContributingSourcesSequence = { "ContributingSourcesSequence", 0x00189506, {1, 1}, VRType::SQ, false };
    const tag ContributionDateTime = { "ContributionDateTime", 0x0018A002, {1, 1}, VRType::DT, false };
    const tag ContributionDescription = { "ContributionDescription", 0x0018A003, {1, 1}, VRType::ST, false };
    const tag ControlPoint3DPosition = { "ControlPoint3DPosition", 0x300A02D4, {3, 3}, VRType::DS, false };
    const tag ControlPointDeliverySequence = { "ControlPointDeliverySequence", 0x30080040, {1, 1}, VRType::SQ, false };
    const tag ControlPointIndex = { "ControlPointIndex", 0x300A0112, {1, 1}, VRType::IS, false };
    const tag ControlPointOrientation = { "ControlPointOrientation", 0x300A0412, {3, 3}, VRType::FL, false };
    const tag ControlPointRelativePosition = { "ControlPointRelativePosition", 0x300A02D2, {1, 1}, VRType::DS, false };
    const tag ControlPointSequence = { "ControlPointSequence", 0x300A0111, {1, 1}, VRType::SQ, false };
    const tag ConventionalControlPointVerificationSequence = { "ConventionalControlPointVerificationSequence", 0x0074104C, {1, 1}, VRType::SQ, false };
    const tag ConventionalMachineVerificationSequence = { "ConventionalMachineVerificationSequence", 0x00741044, {1, 1}, VRType::SQ, false };
    const tag ConversionSourceAttributesSequence = { "ConversionSourceAttributesSequence", 0x00209172, {1, 1}, VRType::SQ, false };
    const tag ConversionType = { "ConversionType", 0x00080064, {1, 1}, VRType::CS, false };
    const tag ConvolutionKernel = { "ConvolutionKernel", 0x00181210, {1, 1}, VRType::SH, false };
    const tag ConvolutionKernelGroup = { "ConvolutionKernelGroup", 0x00189316, {1, 1}, VRType::CS, false };
    const tag CoordinatesSetGeometricTypeTrial = { "CoordinatesSetGeometricTypeTrial", 0x0040A290, {1, 1}, VRType::CS, false };
    const range_tag CoordinateStartValue = { "CoordinateStartValue", 0x50000112, 0x50FF0112, 0x00010000, {1, 1}, VRType::US, false };
    const range_tag CoordinateStepValue = { "CoordinateStepValue", 0x50000114, 0x50FF0114, 0x00010000, {1, 1}, VRType::US, false };
    const tag CoordinateSystemAxesSequence = { "CoordinateSystemAxesSequence", 0x00142204, {1, 1}, VRType::SQ, false };
    const tag CoordinateSystemAxisCodeSequence = { "CoordinateSystemAxisCodeSequence", 0x004008DA, {1, 1}, VRType::SQ, false };
    const tag CoordinateSystemAxisDescription = { "CoordinateSystemAxisDescription", 0x00142206, {1, 1}, VRType::ST, false };
    const tag CoordinateSystemAxisNumber = { "CoordinateSystemAxisNumber", 0x0014220A, {1, 1}, VRType::IS, false };
    const tag CoordinateSystemAxisType = { "CoordinateSystemAxisType", 0x0014220C, {1, 1}, VRType::CS, false };
    const tag CoordinateSystemAxisUnits = { "CoordinateSystemAxisUnits", 0x0014220E, {1, 1}, VRType::CS, false };
    const tag CoordinateSystemAxisValues = { "CoordinateSystemAxisValues", 0x00142210, {1, 1}, VRType::OB, false };
    const tag CoordinateSystemDataSetMapping = { "CoordinateSystemDataSetMapping", 0x00142208, {1, 1}, VRType::CS, false };
    const tag CoordinateSystemNumberOfAxes = { "CoordinateSystemNumberOfAxes", 0x00142202, {1, 1}, VRType::IS, false };
    const tag CoordinateSystemTransformRotationAndScaleMatrix = { "CoordinateSystemTransformRotationAndScaleMatrix", 0x0014222A, {1, 1}, VRType::DS, false };
    const tag CoordinateSystemTransformSequence = { "CoordinateSystemTransformSequence", 0x00142220, {1, 1}, VRType::SQ, false };
    const tag CoordinateSystemTransformTranslationMatrix = { "CoordinateSystemTransformTranslationMatrix", 0x0014222C, {1, 1}, VRType::DS, false };
    const tag CornealEccentricityIndex = { "CornealEccentricityIndex", 0x00460234, {1, 1}, VRType::FL, false };
    const tag CornealISValue = { "CornealISValue", 0x00460224, {1, 1}, VRType::FL, false };
    const tag CornealPointEstimated = { "CornealPointEstimated", 0x00460248, {1, 1}, VRType::CS, false };
    const tag CornealPointLocation = { "CornealPointLocation", 0x00460247, {3, 3}, VRType::FL, false };
    const tag CornealSize = { "CornealSize", 0x00460046, {1, 1}, VRType::FD, false };
    const tag CornealTopographyMappingNormalsSequence = { "CornealTopographyMappingNormalsSequence", 0x00460210, {1, 1}, VRType::SQ, false };
    const tag CornealTopographyMapQualityEvaluation = { "CornealTopographyMapQualityEvaluation", 0x00460242, {1, 1}, VRType::CS, false };
    const tag CornealTopographyMapTypeCodeSequence = { "CornealTopographyMapTypeCodeSequence", 0x00460207, {1, 1}, VRType::SQ, false };
    const tag CornealTopographySurface = { "CornealTopographySurface", 0x00460201, {1, 1}, VRType::CS, false };
    const tag CornealVertexLocation = { "CornealVertexLocation", 0x00460202, {2, 2}, VRType::FL, false };
    const tag CornealWavefront = { "CornealWavefront", 0x00460253, {1, 1}, VRType::FL, false };
    const tag CorrectedImage = { "CorrectedImage", 0x00280051, {1, 1}, VRType::CS, false };
    const tag CorrectedLocalizedDeviationFromNormal = { "CorrectedLocalizedDeviationFromNormal", 0x00240079, {1, 1}, VRType::FL, false };
    const tag CorrectedLocalizedDeviationFromNormalCalculated = { "CorrectedLocalizedDeviationFromNormalCalculated", 0x00240078, {1, 1}, VRType::CS, false };
    const tag CorrectedLocalizedDeviationFromNormalProbability = { "CorrectedLocalizedDeviationFromNormalProbability", 0x00240081, {1, 1}, VRType::FL, false };
    const tag CorrectedLocalizedDeviationFromNormalProbabilityCalculated = { "CorrectedLocalizedDeviationFromNormalProbabilityCalculated", 0x00240080, {1, 1}, VRType::CS, false };
    const tag CorrectedParameterSequence = { "CorrectedParameterSequence", 0x30080068, {1, 1}, VRType::SQ, false };
    const tag CorrectionValue = { "CorrectionValue", 0x3008006A, {1, 1}, VRType::FL, false };
    const tag CountLossNormalizationCorrected = { "CountLossNormalizationCorrected", 0x00189764, {1, 1}, VRType::CS, false };
    const tag CountRate = { "CountRate", 0x00181243, {1, 1}, VRType::IS, false };
    const tag CountryOfResidence = { "CountryOfResidence", 0x00102150, {1, 1}, VRType::LO, false };
    const tag CountsAccumulated = { "CountsAccumulated", 0x00180070, {1, 1}, VRType::IS, false };
    const tag CountsIncluded = { "CountsIncluded", 0x00541400, {1, 1}, VRType::CS, false };
    const tag CountsSource = { "CountsSource", 0x00541002, {1, 1}, VRType::CS, false };
    const tag CouplingMedium = { "CouplingMedium", 0x00144056, {1, 1}, VRType::ST, false };
    const tag CouplingTechnique = { "CouplingTechnique", 0x00144054, {1, 1}, VRType::ST, false };
    const tag CouplingVelocity = { "CouplingVelocity", 0x00144057, {1, 1}, VRType::DS, false };
    const tag CoverageOfKSpace = { "CoverageOfKSpace", 0x00189094, {1, 1}, VRType::CS, false };
    const tag CranialThermalIndex = { "CranialThermalIndex", 0x00185026, {1, 1}, VRType::DS, false };
    const tag CreationDate = { "CreationDate", 0x21000040, {1, 1}, VRType::DA, false };
    const tag CreationTime = { "CreationTime", 0x21000050, {1, 1}, VRType::TM, false };
    const tag CreatorVersionUID = { "CreatorVersionUID", 0x00089123, {1, 1}, VRType::UI, false };
    const tag Crop = { "Crop", 0x00701204, {1, 1}, VRType::CS, false };
    const tag CroppingSpecificationIndex = { "CroppingSpecificationIndex", 0x00701205, {1, 1}, VRType::US, false };
    const tag CroppingSpecificationNumber = { "CroppingSpecificationNumber", 0x00701309, {1, 1}, VRType::US, false };
    const tag CSSFontName = { "CSSFontName", 0x00700229, {1, 1}, VRType::LO, false };
    const tag CTAcquisitionDetailsSequence = { "CTAcquisitionDetailsSequence", 0x00189304, {1, 1}, VRType::SQ, false };
    const tag CTAcquisitionTypeSequence = { "CTAcquisitionTypeSequence", 0x00189301, {1, 1}, VRType::SQ, false };
    const tag CTAdditionalXRaySourceSequence = { "CTAdditionalXRaySourceSequence", 0x00189360, {1, 1}, VRType::SQ, false };
    const tag CTDIPhantomTypeCodeSequence = { "CTDIPhantomTypeCodeSequence", 0x00189346, {1, 1}, VRType::SQ, false };
    const tag CTDIvol = { "CTDIvol", 0x00189345, {1, 1}, VRType::FD, false };
    const tag CTDIvolNotificationTrigger = { "CTDIvolNotificationTrigger", 0x00189942, {1, 1}, VRType::FD, false };
    const tag CTExposureSequence = { "CTExposureSequence", 0x00189321, {1, 1}, VRType::SQ, false };
    const tag CTGeometrySequence = { "CTGeometrySequence", 0x00189312, {1, 1}, VRType::SQ, false };
    const tag CTImageFrameTypeSequence = { "CTImageFrameTypeSequence", 0x00189329, {1, 1}, VRType::SQ, false };
    const tag CTPositionSequence = { "CTPositionSequence", 0x00189326, {1, 1}, VRType::SQ, false };
    const tag CTReconstructionSequence = { "CTReconstructionSequence", 0x00189314, {1, 1}, VRType::SQ, false };
    const tag CTTableDynamicsSequence = { "CTTableDynamicsSequence", 0x00189308, {1, 1}, VRType::SQ, false };
    const tag CTXRayDetailsSequence = { "CTXRayDetailsSequence", 0x00189325, {1, 1}, VRType::SQ, false };
    const tag CumulativeDoseReferenceCoefficient = { "CumulativeDoseReferenceCoefficient", 0x300A010C, {1, 1}, VRType::DS, false };
    const tag CumulativeDoseToDoseReference = { "CumulativeDoseToDoseReference", 0x30080052, {1, 1}, VRType::DS, false };
    const tag CumulativeMetersetWeight = { "CumulativeMetersetWeight", 0x300A0134, {1, 1}, VRType::DS, false };
    const tag CumulativeTimeWeight = { "CumulativeTimeWeight", 0x300A02D6, {1, 1}, VRType::DS, false };
    const tag CurrentConfigurationID = { "CurrentConfigurationID", 0x00287002, {1, 1}, VRType::US, false };
    const tag CurrentFractionNumber = { "CurrentFractionNumber", 0x30080022, {1, 1}, VRType::IS, false };
    const tag CurrentObserverTrial = { "CurrentObserverTrial", 0x0040A307, {1, 1}, VRType::PN, false };
    const tag CurrentPatientLocation = { "CurrentPatientLocation", 0x00380300, {1, 1}, VRType::LO, false };
    const tag CurrentRequestedProcedureEvidenceSequence = { "CurrentRequestedProcedureEvidenceSequence", 0x0040A375, {1, 1}, VRType::SQ, false };
    const tag CurrentTreatmentStatus = { "CurrentTreatmentStatus", 0x30080200, {1, 1}, VRType::CS, false };
    const tag CurvatureType = { "CurvatureType", 0x00140052, {1, 1}, VRType::CS, false };
    const range_tag CurveActivationLayer = { "CurveActivationLayer", 0x50001001, 0x50FF1001, 0x00010000, {1, 1}, VRType::CS, false };
    const range_tag CurveData = { "CurveData", 0x50003000, 0x50FF3000, 0x00010000, {1, 1}, VRType::OB, true };
    const range_tag CurveDataDescriptor = { "CurveDataDescriptor", 0x50000110, 0x50FF0110, 0x00010000, {1, 1}, VRType::US, false };
    const tag CurveDate = { "CurveDate", 0x00080025, {1, 1}, VRType::DA, false };
    const range_tag CurveDescription = { "CurveDescription", 0x50000022, 0x50FF0022, 0x00010000, {1, 1}, VRType::LO, false };
    const range_tag CurveDimensions = { "CurveDimensions", 0x50000005, 0x50FF0005, 0x00010000, {1, 1}, VRType::US, false };
    const range_tag CurveLabel = { "CurveLabel", 0x50002500, 0x50FF2500, 0x00010000, {1, 1}, VRType::LO, false };
    const tag CurveNumber = { "CurveNumber", 0x00200024, {1, 1}, VRType::IS, false };
    const range_tag CurveRange = { "CurveRange", 0x50000106, 0x50FF0106, 0x00010000, {1, 1}, VRType::SH, false };
    const range_tag CurveReferencedOverlayGroup = { "CurveReferencedOverlayGroup", 0x50002610, 0x50FF2610, 0x00010000, {1, 1}, VRType::US, false };
    const range_tag CurveReferencedOverlaySequence = { "CurveReferencedOverlaySequence", 0x50002600, 0x50FF2600, 0x00010000, {1, 1}, VRType::SQ, false };
    const tag CurveTime = { "CurveTime", 0x00080035, {1, 1}, VRType::TM, false };
    const tag CustodialOrganizationSequence = { "CustodialOrganizationSequence", 0x0040A07C, {1, 1}, VRType::SQ, false };
    const tag CylinderAxis = { "CylinderAxis", 0x00220009, {1, 1}, VRType::FL, false };
    const tag CylinderLensPower = { "CylinderLensPower", 0x00220008, {1, 1}, VRType::FL, false };
    const tag CylinderPower = { "CylinderPower", 0x00460147, {1, 1}, VRType::FD, false };
    const tag CylinderSequence = { "CylinderSequence", 0x00460018, {1, 1}, VRType::SQ, false };
    const tag DACAmplitude = { "DACAmplitude", 0x0014403C, {1, 1}, VRType::DS, false };
    const tag DACGainPoints = { "DACGainPoints", 0x00144038, {1, 1}, VRType::DS, false };
    const tag DACSequence = { "DACSequence", 0x00144035, {1, 1}, VRType::SQ, false };
    const tag DACTimePoints = { "DACTimePoints", 0x0014403A, {1, 1}, VRType::DS, false };
    const tag DACType = { "DACType", 0x00144036, {1, 1}, VRType::CS, false };
    const tag Damping = { "Damping", 0x00144028, {1, 1}, VRType::DS, false };
    const tag DarkCurrentCounts = { "DarkCurrentCounts", 0x00143050, {1, 1}, VRType::OB, true };
    const tag DarkCurrentSequence = { "DarkCurrentSequence", 0x00143040, {1, 1}, VRType::SQ, false };
    const tag DataBlock = { "DataBlock", 0x00280702, {1, 1}, VRType::AT, false };
    const tag DataBlockDescription = { "DataBlockDescription", 0x00280701, {1, 1}, VRType::CS, false };
    const tag DataCollectionCenterPatient = { "DataCollectionCenterPatient", 0x00189313, {3, 3}, VRType::FD, false };
    const tag DataCollectionDiameter = { "DataCollectionDiameter", 0x00180090, {1, 1}, VRType::DS, false };
    const tag DataElementsSigned = { "DataElementsSigned", 0x04000020, {1, 1}, VRType::AT, false };
    const tag DataFrameAssignmentSequence = { "DataFrameAssignmentSequence", 0x00281401, {1, 1}, VRType::SQ, false };
    const tag DataInformationSequence = { "DataInformationSequence", 0x00540063, {1, 1}, VRType::SQ, false };
    const tag DataObservationSequence = { "DataObservationSequence", 0x00240325, {1, 1}, VRType::SQ, false };
    const tag DataPathAssignment = { "DataPathAssignment", 0x00281402, {1, 1}, VRType::CS, false };
    const tag DataPathID = { "DataPathID", 0x0028140E, {1, 1}, VRType::CS, false };
    const tag DataPointColumns = { "DataPointColumns", 0x00289002, {1, 1}, VRType::UL, false };
    const tag DataPointRows = { "DataPointRows", 0x00289001, {1, 1}, VRType::UL, false };
    const tag DataRepresentation = { "DataRepresentation", 0x00289108, {1, 1}, VRType::CS, false };
    const tag DataSetDescription = { "DataSetDescription", 0x00240309, {1, 1}, VRType::LO, false };
    const tag DataSetName = { "DataSetName", 0x00240306, {1, 1}, VRType::LO, false };
    const tag DataSetSource = { "DataSetSource", 0x00240308, {1, 1}, VRType::LO, false };
    const tag DataSetSubtype = { "DataSetSubtype", 0x00080041, {1, 1}, VRType::LO, false };
    const tag DataSetTrailingPadding = { "DataSetTrailingPadding", 0xFFFCFFFC, {1, 1}, VRType::OB, false };
    const tag DataSetType = { "DataSetType", 0x00080040, {1, 1}, VRType::US, false };
    const tag DataSetVersion = { "DataSetVersion", 0x00240307, {1, 1}, VRType::LO, false };
    const tag DataType = { "DataType", 0x00189808, {1, 1}, VRType::CS, false };
    const range_tag DataValueRepresentation = { "DataValueRepresentation", 0x50000103, 0x50FF0103, 0x00010000, {1, 1}, VRType::US, false };
    const tag Date = { "Date", 0x0040A121, {1, 1}, VRType::DA, false };
    const tag DateOfDocumentOrVerbalTransactionTrial = { "DateOfDocumentOrVerbalTransactionTrial", 0x0040A110, {1, 1}, VRType::DA, false };
    const tag DateOfGainCalibration = { "DateOfGainCalibration", 0x00143076, {1, 1}, VRType::DA, false };
    const tag DateOfLastCalibration = { "DateOfLastCalibration", 0x00181200, {1, 1}, VRType::DA, false };
    const tag DateOfLastDetectorCalibration = { "DateOfLastDetectorCalibration", 0x0018700C, {1, 1}, VRType::DA, false };
    const tag DateOfSecondaryCapture = { "DateOfSecondaryCapture", 0x00181012, {1, 1}, VRType::DA, false };
    const tag DateTime = { "DateTime", 0x0040A120, {1, 1}, VRType::DT, false };
    const tag DateTimeOfLastCalibration = { "DateTimeOfLastCalibration", 0x00181202, {1, 1}, VRType::DT, false };
    const tag dBdt = { "dBdt", 0x00181318, {1, 1}, VRType::DS, false };
    const tag DCTLabel = { "DCTLabel", 0x00280700, {1, 1}, VRType::LO, false };
    const tag DDLValue = { "DDLValue", 0x00287017, {1, 1}, VRType::US, false };
    const tag DeadTimeCorrected = { "DeadTimeCorrected", 0x00189761, {1, 1}, VRType::CS, false };
    const tag DeadTimeCorrectionFlag = { "DeadTimeCorrectionFlag", 0x00541401, {1, 1}, VRType::CS, false };
    const tag DeadTimeFactor = { "DeadTimeFactor", 0x00541324, {1, 1}, VRType::DS, false };
    const tag DecayCorrected = { "DecayCorrected", 0x00189758, {1, 1}, VRType::CS, false };
    const tag DecayCorrection = { "DecayCorrection", 0x00541102, {1, 1}, VRType::CS, false };
    const tag DecayCorrectionDateTime = { "DecayCorrectionDateTime", 0x00189701, {1, 1}, VRType::DT, false };
    const tag DecayFactor = { "DecayFactor", 0x00541321, {1, 1}, VRType::DS, false };
    const tag DecimalPotentialVisualAcuity = { "DecimalPotentialVisualAcuity", 0x00460238, {1, 1}, VRType::FL, false };
    const tag DecimalVisualAcuity = { "DecimalVisualAcuity", 0x00460137, {1, 1}, VRType::FD, false };
    const tag DecimateCropResult = { "DecimateCropResult", 0x202000A2, {1, 1}, VRType::CS, false };
    const tag DecoupledNucleus = { "DecoupledNucleus", 0x00189060, {1, 2}, VRType::CS, false };
    const tag Decoupling = { "Decoupling", 0x00189059, {1, 1}, VRType::CS, false };
    const tag DecouplingChemicalShiftReference = { "DecouplingChemicalShiftReference", 0x00189063, {1, 2}, VRType::FD, false };
    const tag DecouplingFrequency = { "DecouplingFrequency", 0x00189061, {1, 2}, VRType::FD, false };
    const tag DecouplingMethod = { "DecouplingMethod", 0x00189062, {1, 1}, VRType::CS, false };
    const tag DefaultMagnificationType = { "DefaultMagnificationType", 0x201000A6, {1, 1}, VRType::CS, false };
    const tag DefaultPrinterResolutionID = { "DefaultPrinterResolutionID", 0x20100054, {1, 1}, VRType::CS, false };
    const tag DefaultSmoothingType = { "DefaultSmoothingType", 0x201000A8, {1, 1}, VRType::CS, false };
    const tag DefinitionSourceSequence = { "DefinitionSourceSequence", 0x00081156, {1, 1}, VRType::SQ, false };
    const tag DeformableRegistrationGridSequence = { "DeformableRegistrationGridSequence", 0x00640005, {1, 1}, VRType::SQ, false };
    const tag DeformableRegistrationSequence = { "DeformableRegistrationSequence", 0x00640002, {1, 1}, VRType::SQ, false };
    const tag DegreeOfDilation = { "DegreeOfDilation", 0x0022000E, {1, 1}, VRType::FL, false };
    const tag DegreeOfFreedomID = { "DegreeOfFreedomID", 0x00686410, {1, 1}, VRType::US, false };
    const tag DegreeOfFreedomType = { "DegreeOfFreedomType", 0x00686420, {1, 1}, VRType::CS, false };
    const tag DeidentificationAction = { "DeidentificationAction", 0x00080307, {1, 1}, VRType::CS, false };
    const tag DeidentificationActionSequence = { "DeidentificationActionSequence", 0x00080305, {1, 1}, VRType::SQ, false };
    const tag DeidentificationMethod = { "DeidentificationMethod", 0x00120063, {1, 1}, VRType::LO, false };
    const tag DeidentificationMethodCodeSequence = { "DeidentificationMethodCodeSequence", 0x00120064, {1, 1}, VRType::SQ, false };
    const tag DelayLawIdentifier = { "DelayLawIdentifier", 0x0014405C, {1, 1}, VRType::ST, false };
    const tag DeletionLock = { "DeletionLock", 0x00741230, {1, 1}, VRType::LO, false };
    const tag DeliveredChannelTotalTime = { "DeliveredChannelTotalTime", 0x30080134, {1, 1}, VRType::DS, false };
    const tag DeliveredDepthDoseParametersSequence = { "DeliveredDepthDoseParametersSequence", 0x300A0506, {1, 1}, VRType::SQ, false };
    const tag DeliveredDistalDepth = { "DeliveredDistalDepth", 0x300A0508, {1, 1}, VRType::FL, false };
    const tag DeliveredDistalDepthFraction = { "DeliveredDistalDepthFraction", 0x300A0507, {1, 1}, VRType::FL, false };
    const tag DeliveredMeterset = { "DeliveredMeterset", 0x30080044, {1, 1}, VRType::DS, false };
    const tag DeliveredNominalRangeModulatedRegionDepths = { "DeliveredNominalRangeModulatedRegionDepths", 0x300A0510, {2, 2}, VRType::FL, false };
    const tag DeliveredNominalRangeModulationFractions = { "DeliveredNominalRangeModulationFractions", 0x300A0509, {2, 2}, VRType::FL, false };
    const tag DeliveredNumberOfPulses = { "DeliveredNumberOfPulses", 0x30080138, {1, 1}, VRType::IS, false };
    const tag DeliveredPrimaryMeterset = { "DeliveredPrimaryMeterset", 0x30080036, {1, 1}, VRType::DS, false };
    const tag DeliveredPulseRepetitionInterval = { "DeliveredPulseRepetitionInterval", 0x3008013C, {1, 1}, VRType::DS, false };
    const tag DeliveredReferenceDoseDefinition = { "DeliveredReferenceDoseDefinition", 0x300A0511, {1, 1}, VRType::CS, false };
    const tag DeliveredSecondaryMeterset = { "DeliveredSecondaryMeterset", 0x30080037, {1, 1}, VRType::DS, false };
    const tag DeliveredTreatmentTime = { "DeliveredTreatmentTime", 0x3008003B, {1, 1}, VRType::DS, false };
    const tag DeliveryMaximumDose = { "DeliveryMaximumDose", 0x300A0023, {1, 1}, VRType::DS, false };
    const tag DeliveryVerificationImageSequence = { "DeliveryVerificationImageSequence", 0x00741030, {1, 1}, VRType::SQ, false };
    const tag DeliveryWarningDose = { "DeliveryWarningDose", 0x300A0022, {1, 1}, VRType::DS, false };
    const tag Density = { "Density", 0x40101018, {1, 1}, VRType::FL, false };
    const tag DepthDoseParametersSequence = { "DepthDoseParametersSequence", 0x300A0505, {1, 1}, VRType::SQ, false };
    const tag DepthOfScanField = { "DepthOfScanField", 0x00185050, {1, 1}, VRType::IS, false };
    const tag DepthOfTransverseImage = { "DepthOfTransverseImage", 0x00220041, {1, 1}, VRType::FL, false };
    const tag DepthsOfFocus = { "DepthsOfFocus", 0x00189801, {1, 1}, VRType::FD, false };
    const tag DepthSpatialResolution = { "DepthSpatialResolution", 0x00220035, {1, 1}, VRType::FL, false };
    const tag DepthValueAveragingFlag = { "DepthValueAveragingFlag", 0x300A0093, {1, 1}, VRType::CS, false };
    const tag DerivationAlgorithmSequence = { "DerivationAlgorithmSequence", 0x00221612, {1, 1}, VRType::SQ, false };
    const tag DerivationCodeSequence = { "DerivationCodeSequence", 0x00089215, {1, 1}, VRType::SQ, false };
    const tag DerivationDescription = { "DerivationDescription", 0x00082111, {1, 1}, VRType::ST, false };
    const tag DerivationImageSequence = { "DerivationImageSequence", 0x00089124, {1, 1}, VRType::SQ, false };
    const tag DerivationImplantAssemblyTemplateSequence = { "DerivationImplantAssemblyTemplateSequence", 0x0076000E, {1, 1}, VRType::SQ, false };
    const tag DerivationImplantTemplateSequence = { "DerivationImplantTemplateSequence", 0x00686224, {1, 1}, VRType::SQ, false };
    const tag DestinationAE = { "DestinationAE", 0x21000140, {1, 1}, VRType::AE, false };
    const tag DetailsOfCoefficients = { "DetailsOfCoefficients", 0x00280404, {1, 1}, VRType::AT, false };
    const tag DetectorActivationOffsetFromExposure = { "DetectorActivationOffsetFromExposure", 0x00187016, {1, 1}, VRType::DS, false };
    const tag DetectorActiveAreaOrientation = { "DetectorActiveAreaOrientation", 0x00189558, {6, 6}, VRType::FD, false };
    const tag DetectorActiveAreaTLHCPosition = { "DetectorActiveAreaTLHCPosition", 0x00189557, {3, 3}, VRType::FD, false };
    const tag DetectorActiveDimensions = { "DetectorActiveDimensions", 0x00187026, {1, 2}, VRType::DS, false };
    const tag DetectorActiveOrigin = { "DetectorActiveOrigin", 0x00187028, {2, 2}, VRType::DS, false };
    const tag DetectorActiveShape = { "DetectorActiveShape", 0x00187024, {1, 1}, VRType::CS, false };
    const tag DetectorActiveTime = { "DetectorActiveTime", 0x00187014, {1, 1}, VRType::DS, false };
    const tag DetectorBinning = { "DetectorBinning", 0x0018701A, {2, 2}, VRType::DS, false };
    const tag DetectorCalibrationData = { "DetectorCalibrationData", 0x4010106C, {1, 1}, VRType::OB, false };
    const tag DetectorConditionsNominalFlag = { "DetectorConditionsNominalFlag", 0x00187000, {1, 1}, VRType::CS, false };
    const tag DetectorConfiguration = { "DetectorConfiguration", 0x00187005, {1, 1}, VRType::CS, false };
    const tag DetectorDescription = { "DetectorDescription", 0x00187006, {1, 1}, VRType::LT, false };
    const tag DetectorElementPhysicalSize = { "DetectorElementPhysicalSize", 0x00187020, {2, 2}, VRType::DS, false };
    const tag DetectorElementSize = { "DetectorElementSize", 0x00541203, {2, 2}, VRType::DS, false };
    const tag DetectorElementSpacing = { "DetectorElementSpacing", 0x00187022, {2, 2}, VRType::DS, false };
    const tag DetectorGeometry = { "DetectorGeometry", 0x00189725, {1, 1}, VRType::CS, false };
    const tag DetectorGeometrySequence = { "DetectorGeometrySequence", 0x40100004, {1, 1}, VRType::SQ, false };
    const tag DetectorID = { "DetectorID", 0x0018700A, {1, 1}, VRType::SH, false };
    const tag DetectorInformationSequence = { "DetectorInformationSequence", 0x00540022, {1, 1}, VRType::SQ, false };
    const tag DetectorIsocenterPrimaryAngle = { "DetectorIsocenterPrimaryAngle", 0x00189550, {1, 1}, VRType::FD, false };
    const tag DetectorIsocenterSecondaryAngle = { "DetectorIsocenterSecondaryAngle", 0x00189551, {1, 1}, VRType::FD, false };
    const tag DetectorLinesOfResponseUsed = { "DetectorLinesOfResponseUsed", 0x00541104, {1, 1}, VRType::LO, false };
    const tag DetectorManufacturerModelName = { "DetectorManufacturerModelName", 0x0018702B, {1, 1}, VRType::LO, false };
    const tag DetectorManufacturerName = { "DetectorManufacturerName", 0x0018702A, {1, 1}, VRType::LO, false };
    const tag DetectorMode = { "DetectorMode", 0x00187008, {1, 1}, VRType::LT, false };
    const tag DetectorNormalizationCorrection = { "DetectorNormalizationCorrection", 0x00189768, {1, 1}, VRType::CS, false };
    const tag DetectorPositionSequence = { "DetectorPositionSequence", 0x00189541, {1, 1}, VRType::SQ, false };
    const tag DetectorPrimaryAngle = { "DetectorPrimaryAngle", 0x00181530, {1, 1}, VRType::DS, false };
    const tag DetectorSecondaryAngle = { "DetectorSecondaryAngle", 0x00181531, {1, 1}, VRType::DS, false };
    const tag DetectorTemperature = { "DetectorTemperature", 0x00187001, {1, 1}, VRType::DS, false };
    const tag DetectorTemperatureSequence = { "DetectorTemperatureSequence", 0x00143020, {1, 1}, VRType::SQ, false };
    const tag DetectorTimeSinceLastExposure = { "DetectorTimeSinceLastExposure", 0x00187012, {1, 1}, VRType::DS, false };
    const tag DetectorType = { "DetectorType", 0x00187004, {1, 1}, VRType::CS, false };
    const tag DetectorVector = { "DetectorVector", 0x00540020, {1, 1}, VRType::US, false };
    const tag DetectorXPositionToIsocenter = { "DetectorXPositionToIsocenter", 0x00189552, {1, 1}, VRType::FD, false };
    const tag DetectorYPositionToIsocenter = { "DetectorYPositionToIsocenter", 0x00189553, {1, 1}, VRType::FD, false };
    const tag DetectorZPositionToIsocenter = { "DetectorZPositionToIsocenter", 0x00189554, {1, 1}, VRType::FD, false };
    const tag DeviationIndex = { "DeviationIndex", 0x00181413, {1, 1}, VRType::DS, false };
    const tag DeviceDescription = { "DeviceDescription", 0x00500020, {1, 1}, VRType::LO, false };
    const tag DeviceDiameter = { "DeviceDiameter", 0x00500016, {1, 1}, VRType::DS, false };
    const tag DeviceDiameterUnits = { "DeviceDiameterUnits", 0x00500017, {1, 1}, VRType::CS, false };
    const tag DeviceID = { "DeviceID", 0x00181003, {1, 1}, VRType::LO, false };
    const tag DeviceLength = { "DeviceLength", 0x00500014, {1, 1}, VRType::DS, false };
    const tag DeviceMotionControlSequence = { "DeviceMotionControlSequence", 0x300A0450, {1, 1}, VRType::SQ, false };
    const tag DeviceMotionExecutionMode = { "DeviceMotionExecutionMode", 0x300A0451, {1, 1}, VRType::CS, false };
    const tag DeviceMotionObservationMode = { "DeviceMotionObservationMode", 0x300A0452, {1, 1}, VRType::CS, false };
    const tag DeviceMotionParameterCodeSequence = { "DeviceMotionParameterCodeSequence", 0x300A0453, {1, 1}, VRType::SQ, false };
    const tag DeviceSequence = { "DeviceSequence", 0x00500010, {1, 1}, VRType::SQ, false };
    const tag DeviceSerialNumber = { "DeviceSerialNumber", 0x00181000, {1, 1}, VRType::LO, false };
    const tag DeviceUID = { "DeviceUID", 0x00181002, {1, 1}, VRType::UI, false };
    const tag DeviceVolume = { "DeviceVolume", 0x00500018, {1, 1}, VRType::DS, false };
    const tag DiameterOfVisibility = { "DiameterOfVisibility", 0x00700262, {1, 1}, VRType::FL, false };
    const tag DiaphragmPosition = { "DiaphragmPosition", 0x30020034, {4, 4}, VRType::DS, false };
    const tag DICOMMediaRetrievalSequence = { "DICOMMediaRetrievalSequence", 0x0040E022, {1, 1}, VRType::SQ, false };
    const tag DICOMRetrievalSequence = { "DICOMRetrievalSequence", 0x0040E021, {1, 1}, VRType::SQ, false };
    const tag DICOMStorageSequence = { "DICOMStorageSequence", 0x00404071, {1, 1}, VRType::SQ, false };
    const tag DICOSVersion = { "DICOSVersion", 0x4010103A, {1, 1}, VRType::CS, false };
    const tag DiffuseReflectionIntensity = { "DiffuseReflectionIntensity", 0x00701704, {1, 1}, VRType::FD, false };
    const tag DiffusionAcquisitionCodeSequence = { "DiffusionAcquisitionCodeSequence", 0x00660133, {1, 1}, VRType::SQ, false };
    const tag DiffusionAnisotropyType = { "DiffusionAnisotropyType", 0x00189147, {1, 1}, VRType::CS, false };
    const tag DiffusionBMatrixSequence = { "DiffusionBMatrixSequence", 0x00189601, {1, 1}, VRType::SQ, false };
    const tag DiffusionBValue = { "DiffusionBValue", 0x00189087, {1, 1}, VRType::FD, false };
    const tag DiffusionBValueXX = { "DiffusionBValueXX", 0x00189602, {1, 1}, VRType::FD, false };
    const tag DiffusionBValueXY = { "DiffusionBValueXY", 0x00189603, {1, 1}, VRType::FD, false };
    const tag DiffusionBValueXZ = { "DiffusionBValueXZ", 0x00189604, {1, 1}, VRType::FD, false };
    const tag DiffusionBValueYY = { "DiffusionBValueYY", 0x00189605, {1, 1}, VRType::FD, false };
    const tag DiffusionBValueYZ = { "DiffusionBValueYZ", 0x00189606, {1, 1}, VRType::FD, false };
    const tag DiffusionBValueZZ = { "DiffusionBValueZZ", 0x00189607, {1, 1}, VRType::FD, false };
    const tag DiffusionDirectionality = { "DiffusionDirectionality", 0x00189075, {1, 1}, VRType::CS, false };
    const tag DiffusionGradientDirectionSequence = { "DiffusionGradientDirectionSequence", 0x00189076, {1, 1}, VRType::SQ, false };
    const tag DiffusionGradientOrientation = { "DiffusionGradientOrientation", 0x00189089, {3, 3}, VRType::FD, false };
    const tag DiffusionModelCodeSequence = { "DiffusionModelCodeSequence", 0x00660134, {1, 1}, VRType::SQ, false };
    const tag DigitalImageFormatAcquired = { "DigitalImageFormatAcquired", 0x00181023, {1, 1}, VRType::LO, false };
    const tag DigitalSignatureDateTime = { "DigitalSignatureDateTime", 0x04000105, {1, 1}, VRType::DT, false };
    const tag DigitalSignaturePurposeCodeSequence = { "DigitalSignaturePurposeCodeSequence", 0x04000401, {1, 1}, VRType::SQ, false };
    const tag DigitalSignaturesSequence = { "DigitalSignaturesSequence", 0xFFFAFFFA, {1, 1}, VRType::SQ, false };
    const tag DigitalSignatureUID = { "DigitalSignatureUID", 0x04000100, {1, 1}, VRType::UI, false };
    const tag DigitizingDeviceTransportDirection = { "DigitizingDeviceTransportDirection", 0x00182020, {1, 1}, VRType::CS, false };
    const tag DimensionDescriptionLabel = { "DimensionDescriptionLabel", 0x00209421, {1, 1}, VRType::LO, false };
    const tag DimensionIndexPointer = { "DimensionIndexPointer", 0x00209165, {1, 1}, VRType::AT, false };
    const tag DimensionIndexPrivateCreator = { "DimensionIndexPrivateCreator", 0x00209213, {1, 1}, VRType::LO, false };
    const tag DimensionIndexSequence = { "DimensionIndexSequence", 0x00209222, {1, 1}, VRType::SQ, false };
    const tag DimensionIndexValues = { "DimensionIndexValues", 0x00209157, {1, 1}, VRType::UL, false };
    const tag DimensionOrganizationSequence = { "DimensionOrganizationSequence", 0x00209221, {1, 1}, VRType::SQ, false };
    const tag DimensionOrganizationType = { "DimensionOrganizationType", 0x00209311, {1, 1}, VRType::CS, false };
    const tag DimensionOrganizationUID = { "DimensionOrganizationUID", 0x00209164, {1, 1}, VRType::UI, false };
    const tag DirectoryRecordSequence = { "DirectoryRecordSequence", 0x00041220, {1, 1}, VRType::SQ, false };
    const tag DirectoryRecordType = { "DirectoryRecordType", 0x00041430, {1, 1}, VRType::CS, false };
    const tag DischargeDate = { "DischargeDate", 0x00380030, {1, 1}, VRType::DA, false };
    const tag DischargeDiagnosisCodeSequence = { "DischargeDiagnosisCodeSequence", 0x00380044, {1, 1}, VRType::SQ, false };
    const tag DischargeDiagnosisDescription = { "DischargeDiagnosisDescription", 0x00380040, {1, 1}, VRType::LO, false };
    const tag DischargeTime = { "DischargeTime", 0x00380032, {1, 1}, VRType::TM, false };
    const tag DisplayCalibrationResultSequence = { "DisplayCalibrationResultSequence", 0x00287016, {1, 1}, VRType::SQ, false };
    const tag DisplayDeviceTypeCodeSequence = { "DisplayDeviceTypeCodeSequence", 0x00287022, {1, 1}, VRType::SQ, false };
    const tag DisplayedAreaBottomRightHandCorner = { "DisplayedAreaBottomRightHandCorner", 0x00700053, {2, 2}, VRType::SL, false };
    const tag DisplayedAreaBottomRightHandCornerTrial = { "DisplayedAreaBottomRightHandCornerTrial", 0x00700051, {2, 2}, VRType::US, false };
    const tag DisplayedAreaSelectionSequence = { "DisplayedAreaSelectionSequence", 0x0070005A, {1, 1}, VRType::SQ, false };
    const tag DisplayedAreaTopLeftHandCorner = { "DisplayedAreaTopLeftHandCorner", 0x00700052, {2, 2}, VRType::SL, false };
    const tag DisplayedAreaTopLeftHandCornerTrial = { "DisplayedAreaTopLeftHandCornerTrial", 0x00700050, {2, 2}, VRType::US, false };
    const tag DisplayedZValue = { "DisplayedZValue", 0x00182046, {1, 1}, VRType::FL, false };
    const tag DisplayEnvironmentSpatialPosition = { "DisplayEnvironmentSpatialPosition", 0x00720108, {4, 4}, VRType::FD, false };
    const tag DisplayFilterPercentage = { "DisplayFilterPercentage", 0x00289411, {1, 1}, VRType::FL, false };
    const tag DisplayFunctionType = { "DisplayFunctionType", 0x00287019, {1, 1}, VRType::CS, false };
    const tag DisplaySetHorizontalJustification = { "DisplaySetHorizontalJustification", 0x00720717, {1, 1}, VRType::CS, false };
    const tag DisplaySetLabel = { "DisplaySetLabel", 0x00720203, {1, 1}, VRType::LO, false };
    const tag DisplaySetNumber = { "DisplaySetNumber", 0x00720202, {1, 1}, VRType::US, false };
    const tag DisplaySetPatientOrientation = { "DisplaySetPatientOrientation", 0x00720700, {2, 2}, VRType::CS, false };
    const tag DisplaySetPresentationGroup = { "DisplaySetPresentationGroup", 0x00720204, {1, 1}, VRType::US, false };
    const tag DisplaySetPresentationGroupDescription = { "DisplaySetPresentationGroupDescription", 0x00720206, {1, 1}, VRType::LO, false };
    const tag DisplaySetScrollingGroup = { "DisplaySetScrollingGroup", 0x00720212, {2, 2}, VRType::US, false };
    const tag DisplaySetsSequence = { "DisplaySetsSequence", 0x00720200, {1, 1}, VRType::SQ, false };
    const tag DisplaySetVerticalJustification = { "DisplaySetVerticalJustification", 0x00720718, {1, 1}, VRType::CS, false };
    const tag DisplayShadingFlag = { "DisplayShadingFlag", 0x003A0246, {1, 1}, VRType::CS, false };
    const tag DisplaySubsystemConfigurationSequence = { "DisplaySubsystemConfigurationSequence", 0x0028700A, {1, 1}, VRType::SQ, false };
    const tag DisplaySubsystemDescription = { "DisplaySubsystemDescription", 0x00287005, {1, 1}, VRType::LO, false };
    const tag DisplaySubsystemID = { "DisplaySubsystemID", 0x00287003, {1, 1}, VRType::US, false };
    const tag DisplaySubsystemName = { "DisplaySubsystemName", 0x00287004, {1, 1}, VRType::SH, false };
    const tag DisplaySubsystemQAResultsSequence = { "DisplaySubsystemQAResultsSequence", 0x00287010, {1, 1}, VRType::SQ, false };
    const tag DisplaySubsystemSequence = { "DisplaySubsystemSequence", 0x00287023, {1, 1}, VRType::SQ, false };
    const tag DisplayWindowLabelVector = { "DisplayWindowLabelVector", 0x00182006, {1, 1}, VRType::SH, false };
    const tag DistalDepth = { "DistalDepth", 0x300A0502, {1, 1}, VRType::FL, false };
    const tag DistalDepthFraction = { "DistalDepthFraction", 0x300A0501, {1, 1}, VRType::FL, false };
    const tag DistanceBetweenBscanSlabs = { "DistanceBetweenBscanSlabs", 0x00221644, {1, 1}, VRType::FL, false };
    const tag DistanceBetweenFocalPlanes = { "DistanceBetweenFocalPlanes", 0x00480014, {1, 1}, VRType::FL, false };
    const tag DistanceObjectToTableTop = { "DistanceObjectToTableTop", 0x00189403, {1, 1}, VRType::FL, false };
    const tag DistancePupillaryDistance = { "DistancePupillaryDistance", 0x00460060, {1, 1}, VRType::FD, false };
    const tag DistanceReceptorPlaneToDetectorHousing = { "DistanceReceptorPlaneToDetectorHousing", 0x00189426, {1, 1}, VRType::FL, false };
    const tag DistanceSourceToDataCollectionCenter = { "DistanceSourceToDataCollectionCenter", 0x00189335, {1, 1}, VRType::FD, false };
    const tag DistanceSourceToDetector = { "DistanceSourceToDetector", 0x00181110, {1, 1}, VRType::DS, false };
    const tag DistanceSourceToEntrance = { "DistanceSourceToEntrance", 0x00400306, {1, 1}, VRType::DS, false };
    const tag DistanceSourceToIsocenter = { "DistanceSourceToIsocenter", 0x00189402, {1, 1}, VRType::FL, false };
    const tag DistanceSourceToPatient = { "DistanceSourceToPatient", 0x00181111, {1, 1}, VRType::DS, false };
    const tag DistanceSourceToSupport = { "DistanceSourceToSupport", 0x00400307, {1, 1}, VRType::DS, false };
    const tag DistributionAddress = { "DistributionAddress", 0x4008011A, {1, 1}, VRType::LO, false };
    const tag DistributionName = { "DistributionName", 0x40080119, {1, 1}, VRType::PN, false };
    const tag DistributionType = { "DistributionType", 0x00120084, {1, 1}, VRType::CS, false };
    const tag DLPNotificationTrigger = { "DLPNotificationTrigger", 0x00189943, {1, 1}, VRType::FD, false };
    const tag DocumentAuthorIdentifierCodeSequenceTrial = { "DocumentAuthorIdentifierCodeSequenceTrial", 0x0040A068, {1, 1}, VRType::SQ, false };
    const tag DocumentAuthorTrial = { "DocumentAuthorTrial", 0x0040A067, {1, 1}, VRType::PN, false };
    const tag DocumentClassCodeSequence = { "DocumentClassCodeSequence", 0x0040E008, {1, 1}, VRType::SQ, false };
    const tag DocumentIdentifierCodeSequenceTrial = { "DocumentIdentifierCodeSequenceTrial", 0x0040A066, {1, 1}, VRType::SQ, false };
    const tag DocumentingObserverIdentifierCodeSequenceTrial = { "DocumentingObserverIdentifierCodeSequenceTrial", 0x0040A076, {1, 1}, VRType::SQ, false };
    const tag DocumentingOrganizationIdentifierCodeSequenceTrial = { "DocumentingOrganizationIdentifierCodeSequenceTrial", 0x0040A028, {1, 1}, VRType::SQ, false };
    const tag DocumentTitle = { "DocumentTitle", 0x00420010, {1, 1}, VRType::ST, false };
    const tag DopplerCorrectionAngle = { "DopplerCorrectionAngle", 0x00186034, {1, 1}, VRType::FD, false };
    const tag DopplerSampleVolumeXPosition = { "DopplerSampleVolumeXPosition", 0x00186039, {1, 1}, VRType::SL, false };
    const tag DopplerSampleVolumeXPositionRetired = { "DopplerSampleVolumeXPositionRetired", 0x00186038, {1, 1}, VRType::UL, false };
    const tag DopplerSampleVolumeYPosition = { "DopplerSampleVolumeYPosition", 0x0018603B, {1, 1}, VRType::SL, false };
    const tag DopplerSampleVolumeYPositionRetired = { "DopplerSampleVolumeYPositionRetired", 0x0018603A, {1, 1}, VRType::UL, false };
    const tag DoseCalibrationFactor = { "DoseCalibrationFactor", 0x00541322, {1, 1}, VRType::DS, false };
    const tag DoseComment = { "DoseComment", 0x30040006, {1, 1}, VRType::LO, false };
    const tag DoseGridScaling = { "DoseGridScaling", 0x3004000E, {1, 1}, VRType::DS, false };
    const tag DoseRateDelivered = { "DoseRateDelivered", 0x30080048, {1, 1}, VRType::DS, false };
    const tag DoseRateSet = { "DoseRateSet", 0x300A0115, {1, 1}, VRType::DS, false };
    const tag DoseReferenceDescription = { "DoseReferenceDescription", 0x300A0016, {1, 1}, VRType::LO, false };
    const tag DoseReferenceNumber = { "DoseReferenceNumber", 0x300A0012, {1, 1}, VRType::IS, false };
    const tag DoseReferencePointCoordinates = { "DoseReferencePointCoordinates", 0x300A0018, {3, 3}, VRType::DS, false };
    const tag DoseReferenceSequence = { "DoseReferenceSequence", 0x300A0010, {1, 1}, VRType::SQ, false };
    const tag DoseReferenceStructureType = { "DoseReferenceStructureType", 0x300A0014, {1, 1}, VRType::CS, false };
    const tag DoseReferenceType = { "DoseReferenceType", 0x300A0020, {1, 1}, VRType::CS, false };
    const tag DoseReferenceUID = { "DoseReferenceUID", 0x300A0013, {1, 1}, VRType::UI, false };
    const tag DoseSummationType = { "DoseSummationType", 0x3004000A, {1, 1}, VRType::CS, false };
    const tag DoseType = { "DoseType", 0x30040004, {1, 1}, VRType::CS, false };
    const tag DoseUnits = { "DoseUnits", 0x30040002, {1, 1}, VRType::CS, false };
    const tag DoseValue = { "DoseValue", 0x30040012, {1, 1}, VRType::DS, false };
    const tag DoubleExposureFieldDelta = { "DoubleExposureFieldDelta", 0x0074133A, {4, 4}, VRType::FD, false };
    const tag DoubleExposureFieldDeltaTrial = { "DoubleExposureFieldDeltaTrial", 0x0074103A, {4, 4}, VRType::DS, false };
    const tag DoubleExposureFlag = { "DoubleExposureFlag", 0x00741034, {1, 1}, VRType::CS, false };
    const tag DoubleExposureMeterset = { "DoubleExposureMeterset", 0x00741338, {1, 1}, VRType::FD, false };
    const tag DoubleExposureMetersetTrial = { "DoubleExposureMetersetTrial", 0x00741038, {1, 1}, VRType::DS, false };
    const tag DoubleExposureOrdering = { "DoubleExposureOrdering", 0x00741036, {1, 1}, VRType::CS, false };
    const tag DoubleFloatPixelData = { "DoubleFloatPixelData", 0x7FE00009, {1, 1}, VRType::OD, false };
    const tag DoubleFloatPixelPaddingRangeLimit = { "DoubleFloatPixelPaddingRangeLimit", 0x00280125, {1, 1}, VRType::FD, false };
    const tag DoubleFloatPixelPaddingValue = { "DoubleFloatPixelPaddingValue", 0x00280123, {1, 1}, VRType::FD, false };
    const tag DoubleFloatRealWorldValueFirstValueMapped = { "DoubleFloatRealWorldValueFirstValueMapped", 0x00409214, {1, 1}, VRType::FD, false };
    const tag DoubleFloatRealWorldValueLastValueMapped = { "DoubleFloatRealWorldValueLastValueMapped", 0x00409213, {1, 1}, VRType::FD, false };
    const tag DriveProbeSequence = { "DriveProbeSequence", 0x00144083, {1, 1}, VRType::SQ, false };
    const tag DriveType = { "DriveType", 0x00144081, {1, 1}, VRType::CS, false };
    const tag DVHData = { "DVHData", 0x30040058, {2, 2}, VRType::DS, false };
    const tag DVHDoseScaling = { "DVHDoseScaling", 0x30040052, {1, 1}, VRType::DS, false };
    const tag DVHMaximumDose = { "DVHMaximumDose", 0x30040072, {1, 1}, VRType::DS, false };
    const tag DVHMeanDose = { "DVHMeanDose", 0x30040074, {1, 1}, VRType::DS, false };
    const tag DVHMinimumDose = { "DVHMinimumDose", 0x30040070, {1, 1}, VRType::DS, false };
    const tag DVHNormalizationDoseValue = { "DVHNormalizationDoseValue", 0x30040042, {1, 1}, VRType::DS, false };
    const tag DVHNormalizationPoint = { "DVHNormalizationPoint", 0x30040040, {3, 3}, VRType::DS, false };
    const tag DVHNumberOfBins = { "DVHNumberOfBins", 0x30040056, {1, 1}, VRType::IS, false };
    const tag DVHReferencedROISequence = { "DVHReferencedROISequence", 0x30040060, {1, 1}, VRType::SQ, false };
    const tag DVHROIContributionType = { "DVHROIContributionType", 0x30040062, {1, 1}, VRType::CS, false };
    const tag DVHSequence = { "DVHSequence", 0x30040050, {1, 1}, VRType::SQ, false };
    const tag DVHType = { "DVHType", 0x30040001, {1, 1}, VRType::CS, false };
    const tag DVHVolumeUnits = { "DVHVolumeUnits", 0x30040054, {1, 1}, VRType::CS, false };
    const tag DynamicRange = { "DynamicRange", 0x00185030, {1, 1}, VRType::DS, false };
    const tag EchoNumbers = { "EchoNumbers", 0x00180086, {1, 1}, VRType::IS, false };
    const tag EchoPeakPosition = { "EchoPeakPosition", 0x00189298, {1, 1}, VRType::IS, false };
    const tag EchoPlanarPulseSequence = { "EchoPlanarPulseSequence", 0x00189018, {1, 1}, VRType::CS, false };
    const tag EchoPulseSequence = { "EchoPulseSequence", 0x00189008, {1, 1}, VRType::CS, false };
    const tag EchoTime = { "EchoTime", 0x00180081, {1, 1}, VRType::DS, false };
    const tag EchoTrainLength = { "EchoTrainLength", 0x00180091, {1, 1}, VRType::IS, false };
    const tag EdgePointIndexList = { "EdgePointIndexList", 0x00660024, {1, 1}, VRType::OW, false };
    const tag EffectiveDateTime = { "EffectiveDateTime", 0x00686226, {1, 1}, VRType::DT, false };
    const tag EffectiveDuration = { "EffectiveDuration", 0x00180072, {1, 1}, VRType::DS, false };
    const tag EffectiveEchoTime = { "EffectiveEchoTime", 0x00189082, {1, 1}, VRType::FD, false };
    const tag EffectiveRefractiveIndex = { "EffectiveRefractiveIndex", 0x00520004, {1, 1}, VRType::FD, false };
    const tag EffectiveWedgeAngle = { "EffectiveWedgeAngle", 0x300A00DE, {1, 1}, VRType::DS, false };
    const tag ElementDimensionA = { "ElementDimensionA", 0x00144014, {1, 1}, VRType::DS, false };
    const tag ElementDimensionB = { "ElementDimensionB", 0x00144015, {1, 1}, VRType::DS, false };
    const tag ElementPitchA = { "ElementPitchA", 0x00144016, {1, 1}, VRType::DS, false };
    const tag ElementPitchB = { "ElementPitchB", 0x0014401D, {1, 1}, VRType::DS, false };
    const tag ElementShape = { "ElementShape", 0x00144013, {1, 1}, VRType::CS, false };
    const tag EmmetropicMagnification = { "EmmetropicMagnification", 0x0022000A, {1, 1}, VRType::FL, false };
    const tag EmptyImageBoxCIELabValue = { "EmptyImageBoxCIELabValue", 0x00720421, {3, 3}, VRType::US, false };
    const tag EmptyImageDensity = { "EmptyImageDensity", 0x20100110, {1, 1}, VRType::CS, false };
    const tag EncapsulatedDocument = { "EncapsulatedDocument", 0x00420011, {1, 1}, VRType::OB, false };
    const tag EncryptedAttributesSequence = { "EncryptedAttributesSequence", 0x04000500, {1, 1}, VRType::SQ, false };
    const tag EncryptedContent = { "EncryptedContent", 0x04000520, {1, 1}, VRType::OB, false };
    const tag EncryptedContentTransferSyntaxUID = { "EncryptedContentTransferSyntaxUID", 0x04000510, {1, 1}, VRType::UI, false };
    const tag EndAcquisitionDateTime = { "EndAcquisitionDateTime", 0x00189517, {1, 1}, VRType::DT, false };
    const tag EndCumulativeMetersetWeight = { "EndCumulativeMetersetWeight", 0x300C0009, {1, 1}, VRType::DS, false };
    const tag EndCumulativeTimeWeight = { "EndCumulativeTimeWeight", 0x00741408, {1, 1}, VRType::DS, false };
    const tag EndingRespiratoryAmplitude = { "EndingRespiratoryAmplitude", 0x00209248, {1, 1}, VRType::FL, false };
    const tag EndingRespiratoryPhase = { "EndingRespiratoryPhase", 0x00209249, {1, 1}, VRType::CS, false };
    const tag EndMeterset = { "EndMeterset", 0x3008007A, {1, 1}, VRType::DS, false };
    const tag EnergyWeightingFactor = { "EnergyWeightingFactor", 0x00189353, {1, 1}, VRType::FL, false };
    const tag EnergyWindowCenterline = { "EnergyWindowCenterline", 0x00180032, {1, 1}, VRType::DS, false };
    const tag EnergyWindowInformationSequence = { "EnergyWindowInformationSequence", 0x00540012, {1, 1}, VRType::SQ, false };
    const tag EnergyWindowLowerLimit = { "EnergyWindowLowerLimit", 0x00540014, {1, 1}, VRType::DS, false };
    const tag EnergyWindowName = { "EnergyWindowName", 0x00540018, {1, 1}, VRType::SH, false };
    const tag EnergyWindowNumber = { "EnergyWindowNumber", 0x00540308, {1, 1}, VRType::US, false };
    const tag EnergyWindowRangeSequence = { "EnergyWindowRangeSequence", 0x00540013, {1, 1}, VRType::SQ, false };
    const tag EnergyWindowTotalWidth = { "EnergyWindowTotalWidth", 0x00180033, {1, 1}, VRType::DS, false };
    const tag EnergyWindowUpperLimit = { "EnergyWindowUpperLimit", 0x00540015, {1, 1}, VRType::DS, false };
    const tag EnergyWindowVector = { "EnergyWindowVector", 0x00540010, {1, 1}, VRType::US, false };
    const tag EnhancedPaletteColorLookupTableSequence = { "EnhancedPaletteColorLookupTableSequence", 0x0028140B, {1, 1}, VRType::SQ, false };
    const tag EntranceDose = { "EntranceDose", 0x00400302, {1, 1}, VRType::US, false };
    const tag EntranceDoseDerivation = { "EntranceDoseDerivation", 0x00408303, {1, 1}, VRType::CS, false };
    const tag EntranceDoseInmGy = { "EntranceDoseInmGy", 0x00408302, {1, 1}, VRType::DS, false };
    const tag EnvironmentalConditions = { "EnvironmentalConditions", 0x00141040, {1, 1}, VRType::ST, false };
    const tag EquipmentAdministratorSequence = { "EquipmentAdministratorSequence", 0x00287000, {1, 1}, VRType::SQ, false };
    const tag EquipmentCoordinateSystemIdentification = { "EquipmentCoordinateSystemIdentification", 0x00289537, {1, 1}, VRType::CS, false };
    const tag EquipmentModality = { "EquipmentModality", 0x00080221, {1, 1}, VRType::CS, false };
    const tag EquivalentCDADocumentSequence = { "EquivalentCDADocumentSequence", 0x0040A090, {1, 1}, VRType::SQ, false };
    const tag EquivalentCodeSequence = { "EquivalentCodeSequence", 0x00080121, {1, 1}, VRType::SQ, false };
    const tag EquivalentPupilRadius = { "EquivalentPupilRadius", 0x00460205, {1, 1}, VRType::FL, false };
    const range_tag EscapeTriplet = { "EscapeTriplet", 0x10000000, 0x1000FFF0, 0x00000010, {3, 3}, VRType::US, false };
    const tag EstimatedDoseSaving = { "EstimatedDoseSaving", 0x00189324, {1, 1}, VRType::FD, false };
    const tag EstimatedRadiographicMagnificationFactor = { "EstimatedRadiographicMagnificationFactor", 0x00181114, {1, 1}, VRType::DS, false };
    const tag EthicsCommitteeApprovalEffectivenessEndDate = { "EthicsCommitteeApprovalEffectivenessEndDate", 0x00120087, {1, 1}, VRType::DA, false };
    const tag EthicsCommitteeApprovalEffectivenessStartDate = { "EthicsCommitteeApprovalEffectivenessStartDate", 0x00120086, {1, 1}, VRType::DA, false };
    const tag EthnicGroup = { "EthnicGroup", 0x00102160, {1, 1}, VRType::SH, false };
    const tag EvaluationAttempt = { "EvaluationAttempt", 0x00142008, {1, 1}, VRType::IS, false };
    const tag EvaluatorName = { "EvaluatorName", 0x00142006, {1, 1}, VRType::PN, false };
    const tag EvaluatorNumber = { "EvaluatorNumber", 0x00142004, {1, 1}, VRType::IS, false };
    const tag EvaluatorSequence = { "EvaluatorSequence", 0x00142002, {1, 1}, VRType::SQ, false };
    const tag EventCodeSequence = { "EventCodeSequence", 0x00082135, {1, 1}, VRType::SQ, false };
    const tag EventElapsedTimes = { "EventElapsedTimes", 0x00082130, {1, 1}, VRType::DS, false };
    const tag EventTimeOffset = { "EventTimeOffset", 0x00082134, {1, 1}, VRType::FD, false };
    const tag EventTimerNames = { "EventTimerNames", 0x00082132, {1, 1}, VRType::LO, false };
    const tag EventTimerSequence = { "EventTimerSequence", 0x00082133, {1, 1}, VRType::SQ, false };
    const tag ExaminedBodyThickness = { "ExaminedBodyThickness", 0x00109431, {1, 1}, VRType::FL, false };
    const tag ExcessiveFalseNegatives = { "ExcessiveFalseNegatives", 0x00240052, {1, 1}, VRType::CS, false };
    const tag ExcessiveFalseNegativesDataFlag = { "ExcessiveFalseNegativesDataFlag", 0x00240051, {1, 1}, VRType::CS, false };
    const tag ExcessiveFalsePositives = { "ExcessiveFalsePositives", 0x00240062, {1, 1}, VRType::CS, false };
    const tag ExcessiveFalsePositivesDataFlag = { "ExcessiveFalsePositivesDataFlag", 0x00240061, {1, 1}, VRType::CS, false };
    const tag ExcessiveFixationLosses = { "ExcessiveFixationLosses", 0x00240040, {1, 1}, VRType::CS, false };
    const tag ExcessiveFixationLossesDataFlag = { "ExcessiveFixationLossesDataFlag", 0x00240039, {1, 1}, VRType::CS, false };
    const tag ExcitationFrequency = { "ExcitationFrequency", 0x00144024, {1, 1}, VRType::DS, false };
    const tag ExcludedIntervalsSequence = { "ExcludedIntervalsSequence", 0x00189803, {1, 1}, VRType::SQ, false };
    const tag ExclusionDuration = { "ExclusionDuration", 0x00189805, {1, 1}, VRType::FD, false };
    const tag ExclusionStartDateTime = { "ExclusionStartDateTime", 0x00189804, {1, 1}, VRType::DT, false };
    const tag ExclusiveComponentType = { "ExclusiveComponentType", 0x00760036, {1, 1}, VRType::CS, false };
    const tag ExecutionStatus = { "ExecutionStatus", 0x21000020, {1, 1}, VRType::CS, false };
    const tag ExecutionStatusInfo = { "ExecutionStatusInfo", 0x21000030, {1, 1}, VRType::CS, false };
    const tag ExpectedCompletionDateTime = { "ExpectedCompletionDateTime", 0x00404011, {1, 1}, VRType::DT, false };
    const tag ExpiryDate = { "ExpiryDate", 0x00141020, {1, 1}, VRType::DA, false };
    const tag ExposedArea = { "ExposedArea", 0x00400303, {1, 2}, VRType::US, false };
    const tag Exposure = { "Exposure", 0x00181152, {1, 1}, VRType::IS, false };
    const tag ExposureControlMode = { "ExposureControlMode", 0x00187060, {1, 1}, VRType::CS, false };
    const tag ExposureControlModeDescription = { "ExposureControlModeDescription", 0x00187062, {1, 1}, VRType::LT, false };
    const tag ExposureControlSensingRegionLeftVerticalEdge = { "ExposureControlSensingRegionLeftVerticalEdge", 0x00189436, {1, 1}, VRType::SS, false };
    const tag ExposureControlSensingRegionLowerHorizontalEdge = { "ExposureControlSensingRegionLowerHorizontalEdge", 0x00189439, {1, 1}, VRType::SS, false };
    const tag ExposureControlSensingRegionRightVerticalEdge = { "ExposureControlSensingRegionRightVerticalEdge", 0x00189437, {1, 1}, VRType::SS, false };
    const tag ExposureControlSensingRegionShape = { "ExposureControlSensingRegionShape", 0x00189435, {1, 1}, VRType::CS, false };
    const tag ExposureControlSensingRegionsSequence = { "ExposureControlSensingRegionsSequence", 0x00189434, {1, 1}, VRType::SQ, false };
    const tag ExposureControlSensingRegionUpperHorizontalEdge = { "ExposureControlSensingRegionUpperHorizontalEdge", 0x00189438, {1, 1}, VRType::SS, false };
    const tag ExposureDoseSequence = { "ExposureDoseSequence", 0x0040030E, {1, 1}, VRType::SQ, false };
    const tag ExposureIndex = { "ExposureIndex", 0x00181411, {1, 1}, VRType::DS, false };
    const tag ExposureInmAs = { "ExposureInmAs", 0x00189332, {1, 1}, VRType::FD, false };
    const tag ExposureInuAs = { "ExposureInuAs", 0x00181153, {1, 1}, VRType::IS, false };
    const tag ExposureModulationType = { "ExposureModulationType", 0x00189323, {1, 1}, VRType::CS, false };
    const tag ExposureSequence = { "ExposureSequence", 0x30020030, {1, 1}, VRType::SQ, false };
    const tag ExposuresOnDetectorSinceLastCalibration = { "ExposuresOnDetectorSinceLastCalibration", 0x00187010, {1, 1}, VRType::IS, false };
    const tag ExposuresOnDetectorSinceManufactured = { "ExposuresOnDetectorSinceManufactured", 0x00187011, {1, 1}, VRType::IS, false };
    const tag ExposuresOnPlate = { "ExposuresOnPlate", 0x00181404, {1, 1}, VRType::US, false };
    const tag ExposureStatus = { "ExposureStatus", 0x00187064, {1, 1}, VRType::CS, false };
    const tag ExposureTime = { "ExposureTime", 0x00181150, {1, 1}, VRType::IS, false };
    const tag ExposureTimeInms = { "ExposureTimeInms", 0x00189328, {1, 1}, VRType::FD, false };
    const tag ExposureTimeInuS = { "ExposureTimeInuS", 0x00188150, {1, 1}, VRType::DS, false };
    const tag ExtendedCodeMeaning = { "ExtendedCodeMeaning", 0x00080108, {1, 1}, VRType::LT, false };
    const tag ExtendedCodeValue = { "ExtendedCodeValue", 0x00080101, {1, 1}, VRType::LO, false };
    const tag ExtendedDepthOfField = { "ExtendedDepthOfField", 0x00480012, {1, 1}, VRType::CS, false };
    const tag ExternalContourEntryPoint = { "ExternalContourEntryPoint", 0x300A0133, {3, 3}, VRType::FL, false };
    const tag FacetSequence = { "FacetSequence", 0x00660034, {1, 1}, VRType::SQ, false };
    const tag FailedAttributesSequence = { "FailedAttributesSequence", 0x00741048, {1, 1}, VRType::SQ, false };
    const tag FailedSOPInstanceUIDList = { "FailedSOPInstanceUIDList", 0x00080058, {1, 1}, VRType::UI, false };
    const tag FailedSOPSequence = { "FailedSOPSequence", 0x00081198, {1, 1}, VRType::SQ, false };
    const tag FailureAttributes = { "FailureAttributes", 0x2200000E, {1, 1}, VRType::AT, false };
    const tag FailureReason = { "FailureReason", 0x00081197, {1, 1}, VRType::US, false };
    const tag FalseNegativesEstimate = { "FalseNegativesEstimate", 0x00240046, {1, 1}, VRType::FL, false };
    const tag FalseNegativesEstimateFlag = { "FalseNegativesEstimateFlag", 0x00240045, {1, 1}, VRType::CS, false };
    const tag FalseNegativesQuantity = { "FalseNegativesQuantity", 0x00240050, {1, 1}, VRType::US, false };
    const tag FalsePositivesEstimate = { "FalsePositivesEstimate", 0x00240054, {1, 1}, VRType::FL, false };
    const tag FalsePositivesEstimateFlag = { "FalsePositivesEstimateFlag", 0x00240053, {1, 1}, VRType::CS, false };
    const tag FalsePositivesQuantity = { "FalsePositivesQuantity", 0x00240060, {1, 1}, VRType::US, false };
    const tag FiducialDescription = { "FiducialDescription", 0x0070030F, {1, 1}, VRType::ST, false };
    const tag FiducialIdentifier = { "FiducialIdentifier", 0x00700310, {1, 1}, VRType::SH, false };
    const tag FiducialIdentifierCodeSequence = { "FiducialIdentifierCodeSequence", 0x00700311, {1, 1}, VRType::SQ, false };
    const tag FiducialSequence = { "FiducialSequence", 0x0070031E, {1, 1}, VRType::SQ, false };
    const tag FiducialSetSequence = { "FiducialSetSequence", 0x0070031C, {1, 1}, VRType::SQ, false };
    const tag FiducialsPropertyCategoryCodeSequence = { "FiducialsPropertyCategoryCodeSequence", 0x0070031F, {1, 1}, VRType::SQ, false };
    const tag FiducialUID = { "FiducialUID", 0x0070031A, {1, 1}, VRType::UI, false };
    const tag FieldOfViewDescription = { "FieldOfViewDescription", 0x00189433, {1, 1}, VRType::LO, false };
    const tag FieldOfViewDimensions = { "FieldOfViewDimensions", 0x00181149, {1, 2}, VRType::IS, false };
    const tag FieldOfViewDimensionsInFloat = { "FieldOfViewDimensionsInFloat", 0x00189461, {1, 2}, VRType::FL, false };
    const tag FieldOfViewHorizontalFlip = { "FieldOfViewHorizontalFlip", 0x00187034, {1, 1}, VRType::CS, false };
    const tag FieldOfViewOrigin = { "FieldOfViewOrigin", 0x00187030, {2, 2}, VRType::DS, false };
    const tag FieldOfViewRotation = { "FieldOfViewRotation", 0x00187032, {1, 1}, VRType::DS, false };
    const tag FieldOfViewSequence = { "FieldOfViewSequence", 0x00189432, {1, 1}, VRType::SQ, false };
    const tag FieldOfViewShape = { "FieldOfViewShape", 0x00181147, {1, 1}, VRType::CS, false };
    const tag FileMetaInformationGroupLength = { "FileMetaInformationGroupLength", 0x00020000, {1, 1}, VRType::UL, false };
    const tag FileMetaInformationVersion = { "FileMetaInformationVersion", 0x00020001, {1, 1}, VRType::OB, false };
    const tag FileSetConsistencyFlag = { "FileSetConsistencyFlag", 0x00041212, {1, 1}, VRType::US, false };
    const tag FileSetDescriptorFileID = { "FileSetDescriptorFileID", 0x00041141, {1, 8}, VRType::CS, false };
    const tag FileSetID = { "FileSetID", 0x00041130, {1, 1}, VRType::CS, false };
    const tag FillerOrderNumberImagingServiceRequest = { "FillerOrderNumberImagingServiceRequest", 0x00402017, {1, 1}, VRType::LO, false };
    const tag FillerOrderNumberImagingServiceRequestRetired = { "FillerOrderNumberImagingServiceRequestRetired", 0x00402007, {1, 1}, VRType::SH, false };
    const tag FillerOrderNumberProcedure = { "FillerOrderNumberProcedure", 0x00401007, {1, 1}, VRType::SH, false };
    const tag FillMode = { "FillMode", 0x00700257, {1, 1}, VRType::CS, false };
    const tag FillPattern = { "FillPattern", 0x00700256, {1, 1}, VRType::OB, false };
    const tag FillStyleSequence = { "FillStyleSequence", 0x00700233, {1, 1}, VRType::SQ, false };
    const tag FilmBoxContentSequence = { "FilmBoxContentSequence", 0x21300030, {1, 1}, VRType::SQ, false };
    const tag FilmConsumptionSequence = { "FilmConsumptionSequence", 0x00400321, {1, 1}, VRType::SQ, false };
    const tag FilmDestination = { "FilmDestination", 0x20000040, {1, 1}, VRType::CS, false };
    const tag FilmOrientation = { "FilmOrientation", 0x20100040, {1, 1}, VRType::CS, false };
    const tag FilmSessionLabel = { "FilmSessionLabel", 0x20000050, {1, 1}, VRType::LO, false };
    const tag FilmSizeID = { "FilmSizeID", 0x20100050, {1, 1}, VRType::CS, false };
    const tag FilterBeamPathLengthMaximum = { "FilterBeamPathLengthMaximum", 0x00187058, {1, 1}, VRType::FL, false };
    const tag FilterBeamPathLengthMinimum = { "FilterBeamPathLengthMinimum", 0x00187056, {1, 1}, VRType::FL, false };
    const tag FilterByAttributePresence = { "FilterByAttributePresence", 0x00720404, {1, 1}, VRType::CS, false };
    const tag FilterByCategory = { "FilterByCategory", 0x00720402, {1, 1}, VRType::CS, false };
    const tag FilterByOperator = { "FilterByOperator", 0x00720406, {1, 1}, VRType::CS, false };
    const tag FilterHighFrequency = { "FilterHighFrequency", 0x003A0221, {1, 1}, VRType::DS, false };
    const tag FilterLowFrequency = { "FilterLowFrequency", 0x003A0220, {1, 1}, VRType::DS, false };
    const tag FilterMaterial = { "FilterMaterial", 0x00187050, {1, 1}, VRType::CS, false };
    const tag FilterMaterialUsedInGainCalibration = { "FilterMaterialUsedInGainCalibration", 0x00143074, {1, 1}, VRType::LO, false };
    const tag FilterOperationsSequence = { "FilterOperationsSequence", 0x00720400, {1, 1}, VRType::SQ, false };
    const tag FilterThicknessMaximum = { "FilterThicknessMaximum", 0x00187054, {1, 1}, VRType::DS, false };
    const tag FilterThicknessMinimum = { "FilterThicknessMinimum", 0x00187052, {1, 1}, VRType::DS, false };
    const tag FilterThicknessUsedInGainCalibration = { "FilterThicknessUsedInGainCalibration", 0x00143075, {1, 1}, VRType::DS, false };
    const tag FilterType = { "FilterType", 0x00181160, {1, 1}, VRType::SH, false };
    const tag FinalCumulativeMetersetWeight = { "FinalCumulativeMetersetWeight", 0x300A010E, {1, 1}, VRType::DS, false };
    const tag FinalCumulativeTimeWeight = { "FinalCumulativeTimeWeight", 0x300A02C8, {1, 1}, VRType::DS, false };
    const tag FindingsFlagTrial = { "FindingsFlagTrial", 0x0040A007, {1, 1}, VRType::CS, false };
    const tag FindingsGroupRecordingDateTrial = { "FindingsGroupRecordingDateTrial", 0x0040A023, {1, 1}, VRType::DA, false };
    const tag FindingsGroupRecordingTimeTrial = { "FindingsGroupRecordingTimeTrial", 0x0040A024, {1, 1}, VRType::TM, false };
    const tag FindingsGroupUIDTrial = { "FindingsGroupUIDTrial", 0x0040A021, {1, 1}, VRType::UI, false };
    const tag FindingsSequenceTrial = { "FindingsSequenceTrial", 0x0040A020, {1, 1}, VRType::SQ, false };
    const tag FindingsSourceCategoryCodeSequenceTrial = { "FindingsSourceCategoryCodeSequenceTrial", 0x0040A026, {1, 1}, VRType::SQ, false };
    const tag FiniteVolume = { "FiniteVolume", 0x0066000E, {1, 1}, VRType::CS, false };
    const tag FirstALineLocation = { "FirstALineLocation", 0x00520034, {1, 1}, VRType::FD, false };
    const tag FirstOrderPhaseCorrection = { "FirstOrderPhaseCorrection", 0x00189198, {1, 1}, VRType::CS, false };
    const tag FirstOrderPhaseCorrectionAngle = { "FirstOrderPhaseCorrectionAngle", 0x56000010, {1, 1}, VRType::OF, false };
    const tag FirstTreatmentDate = { "FirstTreatmentDate", 0x30080054, {1, 1}, VRType::DA, false };
    const tag FixationCheckedQuantity = { "FixationCheckedQuantity", 0x00240035, {1, 1}, VRType::US, false };
    const tag FixationDeviceDescription = { "FixationDeviceDescription", 0x300A0196, {1, 1}, VRType::ST, false };
    const tag FixationDeviceLabel = { "FixationDeviceLabel", 0x300A0194, {1, 1}, VRType::SH, false };
    const tag FixationDevicePitchAngle = { "FixationDevicePitchAngle", 0x300A0199, {1, 1}, VRType::FL, false };
    const tag FixationDevicePosition = { "FixationDevicePosition", 0x300A0198, {1, 1}, VRType::SH, false };
    const tag FixationDeviceRollAngle = { "FixationDeviceRollAngle", 0x300A019A, {1, 1}, VRType::FL, false };
    const tag FixationDeviceSequence = { "FixationDeviceSequence", 0x300A0190, {1, 1}, VRType::SQ, false };
    const tag FixationDeviceType = { "FixationDeviceType", 0x300A0192, {1, 1}, VRType::CS, false };
    const tag FixationEye = { "FixationEye", 0x300A0150, {1, 1}, VRType::CS, false };
    const tag FixationLightAzimuthalAngle = { "FixationLightAzimuthalAngle", 0x300A0356, {1, 1}, VRType::FL, false };
    const tag FixationLightAzimuthalAngleTolerance = { "FixationLightAzimuthalAngleTolerance", 0x300A0154, {1, 1}, VRType::DS, false };
    const tag FixationLightPolarAngle = { "FixationLightPolarAngle", 0x300A0358, {1, 1}, VRType::FL, false };
    const tag FixationLightPolarAngleTolerance = { "FixationLightPolarAngleTolerance", 0x300A0155, {1, 1}, VRType::DS, false };
    const tag FixationMethodCodeSequence = { "FixationMethodCodeSequence", 0x006863AC, {1, 1}, VRType::SQ, false };
    const tag FixationMonitoringCodeSequence = { "FixationMonitoringCodeSequence", 0x00240033, {1, 1}, VRType::SQ, false };
    const tag FixationSequence = { "FixationSequence", 0x00240032, {1, 1}, VRType::SQ, false };
    const tag FlatKeratometricAxisSequence = { "FlatKeratometricAxisSequence", 0x00460080, {1, 1}, VRType::SQ, false };
    const tag FlipAngle = { "FlipAngle", 0x00181314, {1, 1}, VRType::DS, false };
    const tag FloatingPointValue = { "FloatingPointValue", 0x0040A161, {1, 1}, VRType::FD, false };
    const tag FloatingPointValues = { "FloatingPointValues", 0x00660125, {1, 1}, VRType::OF, false };
    const tag FloatPixelData = { "FloatPixelData", 0x7FE00008, {1, 1}, VRType::OF, false };
    const tag FloatPixelPaddingRangeLimit = { "FloatPixelPaddingRangeLimit", 0x00280124, {1, 1}, VRType::FL, false };
    const tag FloatPixelPaddingValue = { "FloatPixelPaddingValue", 0x00280122, {1, 1}, VRType::FL, false };
    const tag FlowCompensation = { "FlowCompensation", 0x00189010, {1, 1}, VRType::CS, false };
    const tag FlowCompensationDirection = { "FlowCompensationDirection", 0x00189183, {1, 1}, VRType::CS, false };
    const tag FluenceDataScale = { "FluenceDataScale", 0x30020042, {1, 1}, VRType::DS, false };
    const tag FluenceDataSource = { "FluenceDataSource", 0x30020041, {1, 1}, VRType::CS, false };
    const tag FluenceMapSequence = { "FluenceMapSequence", 0x30020040, {1, 1}, VRType::SQ, false };
    const tag FluenceMode = { "FluenceMode", 0x30020051, {1, 1}, VRType::CS, false };
    const tag FluenceModeID = { "FluenceModeID", 0x30020052, {1, 1}, VRType::SH, false };
    const tag FluoroscopyFlag = { "FluoroscopyFlag", 0x00189334, {1, 1}, VRType::CS, false };
    const tag FocalDistance = { "FocalDistance", 0x00181182, {1, 2}, VRType::IS, false };
    const tag FocalSpots = { "FocalSpots", 0x00181190, {1, 1}, VRType::DS, false };
    const tag FocusDepth = { "FocusDepth", 0x00185012, {1, 1}, VRType::DS, false };
    const tag FocusMethod = { "FocusMethod", 0x00480011, {1, 1}, VRType::CS, false };
    const tag FontName = { "FontName", 0x00700227, {1, 1}, VRType::LO, false };
    const tag FontNameType = { "FontNameType", 0x00700228, {1, 1}, VRType::CS, false };
    const tag FovealPointNormativeDataFlag = { "FovealPointNormativeDataFlag", 0x00240117, {1, 1}, VRType::CS, false };
    const tag FovealPointProbabilityValue = { "FovealPointProbabilityValue", 0x00240118, {1, 1}, VRType::FL, false };
    const tag FovealSensitivity = { "FovealSensitivity", 0x00240087, {1, 1}, VRType::FL, false };
    const tag FovealSensitivityMeasured = { "FovealSensitivityMeasured", 0x00240086, {1, 1}, VRType::CS, false };
    const tag FractionalChannelDisplayScale = { "FractionalChannelDisplayScale", 0x003A0247, {1, 1}, VRType::FL, false };
    const tag FractionGroupDescription = { "FractionGroupDescription", 0x300A0072, {1, 1}, VRType::LO, false };
    const tag FractionGroupNumber = { "FractionGroupNumber", 0x300A0071, {1, 1}, VRType::IS, false };
    const tag FractionGroupSequence = { "FractionGroupSequence", 0x300A0070, {1, 1}, VRType::SQ, false };
    const tag FractionGroupSummarySequence = { "FractionGroupSummarySequence", 0x30080220, {1, 1}, VRType::SQ, false };
    const tag FractionGroupType = { "FractionGroupType", 0x30080224, {1, 1}, VRType::CS, false };
    const tag FractionNumber = { "FractionNumber", 0x30020029, {1, 1}, VRType::IS, false };
    const tag FractionPattern = { "FractionPattern", 0x300A007B, {1, 1}, VRType::LT, false };
    const tag FractionStatusSummarySequence = { "FractionStatusSummarySequence", 0x30080240, {1, 1}, VRType::SQ, false };
    const tag FrameAcquisitionDateTime = { "FrameAcquisitionDateTime", 0x00189074, {1, 1}, VRType::DT, false };
    const tag FrameAcquisitionDuration = { "FrameAcquisitionDuration", 0x00189220, {1, 1}, VRType::FD, false };
    const tag FrameAcquisitionNumber = { "FrameAcquisitionNumber", 0x00209156, {1, 1}, VRType::US, false };
    const tag FrameAcquisitionSequence = { "FrameAcquisitionSequence", 0x00189417, {1, 1}, VRType::SQ, false };
    const tag FrameAnatomySequence = { "FrameAnatomySequence", 0x00209071, {1, 1}, VRType::SQ, false };
    const tag FrameComments = { "FrameComments", 0x00209158, {1, 1}, VRType::LT, false };
    const tag FrameContentSequence = { "FrameContentSequence", 0x00209111, {1, 1}, VRType::SQ, false };
    const tag FrameDelay = { "FrameDelay", 0x00181066, {1, 1}, VRType::DS, false };
    const tag FrameDetectorParametersSequence = { "FrameDetectorParametersSequence", 0x00189451, {1, 1}, VRType::SQ, false };
    const tag FrameDimensionPointer = { "FrameDimensionPointer", 0x0028000A, {1, 1}, VRType::AT, false };
    const tag FrameDisplaySequence = { "FrameDisplaySequence", 0x00089458, {1, 1}, VRType::SQ, false };
    const tag FrameDisplayShutterSequence = { "FrameDisplayShutterSequence", 0x00189472, {1, 1}, VRType::SQ, false };
    const tag FrameExtractionSequence = { "FrameExtractionSequence", 0x00081164, {1, 1}, VRType::SQ, false };
    const tag FrameIncrementPointer = { "FrameIncrementPointer", 0x00280009, {1, 1}, VRType::AT, false };
    const tag FrameLabel = { "FrameLabel", 0x00209453, {1, 1}, VRType::LO, false };
    const tag FrameLabelVector = { "FrameLabelVector", 0x00182002, {1, 1}, VRType::SH, false };
    const tag FrameLaterality = { "FrameLaterality", 0x00209072, {1, 1}, VRType::CS, false };
    const tag FrameNumbersOfInterest = { "FrameNumbersOfInterest", 0x00286020, {1, 1}, VRType::US, false };
    const tag FrameOfInterestDescription = { "FrameOfInterestDescription", 0x00286022, {1, 1}, VRType::LO, false };
    const tag FrameOfInterestType = { "FrameOfInterestType", 0x00286023, {1, 1}, VRType::CS, false };
    const tag FrameOfReferenceRelationshipSequence = { "FrameOfReferenceRelationshipSequence", 0x300600C0, {1, 1}, VRType::SQ, false };
    const tag FrameOfReferenceToDisplayedCoordinateSystemTransformationMatrix = { "FrameOfReferenceToDisplayedCoordinateSystemTransformationMatrix", 0x0070030B, {16, 16}, VRType::FD, false };
    const tag FrameOfReferenceTransformationComment = { "FrameOfReferenceTransformationComment", 0x300600C8, {1, 1}, VRType::LO, false };
    const tag FrameOfReferenceTransformationMatrix = { "FrameOfReferenceTransformationMatrix", 0x300600C6, {16, 16}, VRType::DS, false };
    const tag FrameOfReferenceTransformationMatrixType = { "FrameOfReferenceTransformationMatrixType", 0x0070030C, {1, 1}, VRType::CS, false };
    const tag FrameOfReferenceTransformationType = { "FrameOfReferenceTransformationType", 0x300600C4, {1, 1}, VRType::CS, false };
    const tag FrameOfReferenceUID = { "FrameOfReferenceUID", 0x00200052, {1, 1}, VRType::UI, false };
    const tag FramePixelDataPropertiesSequence = { "FramePixelDataPropertiesSequence", 0x00289443, {1, 1}, VRType::SQ, false };
    const tag FramePixelShiftSequence = { "FramePixelShiftSequence", 0x00289415, {1, 1}, VRType::SQ, false };
    const tag FramePrimaryAngleVector = { "FramePrimaryAngleVector", 0x00182003, {1, 1}, VRType::DS, false };
    const tag FrameReferenceDateTime = { "FrameReferenceDateTime", 0x00189151, {1, 1}, VRType::DT, false };
    const tag FrameReferenceTime = { "FrameReferenceTime", 0x00541300, {1, 1}, VRType::DS, false };
    const tag FrameSecondaryAngleVector = { "FrameSecondaryAngleVector", 0x00182004, {1, 1}, VRType::DS, false };
    const tag FrameTime = { "FrameTime", 0x00181063, {1, 1}, VRType::DS, false };
    const tag FrameTimeVector = { "FrameTimeVector", 0x00181065, {1, 1}, VRType::DS, false };
    const tag FrameType = { "FrameType", 0x00089007, {4, 4}, VRType::CS, false };
    const tag FrameVOILUTSequence = { "FrameVOILUTSequence", 0x00289132, {1, 1}, VRType::SQ, false };
    const tag FrequencyCorrection = { "FrequencyCorrection", 0x00189101, {1, 1}, VRType::CS, false };
    const tag FunctionalGroupPointer = { "FunctionalGroupPointer", 0x00209167, {1, 1}, VRType::AT, false };
    const tag FunctionalGroupPrivateCreator = { "FunctionalGroupPrivateCreator", 0x00209238, {1, 1}, VRType::LO, false };
    const tag FunctionalMRSequence = { "FunctionalMRSequence", 0x00189621, {1, 1}, VRType::SQ, false };
    const tag FunctionalSettlingPhaseFramesPresent = { "FunctionalSettlingPhaseFramesPresent", 0x00189622, {1, 1}, VRType::CS, false };
    const tag FunctionalSyncPulse = { "FunctionalSyncPulse", 0x00189623, {1, 1}, VRType::DT, false };
    const tag GainCorrectionReferenceSequence = { "GainCorrectionReferenceSequence", 0x00143060, {1, 1}, VRType::SQ, false };
    const tag GammaValue = { "GammaValue", 0x0028701A, {1, 1}, VRType::FL, false };
    const tag GantryAngle = { "GantryAngle", 0x300A011E, {1, 1}, VRType::DS, false };
    const tag GantryAngleTolerance = { "GantryAngleTolerance", 0x300A0044, {1, 1}, VRType::DS, false };
    const tag GantryDetectorSlew = { "GantryDetectorSlew", 0x00181121, {1, 1}, VRType::DS, false };
    const tag GantryDetectorTilt = { "GantryDetectorTilt", 0x00181120, {1, 1}, VRType::DS, false };
    const tag GantryID = { "GantryID", 0x00181008, {1, 1}, VRType::LO, false };
    const tag GantryMotionCorrected = { "GantryMotionCorrected", 0x00189762, {1, 1}, VRType::CS, false };
    const tag GantryPitchAngle = { "GantryPitchAngle", 0x300A014A, {1, 1}, VRType::FL, false };
    const tag GantryPitchAngleTolerance = { "GantryPitchAngleTolerance", 0x300A014E, {1, 1}, VRType::FL, false };
    const tag GantryPitchRotationDirection = { "GantryPitchRotationDirection", 0x300A014C, {1, 1}, VRType::CS, false };
    const tag GantryRotationDirection = { "GantryRotationDirection", 0x300A011F, {1, 1}, VRType::CS, false };
    const tag GantryType = { "GantryType", 0x40101008, {1, 1}, VRType::CS, false };
    const tag GapLength = { "GapLength", 0x00700261, {1, 1}, VRType::FL, false };
    const tag GatedInformationSequence = { "GatedInformationSequence", 0x00540062, {1, 1}, VRType::SQ, false };
    const tag GateSettingsSequence = { "GateSettingsSequence", 0x00144060, {1, 1}, VRType::SQ, false };
    const tag GateThreshold = { "GateThreshold", 0x00144062, {1, 1}, VRType::DS, false };
    const tag GeneralAccessoryDescription = { "GeneralAccessoryDescription", 0x300A0422, {1, 1}, VRType::ST, false };
    const tag GeneralAccessoryID = { "GeneralAccessoryID", 0x300A0421, {1, 1}, VRType::SH, false };
    const tag GeneralAccessoryNumber = { "GeneralAccessoryNumber", 0x300A0424, {1, 1}, VRType::IS, false };
    const tag GeneralAccessorySequence = { "GeneralAccessorySequence", 0x300A0420, {1, 1}, VRType::SQ, false };
    const tag GeneralAccessoryType = { "GeneralAccessoryType", 0x300A0423, {1, 1}, VRType::CS, false };
    const tag GeneralizedDefectCorrectedSensitivityDeviationFlag = { "GeneralizedDefectCorrectedSensitivityDeviationFlag", 0x00240102, {1, 1}, VRType::CS, false };
    const tag GeneralizedDefectCorrectedSensitivityDeviationProbabilityValue = { "GeneralizedDefectCorrectedSensitivityDeviationProbabilityValue", 0x00240104, {1, 1}, VRType::FL, false };
    const tag GeneralizedDefectCorrectedSensitivityDeviationValue = { "GeneralizedDefectCorrectedSensitivityDeviationValue", 0x00240103, {1, 1}, VRType::FL, false };
    const tag GeneralizedDefectSensitivityDeviationAlgorithmSequence = { "GeneralizedDefectSensitivityDeviationAlgorithmSequence", 0x00240067, {1, 1}, VRType::SQ, false };
    const tag GeneralMachineVerificationSequence = { "GeneralMachineVerificationSequence", 0x00741042, {1, 1}, VRType::SQ, false };
    const tag GeneralPurposePerformedProcedureStepStatus = { "GeneralPurposePerformedProcedureStepStatus", 0x00404002, {1, 1}, VRType::CS, false };
    const tag GeneralPurposeScheduledProcedureStepPriority = { "GeneralPurposeScheduledProcedureStepPriority", 0x00404003, {1, 1}, VRType::CS, false };
    const tag GeneralPurposeScheduledProcedureStepStatus = { "GeneralPurposeScheduledProcedureStepStatus", 0x00404001, {1, 1}, VRType::CS, false };
    const tag GeneratorID = { "GeneratorID", 0x00181005, {1, 1}, VRType::LO, false };
    const tag GeneratorPower = { "GeneratorPower", 0x00181170, {1, 1}, VRType::IS, false };
    const tag GeneticModificationsCodeSequence = { "GeneticModificationsCodeSequence", 0x00100229, {1, 1}, VRType::SQ, false };
    const tag GeneticModificationsDescription = { "GeneticModificationsDescription", 0x00100222, {1, 1}, VRType::UC, false };
    const tag GeneticModificationsNomenclature = { "GeneticModificationsNomenclature", 0x00100223, {1, 1}, VRType::LO, false };
    const tag GeneticModificationsSequence = { "GeneticModificationsSequence", 0x00100221, {1, 1}, VRType::SQ, false };
    const tag GeometricalProperties = { "GeometricalProperties", 0x00289444, {1, 1}, VRType::CS, false };
    const tag GeometricMaximumDistortion = { "GeometricMaximumDistortion", 0x00289445, {1, 1}, VRType::FL, false };
    const tag GeometryForDisplay = { "GeometryForDisplay", 0x00701B08, {1, 1}, VRType::CS, false };
    const tag GeometryOfKSpaceTraversal = { "GeometryOfKSpaceTraversal", 0x00189032, {1, 1}, VRType::CS, false };
    const tag GlobalCrop = { "GlobalCrop", 0x0070120B, {1, 1}, VRType::CS, false };
    const tag GlobalCroppingSpecificationIndex = { "GlobalCroppingSpecificationIndex", 0x0070120C, {1, 1}, VRType::US, false };
    const tag GlobalDeviationFromNormal = { "GlobalDeviationFromNormal", 0x00240066, {1, 1}, VRType::FL, false };
    const tag GlobalDeviationProbability = { "GlobalDeviationProbability", 0x00240071, {1, 1}, VRType::FL, false };
    const tag GlobalDeviationProbabilityNormalsFlag = { "GlobalDeviationProbabilityNormalsFlag", 0x00240059, {1, 1}, VRType::CS, false };
    const tag GlobalDeviationProbabilitySequence = { "GlobalDeviationProbabilitySequence", 0x00240083, {1, 1}, VRType::SQ, false };
    const tag GradientEchoTrainLength = { "GradientEchoTrainLength", 0x00189241, {1, 1}, VRType::US, false };
    const tag GradientOutput = { "GradientOutput", 0x00189182, {1, 1}, VRType::FD, false };
    const tag GradientOutputType = { "GradientOutputType", 0x00189180, {1, 1}, VRType::CS, false };
    const tag GraphicAnnotationSequence = { "GraphicAnnotationSequence", 0x00700001, {1, 1}, VRType::SQ, false };
    const tag GraphicAnnotationUnits = { "GraphicAnnotationUnits", 0x00700005, {1, 1}, VRType::CS, false };
    const tag GraphicCoordinatesDataSequence = { "GraphicCoordinatesDataSequence", 0x00700318, {1, 1}, VRType::SQ, false };
    const tag GraphicData = { "GraphicData", 0x00700022, {2, 2}, VRType::FL, false };
    const tag GraphicDimensions = { "GraphicDimensions", 0x00700020, {1, 1}, VRType::US, false };
    const tag GraphicFilled = { "GraphicFilled", 0x00700024, {1, 1}, VRType::CS, false };
    const tag GraphicGroupDescription = { "GraphicGroupDescription", 0x00700208, {1, 1}, VRType::ST, false };
    const tag GraphicGroupID = { "GraphicGroupID", 0x00700295, {1, 1}, VRType::UL, false };
    const tag GraphicGroupLabel = { "GraphicGroupLabel", 0x00700207, {1, 1}, VRType::LO, false };
    const tag GraphicGroupSequence = { "GraphicGroupSequence", 0x00700234, {1, 1}, VRType::SQ, false };
    const tag GraphicLayer = { "GraphicLayer", 0x00700002, {1, 1}, VRType::CS, false };
    const tag GraphicLayerDescription = { "GraphicLayerDescription", 0x00700068, {1, 1}, VRType::LO, false };
    const tag GraphicLayerOrder = { "GraphicLayerOrder", 0x00700062, {1, 1}, VRType::IS, false };
    const tag GraphicLayerRecommendedDisplayCIELabValue = { "GraphicLayerRecommendedDisplayCIELabValue", 0x00700401, {3, 3}, VRType::US, false };
    const tag GraphicLayerRecommendedDisplayGrayscaleValue = { "GraphicLayerRecommendedDisplayGrayscaleValue", 0x00700066, {1, 1}, VRType::US, false };
    const tag GraphicLayerRecommendedDisplayRGBValue = { "GraphicLayerRecommendedDisplayRGBValue", 0x00700067, {3, 3}, VRType::US, false };
    const tag GraphicLayerSequence = { "GraphicLayerSequence", 0x00700060, {1, 1}, VRType::SQ, false };
    const tag GraphicObjectSequence = { "GraphicObjectSequence", 0x00700009, {1, 1}, VRType::SQ, false };
    const tag GraphicType = { "GraphicType", 0x00700023, {1, 1}, VRType::CS, false };
    const tag GrayLookupTableData = { "GrayLookupTableData", 0x00281200, {1, 1}, VRType::US, true };
    const tag GrayLookupTableDescriptor = { "GrayLookupTableDescriptor", 0x00281100, {3, 3}, VRType::US, true };
    const tag GrayScale = { "GrayScale", 0x00281080, {1, 1}, VRType::CS, false };
    const tag GreenPaletteColorLookupTableData = { "GreenPaletteColorLookupTableData", 0x00281202, {1, 1}, VRType::OW, false };
    const tag GreenPaletteColorLookupTableDescriptor = { "GreenPaletteColorLookupTableDescriptor", 0x00281102, {3, 3}, VRType::US, true };
    const tag Grid = { "Grid", 0x00181166, {1, 1}, VRType::CS, false };
    const tag GridAbsorbingMaterial = { "GridAbsorbingMaterial", 0x00187040, {1, 1}, VRType::LT, false };
    const tag GridAspectRatio = { "GridAspectRatio", 0x00187046, {2, 2}, VRType::IS, false };
    const tag GridDimensions = { "GridDimensions", 0x00640007, {3, 3}, VRType::UL, false };
    const tag GridFocalDistance = { "GridFocalDistance", 0x0018704C, {1, 1}, VRType::DS, false };
    const tag GridFrameOffsetVector = { "GridFrameOffsetVector", 0x3004000C, {2, 2}, VRType::DS, false };
    const tag GridID = { "GridID", 0x00181006, {1, 1}, VRType::LO, false };
    const tag GridPeriod = { "GridPeriod", 0x00187048, {1, 1}, VRType::DS, false };
    const tag GridPitch = { "GridPitch", 0x00187044, {1, 1}, VRType::DS, false };
    const tag GridResolution = { "GridResolution", 0x00640008, {3, 3}, VRType::FD, false };
    const tag GridSpacingMaterial = { "GridSpacingMaterial", 0x00187041, {1, 1}, VRType::LT, false };
    const tag GridThickness = { "GridThickness", 0x00187042, {1, 1}, VRType::DS, false };
    const tag GroupOfPatientsIdentificationSequence = { "GroupOfPatientsIdentificationSequence", 0x00100027, {1, 1}, VRType::SQ, false };
    const tag HalfValueLayer = { "HalfValueLayer", 0x00400314, {1, 1}, VRType::DS, false };
    const tag HangingProtocolCreationDateTime = { "HangingProtocolCreationDateTime", 0x0072000A, {1, 1}, VRType::DT, false };
    const tag HangingProtocolCreator = { "HangingProtocolCreator", 0x00720008, {1, 1}, VRType::LO, false };
    const tag HangingProtocolDefinitionSequence = { "HangingProtocolDefinitionSequence", 0x0072000C, {1, 1}, VRType::SQ, false };
    const tag HangingProtocolDescription = { "HangingProtocolDescription", 0x00720004, {1, 1}, VRType::LO, false };
    const tag HangingProtocolLevel = { "HangingProtocolLevel", 0x00720006, {1, 1}, VRType::CS, false };
    const tag HangingProtocolName = { "HangingProtocolName", 0x00720002, {1, 1}, VRType::SH, false };
    const tag HangingProtocolUserGroupName = { "HangingProtocolUserGroupName", 0x00720010, {1, 1}, VRType::LO, false };
    const tag HangingProtocolUserIdentificationCodeSequence = { "HangingProtocolUserIdentificationCodeSequence", 0x0072000E, {1, 1}, VRType::SQ, false };
    const tag HardcopyCreationDeviceID = { "HardcopyCreationDeviceID", 0x00181011, {1, 1}, VRType::LO, false };
    const tag HardcopyDeviceManufacturer = { "HardcopyDeviceManufacturer", 0x00181017, {1, 1}, VRType::LO, false };
    const tag HardcopyDeviceManufacturerModelName = { "HardcopyDeviceManufacturerModelName", 0x0018101B, {1, 1}, VRType::LO, false };
    const tag HardcopyDeviceSoftwareVersion = { "HardcopyDeviceSoftwareVersion", 0x0018101A, {1, 1}, VRType::LO, false };
    const tag HeadFixationAngle = { "HeadFixationAngle", 0x300A0148, {1, 1}, VRType::FL, false };
    const tag HeadFixationAngleTolerance = { "HeadFixationAngleTolerance", 0x300A0152, {1, 1}, VRType::DS, false };
    const tag HeartRate = { "HeartRate", 0x00181088, {1, 1}, VRType::IS, false };
    const tag HighBit = { "HighBit", 0x00280102, {1, 1}, VRType::US, false };
    const tag HighDoseTechniqueType = { "HighDoseTechniqueType", 0x300A00C7, {1, 1}, VRType::CS, false };
    const tag HighEnergyDetectors = { "HighEnergyDetectors", 0x40100002, {1, 1}, VRType::CS, false };
    const tag HighRRValue = { "HighRRValue", 0x00181082, {1, 1}, VRType::IS, false };
    const tag HistogramBinWidth = { "HistogramBinWidth", 0x00603008, {1, 1}, VRType::US, false };
    const tag HistogramData = { "HistogramData", 0x00603020, {1, 1}, VRType::UL, false };
    const tag HistogramExplanation = { "HistogramExplanation", 0x00603010, {1, 1}, VRType::LO, false };
    const tag HistogramFirstBinValue = { "HistogramFirstBinValue", 0x00603004, {1, 1}, VRType::US, true };
    const tag HistogramLastBinValue = { "HistogramLastBinValue", 0x00603006, {1, 1}, VRType::US, true };
    const tag HistogramNumberOfBins = { "HistogramNumberOfBins", 0x00603002, {1, 1}, VRType::US, false };
    const tag HistogramSequence = { "HistogramSequence", 0x00603000, {1, 1}, VRType::SQ, false };
    const tag HL7DocumentEffectiveTime = { "HL7DocumentEffectiveTime", 0x0040E004, {1, 1}, VRType::DT, false };
    const tag HL7DocumentTypeCodeSequence = { "HL7DocumentTypeCodeSequence", 0x0040E006, {1, 1}, VRType::SQ, false };
    const tag HL7InstanceIdentifier = { "HL7InstanceIdentifier", 0x0040E001, {1, 1}, VRType::ST, false };
    const tag HL7StructuredDocumentReferenceSequence = { "HL7StructuredDocumentReferenceSequence", 0x0040A390, {1, 1}, VRType::SQ, false };
    const tag HomeCommunityID = { "HomeCommunityID", 0x0040E031, {1, 1}, VRType::UI, false };
    const tag HorizontalAlignment = { "HorizontalAlignment", 0x00700242, {1, 1}, VRType::CS, false };
    const tag HorizontalFieldOfView = { "HorizontalFieldOfView", 0x0022000C, {1, 1}, VRType::FL, false };
    const tag HorizontalOffsetOfSensor = { "HorizontalOffsetOfSensor", 0x00143024, {1, 1}, VRType::DS, false };
    const tag HorizontalPrismBase = { "HorizontalPrismBase", 0x00460032, {1, 1}, VRType::CS, false };
    const tag HorizontalPrismPower = { "HorizontalPrismPower", 0x00460030, {1, 1}, VRType::FD, false };
    const tag HPGLContourPenNumber = { "HPGLContourPenNumber", 0x00686310, {1, 1}, VRType::US, false };
    const tag HPGLDocument = { "HPGLDocument", 0x00686300, {1, 1}, VRType::OB, false };
    const tag HPGLDocumentID = { "HPGLDocumentID", 0x006862D0, {1, 1}, VRType::US, false };
    const tag HPGLDocumentLabel = { "HPGLDocumentLabel", 0x006862D5, {1, 1}, VRType::LO, false };
    const tag HPGLDocumentScaling = { "HPGLDocumentScaling", 0x006862F2, {1, 1}, VRType::FD, false };
    const tag HPGLDocumentSequence = { "HPGLDocumentSequence", 0x006862C0, {1, 1}, VRType::SQ, false };
    const tag HPGLPenDescription = { "HPGLPenDescription", 0x00686345, {1, 1}, VRType::ST, false };
    const tag HPGLPenLabel = { "HPGLPenLabel", 0x00686340, {1, 1}, VRType::LO, false };
    const tag HPGLPenNumber = { "HPGLPenNumber", 0x00686330, {1, 1}, VRType::US, false };
    const tag HPGLPenSequence = { "HPGLPenSequence", 0x00686320, {1, 1}, VRType::SQ, false };
    const range_tag HuffmanTableSize = { "HuffmanTableSize", 0x10000002, 0x1000FFF2, 0x00000010, {1, 1}, VRType::US, false };
    const range_tag HuffmanTableTriplet = { "HuffmanTableTriplet", 0x10000003, 0x1000FFF3, 0x00000010, {3, 3}, VRType::US, false };
    const tag HumanPerformerCodeSequence = { "HumanPerformerCodeSequence", 0x00404009, {1, 1}, VRType::SQ, false };
    const tag HumanPerformerName = { "HumanPerformerName", 0x00404037, {1, 1}, VRType::PN, false };
    const tag HumanPerformerOrganization = { "HumanPerformerOrganization", 0x00404036, {1, 1}, VRType::LO, false };
    const tag ICCProfile = { "ICCProfile", 0x00282000, {1, 1}, VRType::OB, false };
    const tag IconImageSequence = { "IconImageSequence", 0x00880200, {1, 1}, VRType::SQ, false };
    const tag IdenticalDocumentsSequence = { "IdenticalDocumentsSequence", 0x0040A525, {1, 1}, VRType::SQ, false };
    const tag IdentificationDescriptionTrial = { "IdentificationDescriptionTrial", 0x0040A224, {1, 1}, VRType::ST, false };
    const tag IdentifierCodeSequenceTrial = { "IdentifierCodeSequenceTrial", 0x0040A070, {1, 1}, VRType::SQ, false };
    const tag IdentifierTypeCode = { "IdentifierTypeCode", 0x00400035, {1, 1}, VRType::CS, false };
    const tag IdentifyingComments = { "IdentifyingComments", 0x00084000, {1, 1}, VRType::LT, false };
    const tag IdentifyingPrivateElements = { "IdentifyingPrivateElements", 0x00080306, {1, 1}, VRType::US, false };
    const tag Illumination = { "Illumination", 0x2010015E, {1, 1}, VRType::US, false };
    const tag IlluminationBandwidth = { "IlluminationBandwidth", 0x00220057, {1, 1}, VRType::FL, false };
    const tag IlluminationColorCodeSequence = { "IlluminationColorCodeSequence", 0x00480108, {1, 1}, VRType::SQ, false };
    const tag IlluminationPower = { "IlluminationPower", 0x00220056, {1, 1}, VRType::FL, false };
    const tag IlluminationTypeCodeSequence = { "IlluminationTypeCodeSequence", 0x00220016, {1, 1}, VRType::SQ, false };
    const tag IlluminationWaveLength = { "IlluminationWaveLength", 0x00220055, {1, 1}, VRType::FL, false };
    const tag IlluminatorTypeCodeSequence = { "IlluminatorTypeCodeSequence", 0x00480100, {1, 1}, VRType::SQ, false };
    const tag ImageAndFluoroscopyAreaDoseProduct = { "ImageAndFluoroscopyAreaDoseProduct", 0x0018115E, {1, 1}, VRType::DS, false };
    const tag ImageBoxContentSequence = { "ImageBoxContentSequence", 0x21300040, {1, 1}, VRType::SQ, false };
    const tag ImageBoxesSequence = { "ImageBoxesSequence", 0x00720300, {1, 1}, VRType::SQ, false };
    const tag ImageBoxLargeScrollAmount = { "ImageBoxLargeScrollAmount", 0x00720318, {1, 1}, VRType::US, false };
    const tag ImageBoxLargeScrollType = { "ImageBoxLargeScrollType", 0x00720316, {1, 1}, VRType::CS, false };
    const tag ImageBoxLayoutType = { "ImageBoxLayoutType", 0x00720304, {1, 1}, VRType::CS, false };
    const tag ImageBoxNumber = { "ImageBoxNumber", 0x00720302, {1, 1}, VRType::US, false };
    const tag ImageBoxOverlapPriority = { "ImageBoxOverlapPriority", 0x00720320, {1, 1}, VRType::US, false };
    const tag ImageBoxPosition = { "ImageBoxPosition", 0x20200010, {1, 1}, VRType::US, false };
    const tag ImageBoxPresentationLUTFlag = { "ImageBoxPresentationLUTFlag", 0x2000006A, {1, 1}, VRType::CS, false };
    const tag ImageBoxScrollDirection = { "ImageBoxScrollDirection", 0x00720310, {1, 1}, VRType::CS, false };
    const tag ImageBoxSmallScrollAmount = { "ImageBoxSmallScrollAmount", 0x00720314, {1, 1}, VRType::US, false };
    const tag ImageBoxSmallScrollType = { "ImageBoxSmallScrollType", 0x00720312, {1, 1}, VRType::CS, false };
    const tag ImageBoxSynchronizationSequence = { "ImageBoxSynchronizationSequence", 0x00720430, {1, 1}, VRType::SQ, false };
    const tag ImageBoxTileHorizontalDimension = { "ImageBoxTileHorizontalDimension", 0x00720306, {1, 1}, VRType::US, false };
    const tag ImageBoxTileVerticalDimension = { "ImageBoxTileVerticalDimension", 0x00720308, {1, 1}, VRType::US, false };
    const tag ImageCenterPointCoordinatesSequence = { "ImageCenterPointCoordinatesSequence", 0x0040071A, {1, 1}, VRType::SQ, false };
    const tag ImageComments = { "ImageComments", 0x00204000, {1, 1}, VRType::LT, false };
    const range_tag ImageDataLocation = { "ImageDataLocation", 0x00280808, 0x002808F8, 0x00000010, {1, 1}, VRType::AT, false };
    const tag ImageDataTypeSequence = { "ImageDataTypeSequence", 0x00189807, {1, 1}, VRType::SQ, false };
    const tag ImageDimensions = { "ImageDimensions", 0x00280005, {1, 1}, VRType::US, false };
    const tag ImageDisplayFormat = { "ImageDisplayFormat", 0x20100010, {1, 1}, VRType::ST, false };
    const tag ImagedNucleus = { "ImagedNucleus", 0x00180085, {1, 1}, VRType::SH, false };
    const tag ImagedVolumeDepth = { "ImagedVolumeDepth", 0x00480003, {1, 1}, VRType::FL, false };
    const tag ImagedVolumeHeight = { "ImagedVolumeHeight", 0x00480002, {1, 1}, VRType::FL, false };
    const tag ImagedVolumeWidth = { "ImagedVolumeWidth", 0x00480001, {1, 1}, VRType::FL, false };
    const tag ImageFilter = { "ImageFilter", 0x00189320, {1, 1}, VRType::SH, false };
    const tag ImageFilterDescription = { "ImageFilterDescription", 0x00189941, {1, 1}, VRType::UT, false };
    const tag ImageFormat = { "ImageFormat", 0x00280040, {1, 1}, VRType::CS, false };
    const range_tag ImageFrameOrigin = { "ImageFrameOrigin", 0x60000051, 0x60FF0051, 0x00010000, {1, 1}, VRType::US, false };
    const tag ImageGeometryType = { "ImageGeometryType", 0x00200070, {1, 1}, VRType::LO, false };
    const tag ImageHorizontalFlip = { "ImageHorizontalFlip", 0x00700041, {1, 1}, VRType::CS, false };
    const tag ImageID = { "ImageID", 0x00540400, {1, 1}, VRType::SH, false };
    const tag ImageIndex = { "ImageIndex", 0x00541330, {1, 1}, VRType::US, false };
    const tag ImageLaterality = { "ImageLaterality", 0x00200062, {1, 1}, VRType::CS, false };
    const tag ImageLocation = { "ImageLocation", 0x00280200, {1, 1}, VRType::US, false };
    const tag ImageOrientation = { "ImageOrientation", 0x00200035, {6, 6}, VRType::DS, false };
    const tag ImageOrientationPatient = { "ImageOrientationPatient", 0x00200037, {6, 6}, VRType::DS, false };
    const tag ImageOrientationSlide = { "ImageOrientationSlide", 0x00480102, {6, 6}, VRType::DS, false };
    const tag ImageOrientationVolume = { "ImageOrientationVolume", 0x00209302, {6, 6}, VRType::FD, false };
    const tag ImageOverlayBoxContentSequence = { "ImageOverlayBoxContentSequence", 0x21300060, {1, 1}, VRType::SQ, false };
    const tag ImageOverlayFlag = { "ImageOverlayFlag", 0x20000067, {1, 1}, VRType::CS, false };
    const tag ImagePathFilterPassBand = { "ImagePathFilterPassBand", 0x00220004, {2, 2}, VRType::US, false };
    const tag ImagePathFilterPassThroughWavelength = { "ImagePathFilterPassThroughWavelength", 0x00220003, {1, 1}, VRType::US, false };
    const tag ImagePathFilterTypeStackCodeSequence = { "ImagePathFilterTypeStackCodeSequence", 0x00220018, {1, 1}, VRType::SQ, false };
    const tag ImagePlanePixelSpacing = { "ImagePlanePixelSpacing", 0x30020011, {2, 2}, VRType::DS, false };
    const tag ImagePosition = { "ImagePosition", 0x00200030, {3, 3}, VRType::DS, false };
    const tag ImagePositionPatient = { "ImagePositionPatient", 0x00200032, {3, 3}, VRType::DS, false };
    const tag ImagePositionVolume = { "ImagePositionVolume", 0x00209301, {3, 3}, VRType::FD, false };
    const tag ImagePresentationComments = { "ImagePresentationComments", 0x00284000, {1, 1}, VRType::LT, false };
    const tag ImageProcessingApplied = { "ImageProcessingApplied", 0x00289446, {1, 1}, VRType::CS, false };
    const tag ImageQualityIndicatorMaterial = { "ImageQualityIndicatorMaterial", 0x001440A1, {1, 1}, VRType::LO, false };
    const tag ImageQualityIndicatorSize = { "ImageQualityIndicatorSize", 0x001440A2, {1, 1}, VRType::LO, false };
    const tag ImageQualityIndicatorType = { "ImageQualityIndicatorType", 0x001440A0, {1, 1}, VRType::LO, false };
    const tag ImageRotation = { "ImageRotation", 0x00700042, {1, 1}, VRType::US, false };
    const tag ImageRotationRetired = { "ImageRotationRetired", 0x00700040, {1, 1}, VRType::IS, false };
    const tag ImagerPixelSpacing = { "ImagerPixelSpacing", 0x00181164, {2, 2}, VRType::DS, false };
    const tag ImageScaleRepresentation = { "ImageScaleRepresentation", 0x40101075, {1, 1}, VRType::DS, false };
    const tag ImageSetLabel = { "ImageSetLabel", 0x00720040, {1, 1}, VRType::LO, false };
    const tag ImageSetNumber = { "ImageSetNumber", 0x00720032, {1, 1}, VRType::US, false };
    const tag ImageSetSelectorCategory = { "ImageSetSelectorCategory", 0x00720034, {1, 1}, VRType::CS, false };
    const tag ImageSetSelectorSequence = { "ImageSetSelectorSequence", 0x00720022, {1, 1}, VRType::SQ, false };
    const tag ImageSetSelectorUsageFlag = { "ImageSetSelectorUsageFlag", 0x00720024, {1, 1}, VRType::CS, false };
    const tag ImageSetsSequence = { "ImageSetsSequence", 0x00720020, {1, 1}, VRType::SQ, false };
    const tag ImagesInAcquisition = { "ImagesInAcquisition", 0x00201002, {1, 1}, VRType::IS, false };
    const tag ImagesInSeries = { "ImagesInSeries", 0x00201003, {1, 1}, VRType::IS, false };
    const tag ImagesInStudy = { "ImagesInStudy", 0x00201005, {1, 1}, VRType::IS, false };
    const tag ImageToEquipmentMappingMatrix = { "ImageToEquipmentMappingMatrix", 0x00289520, {16, 16}, VRType::DS, false };
    const tag ImageTransformationMatrix = { "ImageTransformationMatrix", 0x00185210, {6, 6}, VRType::DS, false };
    const tag ImageTranslationVector = { "ImageTranslationVector", 0x00185212, {3, 3}, VRType::DS, false };
    const tag ImageTriggerDelay = { "ImageTriggerDelay", 0x00181067, {1, 1}, VRType::DS, false };
    const tag ImageType = { "ImageType", 0x00080008, {2, 2}, VRType::CS, false };
    const tag ImageVolumeGeometry = { "ImageVolumeGeometry", 0x00701208, {1, 1}, VRType::CS, false };
    const tag ImagingDeviceSpecificAcquisitionParameters = { "ImagingDeviceSpecificAcquisitionParameters", 0x300A00CC, {1, 1}, VRType::LO, false };
    const tag ImagingFrequency = { "ImagingFrequency", 0x00180084, {1, 1}, VRType::DS, false };
    const tag ImagingServiceRequestComments = { "ImagingServiceRequestComments", 0x00402400, {1, 1}, VRType::LT, false };
    const tag ImplantAssemblyTemplateIssuer = { "ImplantAssemblyTemplateIssuer", 0x00760003, {1, 1}, VRType::LO, false };
    const tag ImplantAssemblyTemplateName = { "ImplantAssemblyTemplateName", 0x00760001, {1, 1}, VRType::LO, false };
    const tag ImplantAssemblyTemplateTargetAnatomySequence = { "ImplantAssemblyTemplateTargetAnatomySequence", 0x00760010, {1, 1}, VRType::SQ, false };
    const tag ImplantAssemblyTemplateType = { "ImplantAssemblyTemplateType", 0x0076000A, {1, 1}, VRType::CS, false };
    const tag ImplantAssemblyTemplateVersion = { "ImplantAssemblyTemplateVersion", 0x00760006, {1, 1}, VRType::LO, false };
    const tag ImplantName = { "ImplantName", 0x00221095, {1, 1}, VRType::LO, false };
    const tag ImplantPartNumber = { "ImplantPartNumber", 0x00221097, {1, 1}, VRType::LO, false };
    const tag ImplantRegulatoryDisapprovalCodeSequence = { "ImplantRegulatoryDisapprovalCodeSequence", 0x006862A0, {1, 1}, VRType::SQ, false };
    const tag ImplantSize = { "ImplantSize", 0x00686210, {1, 1}, VRType::LO, false };
    const tag ImplantTargetAnatomySequence = { "ImplantTargetAnatomySequence", 0x00686230, {1, 1}, VRType::SQ, false };
    const tag ImplantTemplate3DModelSurfaceNumber = { "ImplantTemplate3DModelSurfaceNumber", 0x00686350, {1, 1}, VRType::US, false };
    const tag ImplantTemplateGroupDescription = { "ImplantTemplateGroupDescription", 0x00780010, {1, 1}, VRType::ST, false };
    const tag ImplantTemplateGroupIssuer = { "ImplantTemplateGroupIssuer", 0x00780020, {1, 1}, VRType::LO, false };
    const tag ImplantTemplateGroupMemberID = { "ImplantTemplateGroupMemberID", 0x0078002E, {1, 1}, VRType::US, false };
    const tag ImplantTemplateGroupMemberMatching2DCoordinatesSequence = { "ImplantTemplateGroupMemberMatching2DCoordinatesSequence", 0x00780070, {1, 1}, VRType::SQ, false };
    const tag ImplantTemplateGroupMembersSequence = { "ImplantTemplateGroupMembersSequence", 0x0078002A, {1, 1}, VRType::SQ, false };
    const tag ImplantTemplateGroupName = { "ImplantTemplateGroupName", 0x00780001, {1, 1}, VRType::LO, false };
    const tag ImplantTemplateGroupTargetAnatomySequence = { "ImplantTemplateGroupTargetAnatomySequence", 0x00780028, {1, 1}, VRType::SQ, false };
    const tag ImplantTemplateGroupVariationDimensionName = { "ImplantTemplateGroupVariationDimensionName", 0x007800B2, {1, 1}, VRType::LO, false };
    const tag ImplantTemplateGroupVariationDimensionRank = { "ImplantTemplateGroupVariationDimensionRank", 0x007800B8, {1, 1}, VRType::US, false };
    const tag ImplantTemplateGroupVariationDimensionRankSequence = { "ImplantTemplateGroupVariationDimensionRankSequence", 0x007800B4, {1, 1}, VRType::SQ, false };
    const tag ImplantTemplateGroupVariationDimensionSequence = { "ImplantTemplateGroupVariationDimensionSequence", 0x007800B0, {1, 1}, VRType::SQ, false };
    const tag ImplantTemplateGroupVersion = { "ImplantTemplateGroupVersion", 0x00780024, {1, 1}, VRType::LO, false };
    const tag ImplantTemplateVersion = { "ImplantTemplateVersion", 0x00686221, {1, 1}, VRType::LO, false };
    const tag ImplantType = { "ImplantType", 0x00686223, {1, 1}, VRType::CS, false };
    const tag ImplantTypeCodeSequence = { "ImplantTypeCodeSequence", 0x006863A8, {1, 1}, VRType::SQ, false };
    const tag ImplementationClassUID = { "ImplementationClassUID", 0x00020012, {1, 1}, VRType::UI, false };
    const tag ImplementationVersionName = { "ImplementationVersionName", 0x00020013, {1, 1}, VRType::SH, false };
    const tag Impressions = { "Impressions", 0x40080300, {1, 1}, VRType::ST, false };
    const tag InboundArrivalType = { "InboundArrivalType", 0x40101056, {1, 1}, VRType::CS, false };
    const tag IncidentAngle = { "IncidentAngle", 0x00144052, {1, 1}, VRType::DS, false };
    const tag IncludeDisplayApplication = { "IncludeDisplayApplication", 0x22000009, {1, 1}, VRType::CS, false };
    const tag IncludeNonDICOMObjects = { "IncludeNonDICOMObjects", 0x22000008, {1, 1}, VRType::CS, false };
    const tag InConcatenationNumber = { "InConcatenationNumber", 0x00209162, {1, 1}, VRType::US, false };
    const tag InConcatenationTotalNumber = { "InConcatenationTotalNumber", 0x00209163, {1, 1}, VRType::US, false };
    const tag IndexNormalsFlag = { "IndexNormalsFlag", 0x00240338, {1, 1}, VRType::CS, false };
    const tag IndexProbability = { "IndexProbability", 0x00240341, {1, 1}, VRType::FL, false };
    const tag IndexProbabilitySequence = { "IndexProbabilitySequence", 0x00240344, {1, 1}, VRType::SQ, false };
    const tag IndicationDescription = { "IndicationDescription", 0x00142018, {1, 1}, VRType::ST, false };
    const tag IndicationDisposition = { "IndicationDisposition", 0x0014201C, {1, 1}, VRType::CS, false };
    const tag IndicationLabel = { "IndicationLabel", 0x00142016, {1, 1}, VRType::SH, false };
    const tag IndicationNumber = { "IndicationNumber", 0x00142014, {1, 1}, VRType::IS, false };
    const tag IndicationPhysicalPropertySequence = { "IndicationPhysicalPropertySequence", 0x00142030, {1, 1}, VRType::SQ, false };
    const tag IndicationROISequence = { "IndicationROISequence", 0x0014201E, {1, 1}, VRType::SQ, false };
    const tag IndicationSequence = { "IndicationSequence", 0x00142012, {1, 1}, VRType::SQ, false };
    const tag IndicationType = { "IndicationType", 0x0014201A, {1, 1}, VRType::CS, false };
    const tag InformationFromManufacturerSequence = { "InformationFromManufacturerSequence", 0x00686260, {1, 1}, VRType::SQ, false };
    const tag InformationIssueDateTime = { "InformationIssueDateTime", 0x00686270, {1, 1}, VRType::DT, false };
    const tag InformationSummary = { "InformationSummary", 0x00686280, {1, 1}, VRType::ST, false };
    const tag InitialCineRunState = { "InitialCineRunState", 0x00180042, {1, 1}, VRType::CS, false };
    const tag InnerDiameter = { "InnerDiameter", 0x00140056, {1, 1}, VRType::DS, false };
    const tag InPlanePhaseEncodingDirection = { "InPlanePhaseEncodingDirection", 0x00181312, {1, 1}, VRType::CS, false };
    const tag InputAvailabilityFlag = { "InputAvailabilityFlag", 0x00404020, {1, 1}, VRType::CS, false };
    const tag InputInformationSequence = { "InputInformationSequence", 0x00404021, {1, 1}, VRType::SQ, false };
    const tag InputReadinessState = { "InputReadinessState", 0x00404041, {1, 1}, VRType::CS, false };
    const tag InputSequencePositionIndex = { "InputSequencePositionIndex", 0x00701203, {1, 1}, VRType::US, false };
    const tag InspectionSelectionCriteria = { "InspectionSelectionCriteria", 0x4010107C, {1, 1}, VRType::CS, false };
    const tag InStackPositionNumber = { "InStackPositionNumber", 0x00209057, {1, 1}, VRType::UL, false };
    const tag InstanceAvailability = { "InstanceAvailability", 0x00080056, {1, 1}, VRType::CS, false };
    const tag InstanceCoercionDateTime = { "InstanceCoercionDateTime", 0x00080015, {1, 1}, VRType::DT, false };
    const tag InstanceCreationDate = { "InstanceCreationDate", 0x00080012, {1, 1}, VRType::DA, false };
    const tag InstanceCreationTime = { "InstanceCreationTime", 0x00080013, {1, 1}, VRType::TM, false };
    const tag InstanceCreatorUID = { "InstanceCreatorUID", 0x00080014, {1, 1}, VRType::UI, false };
    const tag InstanceNumber = { "InstanceNumber", 0x00200013, {1, 1}, VRType::IS, false };
    const tag InstitutionAddress = { "InstitutionAddress", 0x00080081, {1, 1}, VRType::ST, false };
    const tag InstitutionalDepartmentName = { "InstitutionalDepartmentName", 0x00081040, {1, 1}, VRType::LO, false };
    const tag InstitutionCodeSequence = { "InstitutionCodeSequence", 0x00080082, {1, 1}, VRType::SQ, false };
    const tag InstitutionName = { "InstitutionName", 0x00080080, {1, 1}, VRType::LO, false };
    const tag InstructionDescription = { "InstructionDescription", 0x00189917, {1, 1}, VRType::UT, false };
    const tag InstructionIndex = { "InstructionIndex", 0x00189915, {1, 1}, VRType::US, false };
    const tag InstructionPerformanceComment = { "InstructionPerformanceComment", 0x0018991A, {1, 1}, VRType::UT, false };
    const tag InstructionPerformedDateTime = { "InstructionPerformedDateTime", 0x00189919, {1, 1}, VRType::DT, false };
    const tag InstructionPerformedFlag = { "InstructionPerformedFlag", 0x00189918, {1, 1}, VRType::CS, false };
    const tag InstructionSequence = { "InstructionSequence", 0x00189914, {1, 1}, VRType::SQ, false };
    const tag InstructionText = { "InstructionText", 0x00189916, {1, 1}, VRType::LO, false };
    const tag InsurancePlanIdentification = { "InsurancePlanIdentification", 0x00101050, {1, 1}, VRType::LO, false };
    const tag IntendedRecipientsOfResultsIdentificationSequence = { "IntendedRecipientsOfResultsIdentificationSequence", 0x00401011, {1, 1}, VRType::SQ, false };
    const tag IntensifierActiveDimensions = { "IntensifierActiveDimensions", 0x00189428, {1, 2}, VRType::FL, false };
    const tag IntensifierActiveShape = { "IntensifierActiveShape", 0x00189427, {1, 1}, VRType::CS, false };
    const tag IntensifierSize = { "IntensifierSize", 0x00181162, {1, 1}, VRType::DS, false };
    const tag InterMarkerDistance = { "InterMarkerDistance", 0x00500019, {1, 1}, VRType::DS, false };
    const tag IntermediatePupillaryDistance = { "IntermediatePupillaryDistance", 0x00460063, {1, 1}, VRType::FD, false };
    const tag InternalDetectorFrameTime = { "InternalDetectorFrameTime", 0x00143011, {1, 1}, VRType::DS, false };
    const tag InternationalRouteSegment = { "InternationalRouteSegment", 0x40101028, {1, 1}, VRType::CS, false };
    const tag InterpolationType = { "InterpolationType", 0x00520039, {1, 1}, VRType::CS, false };
    const tag InterpretationApprovalDate = { "InterpretationApprovalDate", 0x40080112, {1, 1}, VRType::DA, false };
    const tag InterpretationApprovalTime = { "InterpretationApprovalTime", 0x40080113, {1, 1}, VRType::TM, false };
    const tag InterpretationApproverSequence = { "InterpretationApproverSequence", 0x40080111, {1, 1}, VRType::SQ, false };
    const tag InterpretationAuthor = { "InterpretationAuthor", 0x4008010C, {1, 1}, VRType::PN, false };
    const tag InterpretationDiagnosisCodeSequence = { "InterpretationDiagnosisCodeSequence", 0x40080117, {1, 1}, VRType::SQ, false };
    const tag InterpretationDiagnosisDescription = { "InterpretationDiagnosisDescription", 0x40080115, {1, 1}, VRType::LT, false };
    const tag InterpretationID = { "InterpretationID", 0x40080200, {1, 1}, VRType::SH, false };
    const tag InterpretationIDIssuer = { "InterpretationIDIssuer", 0x40080202, {1, 1}, VRType::LO, false };
    const tag InterpretationRecordedDate = { "InterpretationRecordedDate", 0x40080100, {1, 1}, VRType::DA, false };
    const tag InterpretationRecordedTime = { "InterpretationRecordedTime", 0x40080101, {1, 1}, VRType::TM, false };
    const tag InterpretationRecorder = { "InterpretationRecorder", 0x40080102, {1, 1}, VRType::PN, false };
    const tag InterpretationStatusID = { "InterpretationStatusID", 0x40080212, {1, 1}, VRType::CS, false };
    const tag InterpretationText = { "InterpretationText", 0x4008010B, {1, 1}, VRType::ST, false };
    const tag InterpretationTranscriber = { "InterpretationTranscriber", 0x4008010A, {1, 1}, VRType::PN, false };
    const tag InterpretationTranscriptionDate = { "InterpretationTranscriptionDate", 0x40080108, {1, 1}, VRType::DA, false };
    const tag InterpretationTranscriptionTime = { "InterpretationTranscriptionTime", 0x40080109, {1, 1}, VRType::TM, false };
    const tag InterpretationTypeID = { "InterpretationTypeID", 0x40080210, {1, 1}, VRType::CS, false };
    const tag IntervalNumber = { "IntervalNumber", 0x00200016, {1, 1}, VRType::IS, false };
    const tag IntervalsAcquired = { "IntervalsAcquired", 0x00181083, {1, 1}, VRType::IS, false };
    const tag IntervalsRejected = { "IntervalsRejected", 0x00181084, {1, 1}, VRType::IS, false };
    const tag InterventionDescription = { "InterventionDescription", 0x0018003A, {1, 1}, VRType::ST, false };
    const tag InterventionDrugCodeSequence = { "InterventionDrugCodeSequence", 0x00180029, {1, 1}, VRType::SQ, false };
    const tag InterventionDrugDose = { "InterventionDrugDose", 0x00180028, {1, 1}, VRType::DS, false };
    const tag InterventionDrugInformationSequence = { "InterventionDrugInformationSequence", 0x00180026, {1, 1}, VRType::SQ, false };
    const tag InterventionDrugName = { "InterventionDrugName", 0x00180034, {1, 1}, VRType::LO, false };
    const tag InterventionDrugStartTime = { "InterventionDrugStartTime", 0x00180035, {1, 1}, VRType::TM, false };
    const tag InterventionDrugStopTime = { "InterventionDrugStopTime", 0x00180027, {1, 1}, VRType::TM, false };
    const tag InterventionSequence = { "InterventionSequence", 0x00180036, {1, 1}, VRType::SQ, false };
    const tag InterventionStatus = { "InterventionStatus", 0x00180038, {1, 1}, VRType::CS, false };
    const tag IntraocularLensCalculationsLeftEyeSequence = { "IntraocularLensCalculationsLeftEyeSequence", 0x00221310, {1, 1}, VRType::SQ, false };
    const tag IntraocularLensCalculationsRightEyeSequence = { "IntraocularLensCalculationsRightEyeSequence", 0x00221300, {1, 1}, VRType::SQ, false };
    const tag IntraOcularPressure = { "IntraOcularPressure", 0x0022000B, {1, 1}, VRType::FL, false };
    const tag IntravascularFrameContentSequence = { "IntravascularFrameContentSequence", 0x00520027, {1, 1}, VRType::SQ, false };
    const tag IntravascularLongitudinalDistance = { "IntravascularLongitudinalDistance", 0x00520028, {1, 1}, VRType::FD, false };
    const tag IntravascularOCTFrameContentSequence = { "IntravascularOCTFrameContentSequence", 0x00520029, {1, 1}, VRType::SQ, false };
    const tag IntravascularOCTFrameTypeSequence = { "IntravascularOCTFrameTypeSequence", 0x00520025, {1, 1}, VRType::SQ, false };
    const tag InversionRecovery = { "InversionRecovery", 0x00189009, {1, 1}, VRType::CS, false };
    const tag InversionTime = { "InversionTime", 0x00180082, {1, 1}, VRType::DS, false };
    const tag InversionTimes = { "InversionTimes", 0x00189079, {1, 1}, VRType::FD, false };
    const tag IOLFormulaCodeSequence = { "IOLFormulaCodeSequence", 0x00221028, {1, 1}, VRType::SQ, false };
    const tag IOLFormulaDetail = { "IOLFormulaDetail", 0x00221029, {1, 1}, VRType::LO, false };
    const tag IOLManufacturer = { "IOLManufacturer", 0x00221093, {1, 1}, VRType::LO, false };
    const tag IOLPower = { "IOLPower", 0x00221053, {1, 1}, VRType::FL, false };
    const tag IOLPowerForExactEmmetropia = { "IOLPowerForExactEmmetropia", 0x00221121, {1, 1}, VRType::FL, false };
    const tag IOLPowerForExactTargetRefraction = { "IOLPowerForExactTargetRefraction", 0x00221122, {1, 1}, VRType::FL, false };
    const tag IOLPowerSequence = { "IOLPowerSequence", 0x00221090, {1, 1}, VRType::SQ, false };
    const tag IonBeamLimitingDeviceSequence = { "IonBeamLimitingDeviceSequence", 0x300A03A4, {1, 1}, VRType::SQ, false };
    const tag IonBeamSequence = { "IonBeamSequence", 0x300A03A2, {1, 1}, VRType::SQ, false };
    const tag IonBlockSequence = { "IonBlockSequence", 0x300A03A6, {1, 1}, VRType::SQ, false };
    const tag IonControlPointDeliverySequence = { "IonControlPointDeliverySequence", 0x30080041, {1, 1}, VRType::SQ, false };
    const tag IonControlPointSequence = { "IonControlPointSequence", 0x300A03A8, {1, 1}, VRType::SQ, false };
    const tag IonControlPointVerificationSequence = { "IonControlPointVerificationSequence", 0x0074104E, {1, 1}, VRType::SQ, false };
    const tag IonMachineVerificationSequence = { "IonMachineVerificationSequence", 0x00741046, {1, 1}, VRType::SQ, false };
    const tag IonRangeCompensatorSequence = { "IonRangeCompensatorSequence", 0x300A02EA, {1, 1}, VRType::SQ, false };
    const tag IonToleranceTableSequence = { "IonToleranceTableSequence", 0x300A03A0, {1, 1}, VRType::SQ, false };
    const tag IonWedgePositionSequence = { "IonWedgePositionSequence", 0x300A03AC, {1, 1}, VRType::SQ, false };
    const tag IonWedgeSequence = { "IonWedgeSequence", 0x300A03AA, {1, 1}, VRType::SQ, false };
    const tag IrradiationEventIdentificationSequence = { "IrradiationEventIdentificationSequence", 0x00189477, {1, 1}, VRType::SQ, false };
    const tag IrradiationEventUID = { "IrradiationEventUID", 0x00083010, {1, 1}, VRType::UI, false };
    const tag IsocenterPosition = { "IsocenterPosition", 0x300A012C, {3, 3}, VRType::DS, false };
    const tag IsocenterReferenceSystemSequence = { "IsocenterReferenceSystemSequence", 0x00189462, {1, 1}, VRType::SQ, false };
    const tag IsocenterToBeamLimitingDeviceDistance = { "IsocenterToBeamLimitingDeviceDistance", 0x300A00BB, {1, 1}, VRType::FL, false };
    const tag IsocenterToBlockTrayDistance = { "IsocenterToBlockTrayDistance", 0x300A00F7, {1, 1}, VRType::FL, false };
    const tag IsocenterToCompensatorDistances = { "IsocenterToCompensatorDistances", 0x300A02E6, {1, 1}, VRType::FL, false };
    const tag IsocenterToCompensatorTrayDistance = { "IsocenterToCompensatorTrayDistance", 0x300A02E4, {1, 1}, VRType::FL, false };
    const tag IsocenterToLateralSpreadingDeviceDistance = { "IsocenterToLateralSpreadingDeviceDistance", 0x300A0374, {1, 1}, VRType::FL, false };
    const tag IsocenterToRangeModulatorDistance = { "IsocenterToRangeModulatorDistance", 0x300A038A, {1, 1}, VRType::FL, false };
    const tag IsocenterToRangeShifterDistance = { "IsocenterToRangeShifterDistance", 0x300A0364, {1, 1}, VRType::FL, false };
    const tag IsocenterToWedgeTrayDistance = { "IsocenterToWedgeTrayDistance", 0x300A00D9, {1, 1}, VRType::FL, false };
    const tag IsotopeNumber = { "IsotopeNumber", 0x00200014, {1, 1}, VRType::IS, false };
    const tag IssueDateOfImagingServiceRequest = { "IssueDateOfImagingServiceRequest", 0x00402004, {1, 1}, VRType::DA, false };
    const tag IssuerOfAccessionNumberSequence = { "IssuerOfAccessionNumberSequence", 0x00080051, {1, 1}, VRType::SQ, false };
    const tag IssuerOfAdmissionID = { "IssuerOfAdmissionID", 0x00380011, {1, 1}, VRType::LO, false };
    const tag IssuerOfAdmissionIDSequence = { "IssuerOfAdmissionIDSequence", 0x00380014, {1, 1}, VRType::SQ, false };
    const tag IssuerOfPatientID = { "IssuerOfPatientID", 0x00100021, {1, 1}, VRType::LO, false };
    const tag IssuerOfPatientIDQualifiersSequence = { "IssuerOfPatientIDQualifiersSequence", 0x00100024, {1, 1}, VRType::SQ, false };
    const tag IssuerOfServiceEpisodeID = { "IssuerOfServiceEpisodeID", 0x00380061, {1, 1}, VRType::LO, false };
    const tag IssuerOfServiceEpisodeIDSequence = { "IssuerOfServiceEpisodeIDSequence", 0x00380064, {1, 1}, VRType::SQ, false };
    const tag IssuerOfTheContainerIdentifierSequence = { "IssuerOfTheContainerIdentifierSequence", 0x00400513, {1, 1}, VRType::SQ, false };
    const tag IssuerOfTheSpecimenIdentifierSequence = { "IssuerOfTheSpecimenIdentifierSequence", 0x00400562, {1, 1}, VRType::SQ, false };
    const tag IssueTimeOfImagingServiceRequest = { "IssueTimeOfImagingServiceRequest", 0x00402005, {1, 1}, VRType::TM, false };
    const tag Italic = { "Italic", 0x00700250, {1, 1}, VRType::CS, false };
    const tag ItemNumber = { "ItemNumber", 0x00200019, {1, 1}, VRType::IS, false };
    const tag IterativeReconstructionMethod = { "IterativeReconstructionMethod", 0x00189769, {1, 1}, VRType::CS, false };
    const tag ItineraryID = { "ItineraryID", 0x40101051, {1, 1}, VRType::LO, false };
    const tag ItineraryIDAssigningAuthority = { "ItineraryIDAssigningAuthority", 0x40101053, {1, 1}, VRType::LO, false };
    const tag ItineraryIDType = { "ItineraryIDType", 0x40101052, {1, 1}, VRType::SH, false };
    const tag IVUSAcquisition = { "IVUSAcquisition", 0x00183100, {1, 1}, VRType::CS, false };
    const tag IVUSGatedRate = { "IVUSGatedRate", 0x00183102, {1, 1}, VRType::DS, false };
    const tag IVUSPullbackRate = { "IVUSPullbackRate", 0x00183101, {1, 1}, VRType::DS, false };
    const tag IVUSPullbackStartFrameNumber = { "IVUSPullbackStartFrameNumber", 0x00183103, {1, 1}, VRType::IS, false };
    const tag IVUSPullbackStopFrameNumber = { "IVUSPullbackStopFrameNumber", 0x00183104, {1, 1}, VRType::IS, false };
    const tag KeratoconusPredictionIndex = { "KeratoconusPredictionIndex", 0x00460236, {1, 1}, VRType::FL, false };
    const tag KeratometerIndex = { "KeratometerIndex", 0x00221033, {1, 1}, VRType::FL, false };
    const tag KeratometricAxis = { "KeratometricAxis", 0x00460077, {1, 1}, VRType::FD, false };
    const tag KeratometricPower = { "KeratometricPower", 0x00460076, {1, 1}, VRType::FD, false };
    const tag KeratometryLeftEyeSequence = { "KeratometryLeftEyeSequence", 0x00460071, {1, 1}, VRType::SQ, false };
    const tag KeratometryMeasurementTypeCodeSequence = { "KeratometryMeasurementTypeCodeSequence", 0x00221096, {1, 1}, VRType::SQ, false };
    const tag KeratometryRightEyeSequence = { "KeratometryRightEyeSequence", 0x00460070, {1, 1}, VRType::SQ, false };
    const tag KSpaceFiltering = { "KSpaceFiltering", 0x00189064, {1, 1}, VRType::CS, false };
    const tag KVP = { "KVP", 0x00180060, {1, 1}, VRType::DS, false };
    const tag KVUsedInGainCalibration = { "KVUsedInGainCalibration", 0x00143071, {1, 1}, VRType::DS, false };
    const tag LabelStyleSelection = { "LabelStyleSelection", 0x22000003, {1, 1}, VRType::CS, false };
    const tag LabelText = { "LabelText", 0x22000002, {1, 1}, VRType::UT, false };
    const tag LabelUsingInformationExtractedFromInstances = { "LabelUsingInformationExtractedFromInstances", 0x22000001, {1, 1}, VRType::CS, false };
    const tag LanguageCodeSequence = { "LanguageCodeSequence", 0x00080006, {1, 1}, VRType::SQ, false };
    const tag LanguageCodeSequenceTrial = { "LanguageCodeSequenceTrial", 0x0040A744, {1, 1}, VRType::SQ, false };
    const tag LargeBluePaletteColorLookupTableData = { "LargeBluePaletteColorLookupTableData", 0x00281213, {1, 1}, VRType::OW, false };
    const tag LargeBluePaletteColorLookupTableDescriptor = { "LargeBluePaletteColorLookupTableDescriptor", 0x00281113, {4, 4}, VRType::US, true };
    const tag LargeGreenPaletteColorLookupTableData = { "LargeGreenPaletteColorLookupTableData", 0x00281212, {1, 1}, VRType::OW, false };
    const tag LargeGreenPaletteColorLookupTableDescriptor = { "LargeGreenPaletteColorLookupTableDescriptor", 0x00281112, {4, 4}, VRType::US, true };
    const tag LargePaletteColorLookupTableUID = { "LargePaletteColorLookupTableUID", 0x00281214, {1, 1}, VRType::UI, false };
    const tag LargeRedPaletteColorLookupTableData = { "LargeRedPaletteColorLookupTableData", 0x00281211, {1, 1}, VRType::OW, false };
    const tag LargeRedPaletteColorLookupTableDescriptor = { "LargeRedPaletteColorLookupTableDescriptor", 0x00281111, {4, 4}, VRType::US, true };
    const tag LargestImagePixelValue = { "LargestImagePixelValue", 0x00280107, {1, 1}, VRType::US, true };
    const tag LargestImagePixelValueInPlane = { "LargestImagePixelValueInPlane", 0x00280111, {1, 1}, VRType::US, true };
    const tag LargestMonochromePixelValue = { "LargestMonochromePixelValue", 0x00289099, {1, 1}, VRType::US, false };
    const tag LargestPixelValueInSeries = { "LargestPixelValueInSeries", 0x00280109, {1, 1}, VRType::US, true };
    const tag LargestValidPixelValue = { "LargestValidPixelValue", 0x00280105, {1, 1}, VRType::US, true };
    const tag LastMenstrualDate = { "LastMenstrualDate", 0x001021D0, {1, 1}, VRType::DA, false };
    const tag Laterality = { "Laterality", 0x00200060, {1, 1}, VRType::CS, false };
    const tag LateralSpreadingDeviceDescription = { "LateralSpreadingDeviceDescription", 0x300A033A, {1, 1}, VRType::LO, false };
    const tag LateralSpreadingDeviceID = { "LateralSpreadingDeviceID", 0x300A0336, {1, 1}, VRType::SH, false };
    const tag LateralSpreadingDeviceNumber = { "LateralSpreadingDeviceNumber", 0x300A0334, {1, 1}, VRType::IS, false };
    const tag LateralSpreadingDeviceSequence = { "LateralSpreadingDeviceSequence", 0x300A0332, {1, 1}, VRType::SQ, false };
    const tag LateralSpreadingDeviceSetting = { "LateralSpreadingDeviceSetting", 0x300A0372, {1, 1}, VRType::LO, false };
    const tag LateralSpreadingDeviceSettingsSequence = { "LateralSpreadingDeviceSettingsSequence", 0x300A0370, {1, 1}, VRType::SQ, false };
    const tag LateralSpreadingDeviceType = { "LateralSpreadingDeviceType", 0x300A0338, {1, 1}, VRType::CS, false };
    const tag LateralSpreadingDeviceWaterEquivalentThickness = { "LateralSpreadingDeviceWaterEquivalentThickness", 0x300A033C, {1, 1}, VRType::FL, false };
    const tag LeafJawPositions = { "LeafJawPositions", 0x300A011C, {2, 2}, VRType::DS, false };
    const tag LeafPositionBoundaries = { "LeafPositionBoundaries", 0x300A00BE, {3, 3}, VRType::DS, false };
    const tag LeftImageSequence = { "LeftImageSequence", 0x00220021, {1, 1}, VRType::SQ, false };
    const tag LeftLensSequence = { "LeftLensSequence", 0x00460015, {1, 1}, VRType::SQ, false };
    const tag LengthToEnd = { "LengthToEnd", 0x00080001, {1, 1}, VRType::UL, false };
    const tag LensConstantDescription = { "LensConstantDescription", 0x00221094, {1, 1}, VRType::LO, false };
    const tag LensConstantSequence = { "LensConstantSequence", 0x00221092, {1, 1}, VRType::SQ, false };
    const tag LensDescription = { "LensDescription", 0x00460012, {1, 1}, VRType::LO, false };
    const tag LensesCodeSequence = { "LensesCodeSequence", 0x00220019, {1, 1}, VRType::SQ, false };
    const tag LensSegmentType = { "LensSegmentType", 0x00460038, {1, 1}, VRType::CS, false };
    const tag LensStatusCodeSequence = { "LensStatusCodeSequence", 0x00221024, {1, 1}, VRType::SQ, false };
    const tag LensStatusDescription = { "LensStatusDescription", 0x00221065, {1, 1}, VRType::LO, false };
    const tag LensThickness = { "LensThickness", 0x00221130, {1, 1}, VRType::FL, false };
    const tag LensThicknessSequence = { "LensThicknessSequence", 0x00221127, {1, 1}, VRType::SQ, false };
    const tag LesionNumber = { "LesionNumber", 0x00183105, {1, 1}, VRType::IS, false };
    const tag LightDirection = { "LightDirection", 0x00701703, {3, 3}, VRType::FD, false };
    const tag LightPathFilterPassBand = { "LightPathFilterPassBand", 0x00220002, {2, 2}, VRType::US, false };
    const tag LightPathFilterPassThroughWavelength = { "LightPathFilterPassThroughWavelength", 0x00220001, {1, 1}, VRType::US, false };
    const tag LightPathFilterTypeStackCodeSequence = { "LightPathFilterTypeStackCodeSequence", 0x00220017, {1, 1}, VRType::SQ, false };
    const tag LINACEnergy = { "LINACEnergy", 0x00145002, {1, 1}, VRType::IS, false };
    const tag LINACOutput = { "LINACOutput", 0x00145004, {1, 1}, VRType::IS, false };
    const tag LineDashingStyle = { "LineDashingStyle", 0x00700254, {1, 1}, VRType::CS, false };
    const tag LinePattern = { "LinePattern", 0x00700255, {1, 1}, VRType::UL, false };
    const tag LineSequence = { "LineSequence", 0x00660028, {1, 1}, VRType::SQ, false };
    const tag LineStyleSequence = { "LineStyleSequence", 0x00700232, {1, 1}, VRType::SQ, false };
    const tag LineThickness = { "LineThickness", 0x00700253, {1, 1}, VRType::FL, false };
    const tag ListOfMIMETypes = { "ListOfMIMETypes", 0x00420014, {1, 1}, VRType::LO, false };
    const tag LocalDeviationProbabilityNormalsFlag = { "LocalDeviationProbabilityNormalsFlag", 0x00240072, {1, 1}, VRType::CS, false };
    const tag LocalizedDeviationFromNormal = { "LocalizedDeviationFromNormal", 0x00240068, {1, 1}, VRType::FL, false };
    const tag LocalizedDeviationProbability = { "LocalizedDeviationProbability", 0x00240073, {1, 1}, VRType::FL, false };
    const tag LocalizedDeviationProbabilitySequence = { "LocalizedDeviationProbabilitySequence", 0x00240085, {1, 1}, VRType::SQ, false };
    const tag LocalizingCursorPosition = { "LocalizingCursorPosition", 0x00182043, {2, 2}, VRType::FL, false };
    const tag LocalNamespaceEntityID = { "LocalNamespaceEntityID", 0x00400031, {1, 1}, VRType::UT, false };
    const tag Location = { "Location", 0x00200050, {1, 1}, VRType::DS, false };
    const tag LocationOfMeasuredBeamDiameter = { "LocationOfMeasuredBeamDiameter", 0x00144019, {1, 1}, VRType::DS, false };
    const tag LongCodeValue = { "LongCodeValue", 0x00080119, {1, 1}, VRType::UC, false };
    const tag LongEdgePointIndexList = { "LongEdgePointIndexList", 0x00660042, {1, 1}, VRType::OL, false };
    const tag LongitudinalTemporalEventType = { "LongitudinalTemporalEventType", 0x00120053, {1, 1}, VRType::CS, false };
    const tag LongitudinalTemporalInformationModified = { "LongitudinalTemporalInformationModified", 0x00280303, {1, 1}, VRType::CS, false };
    const tag LongitudinalTemporalOffsetFromEvent = { "LongitudinalTemporalOffsetFromEvent", 0x00120052, {1, 1}, VRType::FD, false };
    const tag LongPrimitivePointIndexList = { "LongPrimitivePointIndexList", 0x00660040, {1, 1}, VRType::OL, false };
    const tag LongTrianglePointIndexList = { "LongTrianglePointIndexList", 0x00660041, {1, 1}, VRType::OL, false };
    const tag LongVertexPointIndexList = { "LongVertexPointIndexList", 0x00660043, {1, 1}, VRType::OL, false };
    const tag LossyImageCompression = { "LossyImageCompression", 0x00282110, {1, 1}, VRType::CS, false };
    const tag LossyImageCompressionMethod = { "LossyImageCompressionMethod", 0x00282114, {1, 1}, VRType::CS, false };
    const tag LossyImageCompressionRatio = { "LossyImageCompressionRatio", 0x00282112, {1, 1}, VRType::DS, false };
    const tag LossyImageCompressionRetired = { "LossyImageCompressionRetired", 0x00082110, {1, 1}, VRType::CS, false };
    const tag LowEnergyDetectors = { "LowEnergyDetectors", 0x40100001, {1, 1}, VRType::CS, false };
    const tag LowRRValue = { "LowRRValue", 0x00181081, {1, 1}, VRType::IS, false };
    const tag LuminanceCharacteristicsID = { "LuminanceCharacteristicsID", 0x00287009, {1, 1}, VRType::US, false };
    const tag LuminanceResponseDescription = { "LuminanceResponseDescription", 0x00287020, {1, 1}, VRType::LO, false };
    const tag LuminanceResponseSequence = { "LuminanceResponseSequence", 0x0028701C, {1, 1}, VRType::SQ, false };
    const tag LuminanceResultSequence = { "LuminanceResultSequence", 0x00287024, {1, 1}, VRType::SQ, false };
    const tag LuminanceUniformityResultSequence = { "LuminanceUniformityResultSequence", 0x00287027, {1, 1}, VRType::SQ, false };
    const tag LuminanceValue = { "LuminanceValue", 0x0028701F, {1, 1}, VRType::FL, false };
    const tag LUTData = { "LUTData", 0x00283006, {1, 1}, VRType::US, true };
    const tag LUTDescriptor = { "LUTDescriptor", 0x00283002, {3, 3}, VRType::US, true };
    const tag LUTExplanation = { "LUTExplanation", 0x00283003, {1, 1}, VRType::LO, false };
    const tag LUTFrameRange = { "LUTFrameRange", 0x00289507, {2, 2}, VRType::US, false };
    const tag LUTFunction = { "LUTFunction", 0x00289474, {1, 1}, VRType::CS, false };
    const tag LUTLabel = { "LUTLabel", 0x00409210, {1, 1}, VRType::SH, false };
    const tag LUTNumber = { "LUTNumber", 0x00200026, {1, 1}, VRType::IS, false };
    const tag MAC = { "MAC", 0x04000404, {1, 1}, VRType::OB, false };
    const tag MACAlgorithm = { "MACAlgorithm", 0x04000015, {1, 1}, VRType::CS, false };
    const tag MACCalculationTransferSyntaxUID = { "MACCalculationTransferSyntaxUID", 0x04000010, {1, 1}, VRType::UI, false };
    const tag MACIDNumber = { "MACIDNumber", 0x04000005, {1, 1}, VRType::US, false };
    const tag MACParametersSequence = { "MACParametersSequence", 0x4FFE0001, {1, 1}, VRType::SQ, false };
    const tag MagneticFieldStrength = { "MagneticFieldStrength", 0x00180087, {1, 1}, VRType::DS, false };
    const tag MagnetizationTransfer = { "MagnetizationTransfer", 0x00189020, {1, 1}, VRType::CS, false };
    const tag MagnificationType = { "MagnificationType", 0x20100060, {1, 1}, VRType::CS, false };
    const tag MagnifyToNumberOfColumns = { "MagnifyToNumberOfColumns", 0x20400074, {1, 1}, VRType::US, false };
    const tag MainLobeAngle = { "MainLobeAngle", 0x00145103, {1, 1}, VRType::DS, false };
    const tag MainRoofAngle = { "MainRoofAngle", 0x00145104, {1, 1}, VRType::DS, false };
    const tag MajorTicksSequence = { "MajorTicksSequence", 0x00700287, {1, 1}, VRType::SQ, false };
    const tag MandatoryComponentType = { "MandatoryComponentType", 0x00760038, {1, 1}, VRType::CS, false };
    const tag Manifold = { "Manifold", 0x00660010, {1, 1}, VRType::CS, false };
    const tag ManipulatedImage = { "ManipulatedImage", 0x00280050, {1, 1}, VRType::LO, false };
    const tag Manufacturer = { "Manufacturer", 0x00080070, {1, 1}, VRType::LO, false };
    const tag ManufacturerModelName = { "ManufacturerModelName", 0x00081090, {1, 1}, VRType::LO, false };
    const tag ManufacturerRelatedModelGroup = { "ManufacturerRelatedModelGroup", 0x00080222, {1, 1}, VRType::LO, false };
    const tag MappedPixelValue = { "MappedPixelValue", 0x00221452, {1, 1}, VRType::US, true };
    const tag MappingResource = { "MappingResource", 0x00080105, {1, 1}, VRType::CS, false };
    const tag MappingResourceIdentificationSequence = { "MappingResourceIdentificationSequence", 0x00080124, {1, 1}, VRType::SQ, false };
    const tag MappingResourceName = { "MappingResourceName", 0x00080122, {1, 1}, VRType::LO, false };
    const tag MappingResourceUID = { "MappingResourceUID", 0x00080118, {1, 1}, VRType::UI, false };
    const tag MaskFrameNumbers = { "MaskFrameNumbers", 0x00286110, {1, 1}, VRType::US, false };
    const tag MaskingImage = { "MaskingImage", 0x00200080, {1, 1}, VRType::CS, false };
    const tag MaskOperation = { "MaskOperation", 0x00286101, {1, 1}, VRType::CS, false };
    const tag MaskOperationExplanation = { "MaskOperationExplanation", 0x00286190, {1, 1}, VRType::ST, false };
    const tag MaskPointers = { "MaskPointers", 0x00286030, {1, 1}, VRType::US, false };
    const tag MaskSelectionMode = { "MaskSelectionMode", 0x00289454, {1, 1}, VRType::CS, false };
    const tag MaskSubPixelShift = { "MaskSubPixelShift", 0x00286114, {2, 2}, VRType::FL, false };
    const tag MaskSubtractionSequence = { "MaskSubtractionSequence", 0x00286100, {1, 1}, VRType::SQ, false };
    const tag MaskVisibilityPercentage = { "MaskVisibilityPercentage", 0x00289478, {1, 1}, VRType::FL, false };
    const tag Mass = { "Mass", 0x40101017, {1, 1}, VRType::FL, false };
    const tag MaterialGrade = { "MaterialGrade", 0x00140042, {1, 1}, VRType::ST, false };
    const tag MaterialID = { "MaterialID", 0x300A00E1, {1, 1}, VRType::SH, false };
    const tag MaterialIsolationDiameter = { "MaterialIsolationDiameter", 0x00140034, {1, 1}, VRType::DS, false };
    const tag MaterialNotes = { "MaterialNotes", 0x00140046, {1, 1}, VRType::LT, false };
    const tag MaterialPipeDiameter = { "MaterialPipeDiameter", 0x00140032, {1, 1}, VRType::DS, false };
    const tag MaterialPropertiesDescription = { "MaterialPropertiesDescription", 0x00140044, {1, 1}, VRType::ST, false };
    const tag MaterialPropertiesFileFormatRetired = { "MaterialPropertiesFileFormatRetired", 0x00140045, {1, 1}, VRType::ST, false };
    const tag MaterialsCodeSequence = { "MaterialsCodeSequence", 0x006863A0, {1, 1}, VRType::SQ, false };
    const tag MaterialThickness = { "MaterialThickness", 0x00140030, {1, 1}, VRType::DS, false };
    const tag MatingFeatureDegreeOfFreedomSequence = { "MatingFeatureDegreeOfFreedomSequence", 0x00686400, {1, 1}, VRType::SQ, false };
    const tag MatingFeatureID = { "MatingFeatureID", 0x006863F0, {1, 1}, VRType::US, false };
    const tag MatingFeatureSequence = { "MatingFeatureSequence", 0x006863E0, {1, 1}, VRType::SQ, false };
    const tag MatingFeatureSetID = { "MatingFeatureSetID", 0x006863C0, {1, 1}, VRType::US, false };
    const tag MatingFeatureSetLabel = { "MatingFeatureSetLabel", 0x006863D0, {1, 1}, VRType::LO, false };
    const tag MatingFeatureSetsSequence = { "MatingFeatureSetsSequence", 0x006863B0, {1, 1}, VRType::SQ, false };
    const tag MatrixRegistrationSequence = { "MatrixRegistrationSequence", 0x00700309, {1, 1}, VRType::SQ, false };
    const tag MatrixSequence = { "MatrixSequence", 0x0070030A, {1, 1}, VRType::SQ, false };
    const tag MAUsedInGainCalibration = { "MAUsedInGainCalibration", 0x00143072, {1, 1}, VRType::DS, false };
    const tag MaxDensity = { "MaxDensity", 0x20100130, {1, 1}, VRType::US, false };
    const tag MaximumAcrossScanDistortion = { "MaximumAcrossScanDistortion", 0x00220049, {1, 1}, VRType::FL, false };
    const tag MaximumAlongScanDistortion = { "MaximumAlongScanDistortion", 0x00220038, {1, 1}, VRType::FL, false };
    const tag MaximumCollatedFilms = { "MaximumCollatedFilms", 0x20100154, {1, 1}, VRType::IS, false };
    const range_tag MaximumCoordinateValue = { "MaximumCoordinateValue", 0x50000105, 0x50FF0105, 0x00010000, {1, 1}, VRType::US, false };
    const tag MaximumCornealCurvature = { "MaximumCornealCurvature", 0x00460212, {1, 1}, VRType::FL, false };
    const tag MaximumCornealCurvatureLocation = { "MaximumCornealCurvatureLocation", 0x00460213, {2, 2}, VRType::FL, false };
    const tag MaximumCornealCurvatureSequence = { "MaximumCornealCurvatureSequence", 0x00460211, {1, 1}, VRType::SQ, false };
    const tag MaximumDepthDistortion = { "MaximumDepthDistortion", 0x00220036, {1, 1}, VRType::FL, false };
    const tag MaximumFractionalValue = { "MaximumFractionalValue", 0x0062000E, {1, 1}, VRType::US, false };
    const tag MaximumMemoryAllocation = { "MaximumMemoryAllocation", 0x20000061, {1, 1}, VRType::IS, false };
    const tag MaximumPointDistance = { "MaximumPointDistance", 0x00660019, {1, 1}, VRType::FL, false };
    const tag MaximumStimulusLuminance = { "MaximumStimulusLuminance", 0x00240018, {1, 1}, VRType::FL, false };
    const tag MaximumStoredValueMapped = { "MaximumStoredValueMapped", 0x00281232, {1, 1}, VRType::FD, false };
    const tag MeanPointDistance = { "MeanPointDistance", 0x00660018, {1, 1}, VRType::FL, false };
    const tag MeasuredAPDimension = { "MeasuredAPDimension", 0x00101023, {1, 1}, VRType::DS, false };
    const tag MeasuredBandwidth = { "MeasuredBandwidth", 0x0014401C, {1, 1}, VRType::DS, false };
    const tag MeasuredBeamDimensionA = { "MeasuredBeamDimensionA", 0x00144017, {1, 1}, VRType::DS, false };
    const tag MeasuredBeamDimensionB = { "MeasuredBeamDimensionB", 0x00144018, {1, 1}, VRType::DS, false };
    const tag MeasuredCenterFrequency = { "MeasuredCenterFrequency", 0x0014401B, {1, 1}, VRType::DS, false };
    const tag MeasuredCharacteristics = { "MeasuredCharacteristics", 0x00287026, {1, 1}, VRType::CS, false };
    const tag MeasuredDoseDescription = { "MeasuredDoseDescription", 0x30080012, {1, 1}, VRType::ST, false };
    const tag MeasuredDoseReferenceNumber = { "MeasuredDoseReferenceNumber", 0x30080064, {1, 1}, VRType::IS, false };
    const tag MeasuredDoseReferenceSequence = { "MeasuredDoseReferenceSequence", 0x30080010, {1, 1}, VRType::SQ, false };
    const tag MeasuredDoseType = { "MeasuredDoseType", 0x30080014, {1, 1}, VRType::CS, false };
    const tag MeasuredDoseValue = { "MeasuredDoseValue", 0x30080016, {1, 1}, VRType::DS, false };
    const tag MeasuredLateralDimension = { "MeasuredLateralDimension", 0x00101024, {1, 1}, VRType::DS, false };
    const tag MeasuredValueSequence = { "MeasuredValueSequence", 0x0040A300, {1, 1}, VRType::SQ, false };
    const tag MeasurementAutomationTrial = { "MeasurementAutomationTrial", 0x0040A194, {1, 1}, VRType::CS, false };
    const tag MeasurementEquipmentSequence = { "MeasurementEquipmentSequence", 0x00287012, {1, 1}, VRType::SQ, false };
    const tag MeasurementEquipmentType = { "MeasurementEquipmentType", 0x00287014, {1, 1}, VRType::CS, false };
    const tag MeasurementFunctions = { "MeasurementFunctions", 0x00287013, {1, 1}, VRType::CS, false };
    const tag MeasurementLaterality = { "MeasurementLaterality", 0x00240113, {1, 1}, VRType::CS, false };
    const tag MeasurementPatternCodeSequence = { "MeasurementPatternCodeSequence", 0x0028702D, {1, 1}, VRType::SQ, false };
    const tag MeasurementPrecisionDescriptionTrial = { "MeasurementPrecisionDescriptionTrial", 0x0040A047, {1, 1}, VRType::LO, false };
    const tag MeasurementsSequence = { "MeasurementsSequence", 0x00660121, {1, 1}, VRType::SQ, false };
    const tag MeasurementUnitsCodeSequence = { "MeasurementUnitsCodeSequence", 0x004008EA, {1, 1}, VRType::SQ, false };
    const tag MeasurementValuesSequence = { "MeasurementValuesSequence", 0x00660132, {1, 1}, VRType::SQ, false };
    const tag MeasuringUnitsSequence = { "MeasuringUnitsSequence", 0x00400295, {1, 1}, VRType::SQ, false };
    const tag MechanicalIndex = { "MechanicalIndex", 0x00185022, {1, 1}, VRType::DS, false };
    const tag MediaDisposition = { "MediaDisposition", 0x22000004, {1, 1}, VRType::LT, false };
    const tag MediaInstalledSequence = { "MediaInstalledSequence", 0x200000A2, {1, 1}, VRType::SQ, false };
    const tag MediaStorageSOPClassUID = { "MediaStorageSOPClassUID", 0x00020002, {1, 1}, VRType::UI, false };
    const tag MediaStorageSOPInstanceUID = { "MediaStorageSOPInstanceUID", 0x00020003, {1, 1}, VRType::UI, false };
    const tag MedicalAlerts = { "MedicalAlerts", 0x00102000, {1, 1}, VRType::LO, false };
    const tag MedicalRecordLocator = { "MedicalRecordLocator", 0x00101090, {1, 1}, VRType::LO, false };
    const tag MediumType = { "MediumType", 0x20000030, {1, 1}, VRType::CS, false };
    const tag MemoryAllocation = { "MemoryAllocation", 0x20000060, {1, 1}, VRType::IS, false };
    const tag MemoryBitDepth = { "MemoryBitDepth", 0x200000A0, {1, 1}, VRType::US, false };
    const tag MetaboliteMapCodeSequence = { "MetaboliteMapCodeSequence", 0x00189083, {1, 1}, VRType::SQ, false };
    const tag MetaboliteMapDescription = { "MetaboliteMapDescription", 0x00189080, {1, 1}, VRType::ST, false };
    const tag MetersetExposure = { "MetersetExposure", 0x30020032, {1, 1}, VRType::DS, false };
    const tag MetersetRate = { "MetersetRate", 0x300A035A, {1, 1}, VRType::FL, false };
    const tag MetersetRateDelivered = { "MetersetRateDelivered", 0x30080046, {1, 1}, VRType::FL, false };
    const tag MetersetRateSet = { "MetersetRateSet", 0x30080045, {1, 1}, VRType::FL, false };
    const tag MidSlabPosition = { "MidSlabPosition", 0x00189106, {3, 3}, VRType::FD, false };
    const tag MilitaryRank = { "MilitaryRank", 0x00101080, {1, 1}, VRType::LO, false };
    const tag MIMETypeOfEncapsulatedDocument = { "MIMETypeOfEncapsulatedDocument", 0x00420012, {1, 1}, VRType::LO, false };
    const tag MinDensity = { "MinDensity", 0x20100120, {1, 1}, VRType::US, false };
    const range_tag MinimumCoordinateValue = { "MinimumCoordinateValue", 0x50000104, 0x50FF0104, 0x00010000, {1, 1}, VRType::US, false };
    const tag MinimumKeratometricSequence = { "MinimumKeratometricSequence", 0x00460215, {1, 1}, VRType::SQ, false };
    const tag MinimumSensitivityValue = { "MinimumSensitivityValue", 0x00240105, {1, 1}, VRType::FL, false };
    const tag MinimumStoredValueMapped = { "MinimumStoredValueMapped", 0x00281231, {1, 1}, VRType::FD, false };
    const tag ModalitiesInStudy = { "ModalitiesInStudy", 0x00080061, {1, 1}, VRType::CS, false };
    const tag Modality = { "Modality", 0x00080060, {1, 1}, VRType::CS, false };
    const tag ModalityLUTSequence = { "ModalityLUTSequence", 0x00283000, {1, 1}, VRType::SQ, false };
    const tag ModalityLUTType = { "ModalityLUTType", 0x00283004, {1, 1}, VRType::LO, false };
    const tag ModelMirroring = { "ModelMirroring", 0x00687002, {1, 1}, VRType::CS, false };
    const tag ModelModification = { "ModelModification", 0x00687001, {1, 1}, VRType::CS, false };
    const tag ModelSpecificationSequence = { "ModelSpecificationSequence", 0x00189912, {1, 1}, VRType::SQ, false };
    const tag ModelUsageCodeSequence = { "ModelUsageCodeSequence", 0x00687003, {1, 1}, VRType::SQ, false };
    const tag ModeOfPercutaneousAccessSequence = { "ModeOfPercutaneousAccessSequence", 0x00520016, {1, 1}, VRType::SQ, false };
    const tag ModifiableConstraintFlag = { "ModifiableConstraintFlag", 0x00820038, {1, 1}, VRType::CS, false };
    const tag ModifiedAttributesSequence = { "ModifiedAttributesSequence", 0x04000550, {1, 1}, VRType::SQ, false };
    const tag ModifiedImageDate = { "ModifiedImageDate", 0x00203403, {1, 1}, VRType::DA, false };
    const tag ModifiedImageDescription = { "ModifiedImageDescription", 0x00203406, {1, 1}, VRType::LO, false };
    const tag ModifiedImageID = { "ModifiedImageID", 0x00203402, {1, 1}, VRType::CS, false };
    const tag ModifiedImageTime = { "ModifiedImageTime", 0x00203405, {1, 1}, VRType::TM, false };
    const tag ModifierCodeSequence = { "ModifierCodeSequence", 0x0040A195, {1, 1}, VRType::SQ, false };
    const tag ModifyingDeviceID = { "ModifyingDeviceID", 0x00203401, {1, 1}, VRType::CS, false };
    const tag ModifyingDeviceManufacturer = { "ModifyingDeviceManufacturer", 0x00203404, {1, 1}, VRType::LO, false };
    const tag ModifyingSystem = { "ModifyingSystem", 0x04000563, {1, 1}, VRType::LO, false };
    const tag ModulatedScanModeType = { "ModulatedScanModeType", 0x300A0309, {1, 1}, VRType::CS, false };
    const tag ModulationType = { "ModulationType", 0x00144026, {1, 1}, VRType::CS, false };
    const tag MostRecentTreatmentDate = { "MostRecentTreatmentDate", 0x30080056, {1, 1}, VRType::DA, false };
    const tag MotionSynchronizationSequence = { "MotionSynchronizationSequence", 0x300A0410, {1, 1}, VRType::SQ, false };
    const tag MPRSlabThickness = { "MPRSlabThickness", 0x00701503, {1, 1}, VRType::FD, false };
    const tag MPRThicknessType = { "MPRThicknessType", 0x00701502, {1, 1}, VRType::CS, false };
    const tag MPRTopLeftHandCorner = { "MPRTopLeftHandCorner", 0x00701505, {3, 3}, VRType::FD, false };
    const tag MPRViewHeight = { "MPRViewHeight", 0x00701512, {1, 1}, VRType::FD, false };
    const tag MPRViewHeightDirection = { "MPRViewHeightDirection", 0x00701511, {3, 3}, VRType::FD, false };
    const tag MPRViewWidth = { "MPRViewWidth", 0x00701508, {1, 1}, VRType::FD, false };
    const tag MPRViewWidthDirection = { "MPRViewWidthDirection", 0x00701507, {3, 3}, VRType::FD, false };
    const tag MRAcquisitionFrequencyEncodingSteps = { "MRAcquisitionFrequencyEncodingSteps", 0x00189058, {1, 1}, VRType::US, false };
    const tag MRAcquisitionPhaseEncodingStepsInPlane = { "MRAcquisitionPhaseEncodingStepsInPlane", 0x00189231, {1, 1}, VRType::US, false };
    const tag MRAcquisitionPhaseEncodingStepsOutOfPlane = { "MRAcquisitionPhaseEncodingStepsOutOfPlane", 0x00189232, {1, 1}, VRType::US, false };
    const tag MRAcquisitionType = { "MRAcquisitionType", 0x00180023, {1, 1}, VRType::CS, false };
    const tag MRArterialSpinLabelingSequence = { "MRArterialSpinLabelingSequence", 0x00189251, {1, 1}, VRType::SQ, false };
    const tag MRAveragesSequence = { "MRAveragesSequence", 0x00189119, {1, 1}, VRType::SQ, false };
    const tag MRDiffusionSequence = { "MRDiffusionSequence", 0x00189117, {1, 1}, VRType::SQ, false };
    const tag MRDRDirectoryRecordOffset = { "MRDRDirectoryRecordOffset", 0x00041504, {1, 1}, VRType::UL, false };
    const tag MREchoSequence = { "MREchoSequence", 0x00189114, {1, 1}, VRType::SQ, false };
    const tag MRFOVGeometrySequence = { "MRFOVGeometrySequence", 0x00189125, {1, 1}, VRType::SQ, false };
    const tag MRImageFrameTypeSequence = { "MRImageFrameTypeSequence", 0x00189226, {1, 1}, VRType::SQ, false };
    const tag MRImagingModifierSequence = { "MRImagingModifierSequence", 0x00189006, {1, 1}, VRType::SQ, false };
    const tag MRMetaboliteMapSequence = { "MRMetaboliteMapSequence", 0x00189152, {1, 1}, VRType::SQ, false };
    const tag MRModifierSequence = { "MRModifierSequence", 0x00189115, {1, 1}, VRType::SQ, false };
    const tag MRReceiveCoilSequence = { "MRReceiveCoilSequence", 0x00189042, {1, 1}, VRType::SQ, false };
    const tag MRSpatialSaturationSequence = { "MRSpatialSaturationSequence", 0x00189107, {1, 1}, VRType::SQ, false };
    const tag MRSpectroscopyAcquisitionType = { "MRSpectroscopyAcquisitionType", 0x00189200, {1, 1}, VRType::CS, false };
    const tag MRSpectroscopyFOVGeometrySequence = { "MRSpectroscopyFOVGeometrySequence", 0x00189103, {1, 1}, VRType::SQ, false };
    const tag MRSpectroscopyFrameTypeSequence = { "MRSpectroscopyFrameTypeSequence", 0x00189227, {1, 1}, VRType::SQ, false };
    const tag MRTimingAndRelatedParametersSequence = { "MRTimingAndRelatedParametersSequence", 0x00189112, {1, 1}, VRType::SQ, false };
    const tag MRTransmitCoilSequence = { "MRTransmitCoilSequence", 0x00189049, {1, 1}, VRType::SQ, false };
    const tag MRVelocityEncodingSequence = { "MRVelocityEncodingSequence", 0x00189197, {1, 1}, VRType::SQ, false };
    const tag MultiCoilConfiguration = { "MultiCoilConfiguration", 0x00189046, {1, 1}, VRType::LO, false };
    const tag MultiCoilDefinitionSequence = { "MultiCoilDefinitionSequence", 0x00189045, {1, 1}, VRType::SQ, false };
    const tag MultiCoilElementName = { "MultiCoilElementName", 0x00189047, {1, 1}, VRType::SH, false };
    const tag MultiCoilElementUsed = { "MultiCoilElementUsed", 0x00189048, {1, 1}, VRType::CS, false };
    const tag MultiFramePresentationSequence = { "MultiFramePresentationSequence", 0x00289505, {1, 1}, VRType::SQ, false };
    const tag MultiFrameSourceSOPInstanceUID = { "MultiFrameSourceSOPInstanceUID", 0x00081167, {1, 1}, VRType::UI, false };
    const tag MultiPlanarExcitation = { "MultiPlanarExcitation", 0x00189012, {1, 1}, VRType::CS, false };
    const tag MultiPlanarReconstructionStyle = { "MultiPlanarReconstructionStyle", 0x00701501, {1, 1}, VRType::CS, false };
    const tag MultipleComponentApprovalSequence = { "MultipleComponentApprovalSequence", 0x00140106, {1, 1}, VRType::SQ, false };
    const tag MultipleCopiesFlag = { "MultipleCopiesFlag", 0x00404006, {1, 1}, VRType::CS, false };
    const tag MultipleSpinEcho = { "MultipleSpinEcho", 0x00189011, {1, 1}, VRType::CS, false };
    const tag MultiplexedAudioChannelsDescriptionCodeSequence = { "MultiplexedAudioChannelsDescriptionCodeSequence", 0x003A0300, {1, 1}, VRType::SQ, false };
    const tag MultiplexGroupLabel = { "MultiplexGroupLabel", 0x003A0020, {1, 1}, VRType::SH, false };
    const tag MultiplexGroupTimeOffset = { "MultiplexGroupTimeOffset", 0x00181068, {1, 1}, VRType::DS, false };
    const tag MydriaticAgentCodeSequence = { "MydriaticAgentCodeSequence", 0x0022001C, {1, 1}, VRType::SQ, false };
    const tag MydriaticAgentConcentration = { "MydriaticAgentConcentration", 0x0022004E, {1, 1}, VRType::DS, false };
    const tag MydriaticAgentConcentrationUnitsSequence = { "MydriaticAgentConcentrationUnitsSequence", 0x00220042, {1, 1}, VRType::SQ, false };
    const tag MydriaticAgentSequence = { "MydriaticAgentSequence", 0x00220058, {1, 1}, VRType::SQ, false };
    const tag NameOfPhysiciansReadingStudy = { "NameOfPhysiciansReadingStudy", 0x00081060, {1, 1}, VRType::PN, false };
    const tag NamesOfIntendedRecipientsOfResults = { "NamesOfIntendedRecipientsOfResults", 0x00401010, {1, 1}, VRType::PN, false };
    const tag NavigationDisplaySet = { "NavigationDisplaySet", 0x00720216, {1, 1}, VRType::US, false };
    const tag NavigationIndicatorSequence = { "NavigationIndicatorSequence", 0x00720214, {1, 1}, VRType::SQ, false };
    const tag NearPupillaryDistance = { "NearPupillaryDistance", 0x00460062, {1, 1}, VRType::FD, false };
    const tag NegativeCatchTrialsQuantity = { "NegativeCatchTrialsQuantity", 0x00240048, {1, 1}, VRType::US, false };
    const tag NetworkID = { "NetworkID", 0x00081000, {1, 1}, VRType::AE, false };
    const tag NominalBeamAngle = { "NominalBeamAngle", 0x00145112, {1, 1}, VRType::DS, false };
    const tag NominalBeamEnergy = { "NominalBeamEnergy", 0x300A0114, {1, 1}, VRType::DS, false };
    const tag NominalBeamEnergyUnit = { "NominalBeamEnergyUnit", 0x300A0015, {1, 1}, VRType::CS, false };
    const tag NominalCardiacTriggerDelayTime = { "NominalCardiacTriggerDelayTime", 0x00209153, {1, 1}, VRType::FD, false };
    const tag NominalCardiacTriggerTimePriorToRPeak = { "NominalCardiacTriggerTimePriorToRPeak", 0x00209154, {1, 1}, VRType::FL, false };
    const tag NominalFrequency = { "NominalFrequency", 0x0014401A, {1, 1}, VRType::DS, false };
    const tag NominalInterval = { "NominalInterval", 0x00181062, {1, 1}, VRType::IS, false };
    const tag NominalPercentageOfCardiacPhase = { "NominalPercentageOfCardiacPhase", 0x00209241, {1, 1}, VRType::FL, false };
    const tag NominalPercentageOfRespiratoryPhase = { "NominalPercentageOfRespiratoryPhase", 0x00209245, {1, 1}, VRType::FL, false };
    const tag NominalPriorDose = { "NominalPriorDose", 0x300A001A, {1, 1}, VRType::DS, false };
    const tag NominalRangeModulatedRegionDepths = { "NominalRangeModulatedRegionDepths", 0x300A0504, {2, 2}, VRType::FL, false };
    const tag NominalRangeModulationFractions = { "NominalRangeModulationFractions", 0x300A0503, {2, 2}, VRType::FL, false };
    const tag NominalRespiratoryTriggerDelayTime = { "NominalRespiratoryTriggerDelayTime", 0x00209255, {1, 1}, VRType::FD, false };
    const tag NominalScannedPixelSpacing = { "NominalScannedPixelSpacing", 0x00182010, {2, 2}, VRType::DS, false };
    const tag NominalScreenDefinitionSequence = { "NominalScreenDefinitionSequence", 0x00720102, {1, 1}, VRType::SQ, false };
    const tag NonDICOMOutputCodeSequence = { "NonDICOMOutputCodeSequence", 0x00404032, {1, 1}, VRType::SQ, false };
    const tag NonidentifyingPrivateElements = { "NonidentifyingPrivateElements", 0x00080304, {1, 1}, VRType::US, false };
    const tag NonUniformRadialSamplingCorrected = { "NonUniformRadialSamplingCorrected", 0x00189766, {1, 1}, VRType::CS, false };
    const tag NormalizationFactorFormat = { "NormalizationFactorFormat", 0x00280710, {1, 1}, VRType::US, false };
    const tag NormalizationPoint = { "NormalizationPoint", 0x30040008, {3, 3}, VRType::DS, false };
    const tag NotchFilterBandwidth = { "NotchFilterBandwidth", 0x003A0223, {1, 1}, VRType::DS, false };
    const tag NotchFilterFrequency = { "NotchFilterFrequency", 0x003A0222, {1, 1}, VRType::DS, false };
    const tag NotificationFromManufacturerSequence = { "NotificationFromManufacturerSequence", 0x00686265, {1, 1}, VRType::SQ, false };
    const tag NTPSourceAddress = { "NTPSourceAddress", 0x00181803, {1, 1}, VRType::LO, false };
    const tag NuclearMedicineSeriesType = { "NuclearMedicineSeriesType", 0x00080042, {1, 1}, VRType::CS, false };
    const tag NumberOfAlarmObjects = { "NumberOfAlarmObjects", 0x40101034, {1, 1}, VRType::US, false };
    const tag NumberOfAssessmentObservations = { "NumberOfAssessmentObservations", 0x00820006, {1, 1}, VRType::UL, false };
    const tag NumberOfAverages = { "NumberOfAverages", 0x00180083, {1, 1}, VRType::DS, false };
    const tag NumberOfBeams = { "NumberOfBeams", 0x300A0080, {1, 1}, VRType::IS, false };
    const tag NumberOfBlocks = { "NumberOfBlocks", 0x300A00F0, {1, 1}, VRType::IS, false };
    const tag NumberOfBlockSlabItems = { "NumberOfBlockSlabItems", 0x300A0440, {1, 1}, VRType::IS, false };
    const tag NumberOfBoli = { "NumberOfBoli", 0x300A00ED, {1, 1}, VRType::IS, false };
    const tag NumberOfBrachyApplicationSetups = { "NumberOfBrachyApplicationSetups", 0x300A00A0, {1, 1}, VRType::IS, false };
    const tag NumberofBscansPerFrame = { "NumberofBscansPerFrame", 0x00221642, {1, 1}, VRType::UL, false };
    const range_tag NumberOfChannels = { "NumberOfChannels", 0x50002004, 0x50FF2004, 0x00010000, {1, 1}, VRType::US, false };
    const tag NumberOfCompensators = { "NumberOfCompensators", 0x300A00E0, {1, 1}, VRType::IS, false };
    const tag NumberOfContourPoints = { "NumberOfContourPoints", 0x30060046, {1, 1}, VRType::IS, false };
    const tag NumberOfControlPoints = { "NumberOfControlPoints", 0x300A0110, {1, 1}, VRType::IS, false };
    const tag NumberOfCopies = { "NumberOfCopies", 0x20000010, {1, 1}, VRType::IS, false };
    const tag NumberOfDetectors = { "NumberOfDetectors", 0x00540021, {1, 1}, VRType::US, false };
    const tag NumberOfDisplaySubsystems = { "NumberOfDisplaySubsystems", 0x00287001, {1, 1}, VRType::US, false };
    const tag NumberOfElements = { "NumberOfElements", 0x00144012, {1, 1}, VRType::US, false };
    const tag NumberOfEnergyWindows = { "NumberOfEnergyWindows", 0x00540011, {1, 1}, VRType::US, false };
    const tag NumberOfEventTimers = { "NumberOfEventTimers", 0x00082129, {1, 1}, VRType::IS, false };
    const tag NumberOfFilms = { "NumberOfFilms", 0x21000170, {1, 1}, VRType::IS, false };
    const tag NumberOfFocalPlanes = { "NumberOfFocalPlanes", 0x00480013, {1, 1}, VRType::US, false };
    const tag NumberOfFractionPatternDigitsPerDay = { "NumberOfFractionPatternDigitsPerDay", 0x300A0079, {1, 1}, VRType::IS, false };
    const tag NumberOfFractionsDelivered = { "NumberOfFractionsDelivered", 0x3008005A, {1, 1}, VRType::IS, false };
    const tag NumberOfFractionsPlanned = { "NumberOfFractionsPlanned", 0x300A0078, {1, 1}, VRType::IS, false };
    const tag NumberOfFrames = { "NumberOfFrames", 0x00280008, {1, 1}, VRType::IS, false };
    const range_tag NumberOfFramesInOverlay = { "NumberOfFramesInOverlay", 0x60000015, 0x60FF0015, 0x00010000, {1, 1}, VRType::IS, false };
    const tag NumberOfFramesInPhase = { "NumberOfFramesInPhase", 0x00540033, {1, 1}, VRType::US, false };
    const tag NumberOfFramesInRotation = { "NumberOfFramesInRotation", 0x00540053, {1, 1}, VRType::US, false };
    const tag NumberOfFramesIntegrated = { "NumberOfFramesIntegrated", 0x00143012, {1, 1}, VRType::DS, false };
    const tag NumberOfFramesUsedForIntegration = { "NumberOfFramesUsedForIntegration", 0x00143073, {1, 1}, VRType::DS, false };
    const tag NumberOfGraphicPoints = { "NumberOfGraphicPoints", 0x00700021, {1, 1}, VRType::US, false };
    const tag NumberOfHorizontalPixels = { "NumberOfHorizontalPixels", 0x00720106, {1, 1}, VRType::US, false };
    const tag NumberOfIterations = { "NumberOfIterations", 0x00189739, {1, 1}, VRType::US, false };
    const tag NumberOfKSpaceTrajectories = { "NumberOfKSpaceTrajectories", 0x00189093, {1, 1}, VRType::US, false };
    const tag NumberOfLateralSpreadingDevices = { "NumberOfLateralSpreadingDevices", 0x300A0330, {1, 1}, VRType::IS, false };
    const tag NumberOfLeafJawPairs = { "NumberOfLeafJawPairs", 0x300A00BC, {1, 1}, VRType::IS, false };
    const tag NumberOfLuminancePoints = { "NumberOfLuminancePoints", 0x0028701B, {1, 1}, VRType::US, false };
    const tag NumberOfMapPoints = { "NumberOfMapPoints", 0x00221530, {1, 1}, VRType::UL, false };
    const tag NumberOfOpticalPaths = { "NumberOfOpticalPaths", 0x00480302, {1, 1}, VRType::UL, false };
    const tag NumberOfPaddedALines = { "NumberOfPaddedALines", 0x00520038, {1, 1}, VRType::US, false };
    const tag NumberOfPaintings = { "NumberOfPaintings", 0x300A039A, {1, 1}, VRType::IS, false };
    const tag NumberOfPatientRelatedInstances = { "NumberOfPatientRelatedInstances", 0x00201204, {1, 1}, VRType::IS, false };
    const tag NumberOfPatientRelatedSeries = { "NumberOfPatientRelatedSeries", 0x00201202, {1, 1}, VRType::IS, false };
    const tag NumberOfPatientRelatedStudies = { "NumberOfPatientRelatedStudies", 0x00201200, {1, 1}, VRType::IS, false };
    const tag NumberOfPhaseEncodingSteps = { "NumberOfPhaseEncodingSteps", 0x00180089, {1, 1}, VRType::IS, false };
    const tag NumberOfPhases = { "NumberOfPhases", 0x00540031, {1, 1}, VRType::US, false };
    const range_tag NumberOfPoints = { "NumberOfPoints", 0x50000010, 0x50FF0010, 0x00010000, {1, 1}, VRType::US, false };
    const tag NumberOfPriorsReferenced = { "NumberOfPriorsReferenced", 0x00720014, {1, 1}, VRType::US, false };
    const tag NumberOfPulses = { "NumberOfPulses", 0x300A028A, {1, 1}, VRType::IS, false };
    const tag NumberOfRangeModulators = { "NumberOfRangeModulators", 0x300A0340, {1, 1}, VRType::IS, false };
    const tag NumberOfRangeShifters = { "NumberOfRangeShifters", 0x300A0312, {1, 1}, VRType::IS, false };
    const tag NumberOfReferences = { "NumberOfReferences", 0x00041600, {1, 1}, VRType::UL, false };
    const tag NumberOfRotations = { "NumberOfRotations", 0x00540051, {1, 1}, VRType::US, false };
    const tag NumberOfRRIntervals = { "NumberOfRRIntervals", 0x00540061, {1, 1}, VRType::US, false };
    const range_tag NumberOfSamples = { "NumberOfSamples", 0x50002006, 0x50FF2006, 0x00010000, {1, 1}, VRType::UL, false };
    const tag NumberOfScanSpotPositions = { "NumberOfScanSpotPositions", 0x300A0392, {1, 1}, VRType::IS, false };
    const tag NumberOfScreens = { "NumberOfScreens", 0x00720100, {1, 1}, VRType::US, false };
    const tag NumberOfSeriesRelatedInstances = { "NumberOfSeriesRelatedInstances", 0x00201209, {1, 1}, VRType::IS, false };
    const tag NumberOfSlices = { "NumberOfSlices", 0x00540081, {1, 1}, VRType::US, false };
    const tag NumberOfStages = { "NumberOfStages", 0x00082124, {1, 1}, VRType::IS, false };
    const tag NumberOfStudyRelatedInstances = { "NumberOfStudyRelatedInstances", 0x00201208, {1, 1}, VRType::IS, false };
    const tag NumberOfStudyRelatedSeries = { "NumberOfStudyRelatedSeries", 0x00201206, {1, 1}, VRType::IS, false };
    const tag NumberOfSubsets = { "NumberOfSubsets", 0x00189740, {1, 1}, VRType::US, false };
    const tag NumberOfSurfacePoints = { "NumberOfSurfacePoints", 0x00660015, {1, 1}, VRType::UL, false };
    const tag NumberOfSurfaces = { "NumberOfSurfaces", 0x00660001, {1, 1}, VRType::UL, false };
    const tag NumberOfTableBreakPoints = { "NumberOfTableBreakPoints", 0x00186050, {1, 1}, VRType::UL, false };
    const tag NumberOfTableEntries = { "NumberOfTableEntries", 0x00186056, {1, 1}, VRType::UL, false };
    const range_tag NumberOfTables = { "NumberOfTables", 0x00280802, 0x002808F2, 0x00000010, {1, 1}, VRType::US, false };
    const tag NumberOfTemporalPositions = { "NumberOfTemporalPositions", 0x00200105, {1, 1}, VRType::IS, false };
    const tag NumberOfTimeSlices = { "NumberOfTimeSlices", 0x00540101, {1, 1}, VRType::US, false };
    const tag NumberOfTimeSlots = { "NumberOfTimeSlots", 0x00540071, {1, 1}, VRType::US, false };
    const tag NumberOfTomosynthesisSourceImages = { "NumberOfTomosynthesisSourceImages", 0x00181495, {1, 1}, VRType::IS, false };
    const tag NumberOfTotalObjects = { "NumberOfTotalObjects", 0x40101033, {1, 1}, VRType::US, false };
    const tag NumberOfTransformSteps = { "NumberOfTransformSteps", 0x00280402, {1, 1}, VRType::US, false };
    const tag NumberOfTriggersInPhase = { "NumberOfTriggersInPhase", 0x00540211, {1, 1}, VRType::US, false };
    const tag NumberOfVectors = { "NumberOfVectors", 0x0066001E, {1, 1}, VRType::UL, false };
    const tag NumberOfVerticalPixels = { "NumberOfVerticalPixels", 0x00720104, {1, 1}, VRType::US, false };
    const tag NumberOfViewsInStage = { "NumberOfViewsInStage", 0x0008212A, {1, 1}, VRType::IS, false };
    const tag NumberOfVisualStimuli = { "NumberOfVisualStimuli", 0x00240038, {1, 1}, VRType::US, false };
    const tag NumberOfVolumetricCurvePoints = { "NumberOfVolumetricCurvePoints", 0x0070150C, {1, 1}, VRType::UL, false };
    const tag NumberOfWaveformChannels = { "NumberOfWaveformChannels", 0x003A0005, {1, 1}, VRType::US, false };
    const tag NumberOfWaveformSamples = { "NumberOfWaveformSamples", 0x003A0010, {1, 1}, VRType::UL, false };
    const tag NumberOfWedges = { "NumberOfWedges", 0x300A00D0, {1, 1}, VRType::IS, false };
    const tag NumberOfZeroFills = { "NumberOfZeroFills", 0x00189066, {1, 2}, VRType::US, false };
    const tag NumericValue = { "NumericValue", 0x0040A30A, {1, 1}, VRType::DS, false };
    const tag NumericValueQualifierCodeSequence = { "NumericValueQualifierCodeSequence", 0x0040A301, {1, 1}, VRType::SQ, false };
    const tag ObjectBinaryIdentifierTrial = { "ObjectBinaryIdentifierTrial", 0x0040A074, {1, 1}, VRType::OB, false };
    const tag ObjectDirectoryBinaryIdentifierTrial = { "ObjectDirectoryBinaryIdentifierTrial", 0x0040A089, {1, 1}, VRType::OB, false };
    const tag ObjectiveLensNumericalAperture = { "ObjectiveLensNumericalAperture", 0x00480113, {1, 1}, VRType::DS, false };
    const tag ObjectiveLensPower = { "ObjectiveLensPower", 0x00480112, {1, 1}, VRType::DS, false };
    const tag ObjectPixelSpacingInCenterOfBeam = { "ObjectPixelSpacingInCenterOfBeam", 0x00189404, {2, 2}, VRType::FL, false };
    const tag ObjectThicknessSequence = { "ObjectThicknessSequence", 0x00189456, {1, 1}, VRType::SQ, false };
    const tag ObliqueCroppingPlaneSequence = { "ObliqueCroppingPlaneSequence", 0x00701304, {1, 1}, VRType::SQ, false };
    const tag ObservationBasisCodeSequence = { "ObservationBasisCodeSequence", 0x00820022, {1, 1}, VRType::SQ, false };
    const tag ObservationCategoryCodeSequenceTrial = { "ObservationCategoryCodeSequenceTrial", 0x0040A167, {1, 1}, VRType::SQ, false };
    const tag ObservationDateTime = { "ObservationDateTime", 0x0040A032, {1, 1}, VRType::DT, false };
    const tag ObservationDateTrial = { "ObservationDateTrial", 0x0040A192, {1, 1}, VRType::DA, false };
    const tag ObservationDescription = { "ObservationDescription", 0x0082000A, {1, 1}, VRType::UT, false };
    const tag ObservationNumber = { "ObservationNumber", 0x30060082, {1, 1}, VRType::IS, false };
    const tag ObservationSignificance = { "ObservationSignificance", 0x00820008, {1, 1}, VRType::CS, false };
    const tag ObservationSubjectClassTrial = { "ObservationSubjectClassTrial", 0x0040A403, {1, 1}, VRType::CS, false };
    const tag ObservationSubjectContextFlagTrial = { "ObservationSubjectContextFlagTrial", 0x0040A600, {1, 1}, VRType::CS, false };
    const tag ObservationSubjectTypeCodeSequenceTrial = { "ObservationSubjectTypeCodeSequenceTrial", 0x0040A404, {1, 1}, VRType::SQ, false };
    const tag ObservationSubjectUIDTrial = { "ObservationSubjectUIDTrial", 0x0040A402, {1, 1}, VRType::UI, false };
    const tag ObservationTimeTrial = { "ObservationTimeTrial", 0x0040A193, {1, 1}, VRType::TM, false };
    const tag ObservationUID = { "ObservationUID", 0x0040A171, {1, 1}, VRType::UI, false };
    const tag ObserverContextFlagTrial = { "ObserverContextFlagTrial", 0x0040A601, {1, 1}, VRType::CS, false };
    const tag ObserverType = { "ObserverType", 0x0040A084, {1, 1}, VRType::CS, false };
    const tag Occupation = { "Occupation", 0x00102180, {1, 1}, VRType::SH, false };
    const tag OCTAcquisitionDomain = { "OCTAcquisitionDomain", 0x00520006, {1, 1}, VRType::CS, false };
    const tag OCTBscanAnalysisAcquisitionParametersSequence = { "OCTBscanAnalysisAcquisitionParametersSequence", 0x00221640, {1, 1}, VRType::SQ, false };
    const tag OCTFocalDistance = { "OCTFocalDistance", 0x00520002, {1, 1}, VRType::FD, false };
    const tag OCTOpticalCenterWavelength = { "OCTOpticalCenterWavelength", 0x00520007, {1, 1}, VRType::FD, false };
    const tag OCTZOffsetApplied = { "OCTZOffsetApplied", 0x00520026, {1, 1}, VRType::CS, false };
    const tag OCTZOffsetCorrection = { "OCTZOffsetCorrection", 0x00520030, {1, 1}, VRType::SS, false };
    const tag OffsetDirection = { "OffsetDirection", 0x00189905, {1, 1}, VRType::CS, false };
    const tag OffsetDistance = { "OffsetDistance", 0x00189904, {1, 1}, VRType::DS, false };
    const tag OffsetOfReferencedLowerLevelDirectoryEntity = { "OffsetOfReferencedLowerLevelDirectoryEntity", 0x00041420, {1, 1}, VRType::UL, false };
    const tag OffsetOfTheFirstDirectoryRecordOfTheRootDirectoryEntity = { "OffsetOfTheFirstDirectoryRecordOfTheRootDirectoryEntity", 0x00041200, {1, 1}, VRType::UL, false };
    const tag OffsetOfTheLastDirectoryRecordOfTheRootDirectoryEntity = { "OffsetOfTheLastDirectoryRecordOfTheRootDirectoryEntity", 0x00041202, {1, 1}, VRType::UL, false };
    const tag OffsetOfTheNextDirectoryRecord = { "OffsetOfTheNextDirectoryRecord", 0x00041400, {1, 1}, VRType::UL, false };
    const tag OmittedApplicationSetupSequence = { "OmittedApplicationSetupSequence", 0x0074140E, {1, 1}, VRType::SQ, false };
    const tag OmittedBeamTaskSequence = { "OmittedBeamTaskSequence", 0x300C0111, {1, 1}, VRType::SQ, false };
    const tag OmittedChannelSequence = { "OmittedChannelSequence", 0x00741409, {1, 1}, VRType::SQ, false };
    const tag OnAxisBackgroundAnatomicStructureCodeSequenceTrial = { "OnAxisBackgroundAnatomicStructureCodeSequenceTrial", 0x0008225C, {1, 1}, VRType::SQ, false };
    const tag OOIOwnerCreationTime = { "OOIOwnerCreationTime", 0x40101041, {1, 1}, VRType::DT, false };
    const tag OOIOwnerSequence = { "OOIOwnerSequence", 0x40101047, {1, 1}, VRType::SQ, false };
    const tag OOIOwnerType = { "OOIOwnerType", 0x40101009, {1, 1}, VRType::CS, false };
    const tag OOISize = { "OOISize", 0x40101043, {3, 3}, VRType::FL, false };
    const tag OOIType = { "OOIType", 0x40101042, {1, 1}, VRType::CS, false };
    const tag OOITypeDescriptor = { "OOITypeDescriptor", 0x40101068, {1, 1}, VRType::LT, false };
    const tag OperatingMode = { "OperatingMode", 0x00189178, {1, 1}, VRType::CS, false };
    const tag OperatingModeSequence = { "OperatingModeSequence", 0x00189176, {1, 1}, VRType::SQ, false };
    const tag OperatingModeType = { "OperatingModeType", 0x00189177, {1, 1}, VRType::CS, false };
    const tag OperatorIdentificationSequence = { "OperatorIdentificationSequence", 0x00081072, {1, 1}, VRType::SQ, false };
    const tag OperatorsName = { "OperatorsName", 0x00081070, {1, 1}, VRType::PN, false };
    const tag OphthalmicAnatomicReferencePointXCoordinate = { "OphthalmicAnatomicReferencePointXCoordinate", 0x00221624, {1, 1}, VRType::FL, false };
    const tag OphthalmicAnatomicReferencePointYCoordinate = { "OphthalmicAnatomicReferencePointYCoordinate", 0x00221626, {1, 1}, VRType::FL, false };
    const tag OphthalmicAxialLength = { "OphthalmicAxialLength", 0x00221019, {1, 1}, VRType::FL, false };
    const tag OphthalmicAxialLengthAcquisitionMethodCodeSequence = { "OphthalmicAxialLengthAcquisitionMethodCodeSequence", 0x00221153, {1, 1}, VRType::SQ, false };
    const tag OphthalmicAxialLengthDataSourceCodeSequence = { "OphthalmicAxialLengthDataSourceCodeSequence", 0x00221150, {1, 1}, VRType::SQ, false };
    const tag OphthalmicAxialLengthDataSourceDescription = { "OphthalmicAxialLengthDataSourceDescription", 0x00221159, {1, 1}, VRType::LO, false };
    const tag OphthalmicAxialLengthMeasurementModified = { "OphthalmicAxialLengthMeasurementModified", 0x00221140, {1, 1}, VRType::CS, false };
    const tag OphthalmicAxialLengthMeasurementsLengthSummationSequence = { "OphthalmicAxialLengthMeasurementsLengthSummationSequence", 0x00221212, {1, 1}, VRType::SQ, false };
    const tag OphthalmicAxialLengthMeasurementsSegmentalLengthSequence = { "OphthalmicAxialLengthMeasurementsSegmentalLengthSequence", 0x00221211, {1, 1}, VRType::SQ, false };
    const tag OphthalmicAxialLengthMeasurementsSegmentNameCodeSequence = { "OphthalmicAxialLengthMeasurementsSegmentNameCodeSequence", 0x00221101, {1, 1}, VRType::SQ, false };
    const tag OphthalmicAxialLengthMeasurementsSequence = { "OphthalmicAxialLengthMeasurementsSequence", 0x00221050, {1, 1}, VRType::SQ, false };
    const tag OphthalmicAxialLengthMeasurementsTotalLengthSequence = { "OphthalmicAxialLengthMeasurementsTotalLengthSequence", 0x00221210, {1, 1}, VRType::SQ, false };
    const tag OphthalmicAxialLengthMeasurementsType = { "OphthalmicAxialLengthMeasurementsType", 0x00221010, {1, 1}, VRType::CS, false };
    const tag OphthalmicAxialLengthMethod = { "OphthalmicAxialLengthMethod", 0x00221515, {1, 1}, VRType::CS, false };
    const tag OphthalmicAxialLengthQualityMetricSequence = { "OphthalmicAxialLengthQualityMetricSequence", 0x00221262, {1, 1}, VRType::SQ, false };
    const tag OphthalmicAxialLengthQualityMetricTypeCodeSequence = { "OphthalmicAxialLengthQualityMetricTypeCodeSequence", 0x00221265, {1, 1}, VRType::SQ, false };
    const tag OphthalmicAxialLengthQualityMetricTypeDescription = { "OphthalmicAxialLengthQualityMetricTypeDescription", 0x00221273, {1, 1}, VRType::LO, false };
    const tag OphthalmicAxialLengthSelectionMethodCodeSequence = { "OphthalmicAxialLengthSelectionMethodCodeSequence", 0x00221250, {1, 1}, VRType::SQ, false };
    const tag OphthalmicAxialLengthSequence = { "OphthalmicAxialLengthSequence", 0x00221012, {1, 1}, VRType::SQ, false };
    const tag OphthalmicAxialLengthVelocity = { "OphthalmicAxialLengthVelocity", 0x00221059, {1, 1}, VRType::FL, false };
    const tag OphthalmicAxialMeasurementsDeviceType = { "OphthalmicAxialMeasurementsDeviceType", 0x00221009, {1, 1}, VRType::CS, false };
    const tag OphthalmicAxialMeasurementsLeftEyeSequence = { "OphthalmicAxialMeasurementsLeftEyeSequence", 0x00221008, {1, 1}, VRType::SQ, false };
    const tag OphthalmicAxialMeasurementsRightEyeSequence = { "OphthalmicAxialMeasurementsRightEyeSequence", 0x00221007, {1, 1}, VRType::SQ, false };
    const tag OphthalmicEnFaceImageQualityRatingSequence = { "OphthalmicEnFaceImageQualityRatingSequence", 0x00221628, {1, 1}, VRType::SQ, false };
    const tag OphthalmicFOV = { "OphthalmicFOV", 0x00221517, {1, 1}, VRType::FL, false };
    const tag OphthalmicFrameLocationSequence = { "OphthalmicFrameLocationSequence", 0x00220031, {1, 1}, VRType::SQ, false };
    const tag OphthalmicImageOrientation = { "OphthalmicImageOrientation", 0x00220039, {1, 1}, VRType::CS, false };
    const tag OphthalmicImageTypeCodeSequence = { "OphthalmicImageTypeCodeSequence", 0x00221615, {1, 1}, VRType::SQ, false };
    const tag OphthalmicImageTypeDescription = { "OphthalmicImageTypeDescription", 0x00221616, {1, 1}, VRType::LO, false };
    const tag OphthalmicMappingDeviceType = { "OphthalmicMappingDeviceType", 0x00221415, {1, 1}, VRType::CS, false };
    const tag OphthalmicPatientClinicalInformationLeftEyeSequence = { "OphthalmicPatientClinicalInformationLeftEyeSequence", 0x00240114, {1, 1}, VRType::SQ, false };
    const tag OphthalmicPatientClinicalInformationRightEyeSequence = { "OphthalmicPatientClinicalInformationRightEyeSequence", 0x00240115, {1, 1}, VRType::SQ, false };
    const tag OphthalmicThicknessMappingNormalsSequence = { "OphthalmicThicknessMappingNormalsSequence", 0x00221443, {1, 1}, VRType::SQ, false };
    const tag OphthalmicThicknessMapQualityRatingSequence = { "OphthalmicThicknessMapQualityRatingSequence", 0x00221470, {1, 1}, VRType::SQ, false };
    const tag OphthalmicThicknessMapQualityThresholdSequence = { "OphthalmicThicknessMapQualityThresholdSequence", 0x00221458, {1, 1}, VRType::SQ, false };
    const tag OphthalmicThicknessMapThresholdQualityRating = { "OphthalmicThicknessMapThresholdQualityRating", 0x00221460, {1, 1}, VRType::FL, false };
    const tag OphthalmicThicknessMapTypeCodeSequence = { "OphthalmicThicknessMapTypeCodeSequence", 0x00221436, {1, 1}, VRType::SQ, false };
    const tag OphthalmicUltrasoundMethodCodeSequence = { "OphthalmicUltrasoundMethodCodeSequence", 0x00221044, {1, 1}, VRType::SQ, false };
    const tag OphthalmicVolumetricPropertiesFlag = { "OphthalmicVolumetricPropertiesFlag", 0x00221622, {1, 1}, VRType::CS, false };
    const tag OpticalOphthalmicAxialLengthMeasurementsSequence = { "OpticalOphthalmicAxialLengthMeasurementsSequence", 0x00221225, {1, 1}, VRType::SQ, false };
    const tag OpticalPathDescription = { "OpticalPathDescription", 0x00480107, {1, 1}, VRType::ST, false };
    const tag OpticalPathIdentificationSequence = { "OpticalPathIdentificationSequence", 0x00480207, {1, 1}, VRType::SQ, false };
    const tag OpticalPathIdentifier = { "OpticalPathIdentifier", 0x00480106, {1, 1}, VRType::SH, false };
    const tag OpticalPathSequence = { "OpticalPathSequence", 0x00480105, {1, 1}, VRType::SQ, false };
    const tag OpticalSelectedOphthalmicAxialLengthSequence = { "OpticalSelectedOphthalmicAxialLengthSequence", 0x00221255, {1, 1}, VRType::SQ, false };
    const tag OpticalTransmittance = { "OpticalTransmittance", 0x00460040, {1, 1}, VRType::FD, false };
    const tag Optotype = { "Optotype", 0x00460094, {1, 1}, VRType::CS, false };
    const tag OptotypeDetailedDefinition = { "OptotypeDetailedDefinition", 0x00460139, {1, 1}, VRType::LO, false };
    const tag OptotypePresentation = { "OptotypePresentation", 0x00460095, {1, 1}, VRType::CS, false };
    const tag OrderCallbackPhoneNumber = { "OrderCallbackPhoneNumber", 0x00402010, {1, 1}, VRType::SH, false };
    const tag OrderCallbackTelecomInformation = { "OrderCallbackTelecomInformation", 0x00402011, {1, 1}, VRType::LT, false };
    const tag OrderEnteredBy = { "OrderEnteredBy", 0x00402008, {1, 1}, VRType::PN, false };
    const tag OrderEntererLocation = { "OrderEntererLocation", 0x00402009, {1, 1}, VRType::SH, false };
    const tag OrderFillerIdentifierSequence = { "OrderFillerIdentifierSequence", 0x00400027, {1, 1}, VRType::SQ, false };
    const tag OrderPlacerIdentifierSequence = { "OrderPlacerIdentifierSequence", 0x00400026, {1, 1}, VRType::SQ, false };
    const tag OrganAtRiskFullVolumeDose = { "OrganAtRiskFullVolumeDose", 0x300A002A, {1, 1}, VRType::DS, false };
    const tag OrganAtRiskLimitDose = { "OrganAtRiskLimitDose", 0x300A002B, {1, 1}, VRType::DS, false };
    const tag OrganAtRiskMaximumDose = { "OrganAtRiskMaximumDose", 0x300A002C, {1, 1}, VRType::DS, false };
    const tag OrganAtRiskOverdoseVolumeFraction = { "OrganAtRiskOverdoseVolumeFraction", 0x300A002D, {1, 1}, VRType::DS, false };
    const tag OrganDose = { "OrganDose", 0x00400316, {1, 1}, VRType::DS, false };
    const tag OrganExposed = { "OrganExposed", 0x00400318, {1, 1}, VRType::CS, false };
    const tag OrganizationalRoleCodeSequence = { "OrganizationalRoleCodeSequence", 0x0044010A, {1, 1}, VRType::SQ, false };
    const tag OriginalAttributesSequence = { "OriginalAttributesSequence", 0x04000561, {1, 1}, VRType::SQ, false };
    const tag OriginalImageIdentification = { "OriginalImageIdentification", 0x00205000, {1, 1}, VRType::AT, false };
    const tag OriginalImageIdentificationNomenclature = { "OriginalImageIdentificationNomenclature", 0x00205002, {1, 1}, VRType::LO, false };
    const tag OriginalImageSequence = { "OriginalImageSequence", 0x213000C0, {1, 1}, VRType::SQ, false };
    const tag OriginalImplantAssemblyTemplateSequence = { "OriginalImplantAssemblyTemplateSequence", 0x0076000C, {1, 1}, VRType::SQ, false };
    const tag OriginalImplantTemplateSequence = { "OriginalImplantTemplateSequence", 0x00686225, {1, 1}, VRType::SQ, false };
    const tag OriginalSpecializedSOPClassUID = { "OriginalSpecializedSOPClassUID", 0x0008001B, {1, 1}, VRType::UI, false };
    const tag Originator = { "Originator", 0x21000070, {1, 1}, VRType::AE, false };
    const tag OtherApprovalStatus = { "OtherApprovalStatus", 0x00140107, {1, 1}, VRType::CS, false };
    const tag OtherFailuresSequence = { "OtherFailuresSequence", 0x0008119A, {1, 1}, VRType::SQ, false };
    const tag OtherMagnificationTypesAvailable = { "OtherMagnificationTypesAvailable", 0x201000A7, {1, 1}, VRType::CS, false };
    const tag OtherMediaAvailableSequence = { "OtherMediaAvailableSequence", 0x200000A4, {1, 1}, VRType::SQ, false };
    const tag OtherPatientIDs = { "OtherPatientIDs", 0x00101000, {1, 1}, VRType::LO, false };
    const tag OtherPatientIDsSequence = { "OtherPatientIDsSequence", 0x00101002, {1, 1}, VRType::SQ, false };
    const tag OtherPatientNames = { "OtherPatientNames", 0x00101001, {1, 1}, VRType::PN, false };
    const tag OtherPupillaryDistance = { "OtherPupillaryDistance", 0x00460064, {1, 1}, VRType::FD, false };
    const tag OtherSecondaryApprovalStatus = { "OtherSecondaryApprovalStatus", 0x00140108, {1, 1}, VRType::CS, false };
    const tag OtherSmoothingTypesAvailable = { "OtherSmoothingTypesAvailable", 0x201000A9, {1, 1}, VRType::CS, false };
    const tag OtherStudyNumbers = { "OtherStudyNumbers", 0x00201070, {1, 1}, VRType::IS, false };
    const tag OuterDiameter = { "OuterDiameter", 0x00140054, {1, 1}, VRType::DS, false };
    const tag OutputDestinationSequence = { "OutputDestinationSequence", 0x00404070, {1, 1}, VRType::SQ, false };
    const tag OutputInformationSequence = { "OutputInformationSequence", 0x00404033, {1, 1}, VRType::SQ, false };
    const tag OutputPower = { "OutputPower", 0x00185000, {1, 1}, VRType::SH, false };
    const tag OverallTemplateSpatialTolerance = { "OverallTemplateSpatialTolerance", 0x006862A5, {1, 1}, VRType::FD, false };
    const range_tag OverlayActivationLayer = { "OverlayActivationLayer", 0x60001001, 0x60FF1001, 0x00010000, {1, 1}, VRType::CS, false };
    const tag OverlayBackgroundDensity = { "OverlayBackgroundDensity", 0x20400082, {1, 1}, VRType::CS, false };
    const range_tag OverlayBitPosition = { "OverlayBitPosition", 0x60000102, 0x60FF0102, 0x00010000, {1, 1}, VRType::US, false };
    const range_tag OverlayBitsAllocated = { "OverlayBitsAllocated", 0x60000100, 0x60FF0100, 0x00010000, {1, 1}, VRType::US, false };
    const range_tag OverlayBitsForCodeWord = { "OverlayBitsForCodeWord", 0x60000804, 0x60FF0804, 0x00010000, {1, 1}, VRType::US, false };
    const range_tag OverlayBitsGrouped = { "OverlayBitsGrouped", 0x60000069, 0x60FF0069, 0x00010000, {1, 1}, VRType::US, false };
    const range_tag OverlayCodeLabel = { "OverlayCodeLabel", 0x60000800, 0x60FF0800, 0x00010000, {1, 1}, VRType::CS, false };
    const range_tag OverlayCodeTableLocation = { "OverlayCodeTableLocation", 0x60000803, 0x60FF0803, 0x00010000, {1, 1}, VRType::AT, false };
    const range_tag OverlayColumns = { "OverlayColumns", 0x60000011, 0x60FF0011, 0x00010000, {1, 1}, VRType::US, false };
    const range_tag OverlayComments = { "OverlayComments", 0x60004000, 0x60FF4000, 0x00010000, {1, 1}, VRType::LT, false };
    const range_tag OverlayCompressionCode = { "OverlayCompressionCode", 0x60000060, 0x60FF0060, 0x00010000, {1, 1}, VRType::CS, false };
    const range_tag OverlayCompressionDescription = { "OverlayCompressionDescription", 0x60000063, 0x60FF0063, 0x00010000, {1, 1}, VRType::CS, false };
    const range_tag OverlayCompressionLabel = { "OverlayCompressionLabel", 0x60000062, 0x60FF0062, 0x00010000, {1, 1}, VRType::SH, false };
    const range_tag OverlayCompressionOriginator = { "OverlayCompressionOriginator", 0x60000061, 0x60FF0061, 0x00010000, {1, 1}, VRType::SH, false };
    const range_tag OverlayCompressionStepPointers = { "OverlayCompressionStepPointers", 0x60000066, 0x60FF0066, 0x00010000, {1, 1}, VRType::AT, false };
    const range_tag OverlayData = { "OverlayData", 0x60003000, 0x60FF3000, 0x00010000, {1, 1}, VRType::OB, true };
    const tag OverlayDate = { "OverlayDate", 0x00080024, {1, 1}, VRType::DA, false };
    const range_tag OverlayDescription = { "OverlayDescription", 0x60000022, 0x60FF0022, 0x00010000, {1, 1}, VRType::LO, false };
    const range_tag OverlayDescriptorBlue = { "OverlayDescriptorBlue", 0x60001103, 0x60FF1103, 0x00010000, {1, 1}, VRType::US, false };
    const range_tag OverlayDescriptorGray = { "OverlayDescriptorGray", 0x60001100, 0x60FF1100, 0x00010000, {1, 1}, VRType::US, false };
    const range_tag OverlayDescriptorGreen = { "OverlayDescriptorGreen", 0x60001102, 0x60FF1102, 0x00010000, {1, 1}, VRType::US, false };
    const range_tag OverlayDescriptorRed = { "OverlayDescriptorRed", 0x60001101, 0x60FF1101, 0x00010000, {1, 1}, VRType::US, false };
    const tag OverlayForegroundDensity = { "OverlayForegroundDensity", 0x20400080, {1, 1}, VRType::CS, false };
    const range_tag OverlayFormat = { "OverlayFormat", 0x60000110, 0x60FF0110, 0x00010000, {1, 1}, VRType::CS, false };
    const range_tag OverlayLabel = { "OverlayLabel", 0x60001500, 0x60FF1500, 0x00010000, {1, 1}, VRType::LO, false };
    const range_tag OverlayLocation = { "OverlayLocation", 0x60000200, 0x60FF0200, 0x00010000, {1, 1}, VRType::US, false };
    const tag OverlayMagnificationType = { "OverlayMagnificationType", 0x20400060, {1, 1}, VRType::CS, false };
    const tag OverlayMode = { "OverlayMode", 0x20400090, {1, 1}, VRType::CS, false };
    const tag OverlayNumber = { "OverlayNumber", 0x00200022, {1, 1}, VRType::IS, false };
    const range_tag OverlayNumberOfTables = { "OverlayNumberOfTables", 0x60000802, 0x60FF0802, 0x00010000, {1, 1}, VRType::US, false };
    const range_tag OverlayOrigin = { "OverlayOrigin", 0x60000050, 0x60FF0050, 0x00010000, {2, 2}, VRType::SS, false };
    const tag OverlayOrImageMagnification = { "OverlayOrImageMagnification", 0x20400072, {1, 1}, VRType::CS, false };
    const tag OverlayPixelDataSequence = { "OverlayPixelDataSequence", 0x20400020, {1, 1}, VRType::SQ, false };
    const range_tag OverlayPlaneOrigin = { "OverlayPlaneOrigin", 0x60000052, 0x60FF0052, 0x00010000, {1, 1}, VRType::US, false };
    const range_tag OverlayPlanes = { "OverlayPlanes", 0x60000012, 0x60FF0012, 0x00010000, {1, 1}, VRType::US, false };
    const range_tag OverlayRepeatInterval = { "OverlayRepeatInterval", 0x60000068, 0x60FF0068, 0x00010000, {1, 1}, VRType::US, false };
    const range_tag OverlayRows = { "OverlayRows", 0x60000010, 0x60FF0010, 0x00010000, {1, 1}, VRType::US, false };
    const range_tag OverlaysBlue = { "OverlaysBlue", 0x60001203, 0x60FF1203, 0x00010000, {1, 1}, VRType::US, false };
    const range_tag OverlaysGray = { "OverlaysGray", 0x60001200, 0x60FF1200, 0x00010000, {1, 1}, VRType::US, false };
    const range_tag OverlaysGreen = { "OverlaysGreen", 0x60001202, 0x60FF1202, 0x00010000, {1, 1}, VRType::US, false };
    const tag OverlaySmoothingType = { "OverlaySmoothingType", 0x20400070, {1, 1}, VRType::CS, false };
    const range_tag OverlaysRed = { "OverlaysRed", 0x60001201, 0x60FF1201, 0x00010000, {1, 1}, VRType::US, false };
    const range_tag OverlaySubtype = { "OverlaySubtype", 0x60000045, 0x60FF0045, 0x00010000, {1, 1}, VRType::LO, false };
    const tag OverlayTime = { "OverlayTime", 0x00080034, {1, 1}, VRType::TM, false };
    const range_tag OverlayType = { "OverlayType", 0x60000040, 0x60FF0040, 0x00010000, {1, 1}, VRType::CS, false };
    const tag OverriddenAttributesSequence = { "OverriddenAttributesSequence", 0x0074104A, {1, 1}, VRType::SQ, false };
    const tag OverrideParameterPointer = { "OverrideParameterPointer", 0x30080062, {1, 1}, VRType::AT, false };
    const tag OverrideReason = { "OverrideReason", 0x30080066, {1, 1}, VRType::ST, false };
    const tag OverrideSequence = { "OverrideSequence", 0x30080060, {1, 1}, VRType::SQ, false };
    const tag OversamplingPhase = { "OversamplingPhase", 0x00189029, {1, 1}, VRType::CS, false };
    const tag OwnerID = { "OwnerID", 0x21000160, {1, 1}, VRType::SH, false };
    const tag PaddleDescription = { "PaddleDescription", 0x001811A4, {1, 1}, VRType::LO, false };
    const tag PageNumberVector = { "PageNumberVector", 0x00182001, {1, 1}, VRType::IS, false };
    const tag PaletteColorLookupTableSequence = { "PaletteColorLookupTableSequence", 0x00480120, {1, 1}, VRType::SQ, false };
    const tag PaletteColorLookupTableUID = { "PaletteColorLookupTableUID", 0x00281199, {1, 1}, VRType::UI, false };
    const tag ParallelAcquisition = { "ParallelAcquisition", 0x00189077, {1, 1}, VRType::CS, false };
    const tag ParallelAcquisitionTechnique = { "ParallelAcquisitionTechnique", 0x00189078, {1, 1}, VRType::CS, false };
    const tag ParallelReductionFactorInPlane = { "ParallelReductionFactorInPlane", 0x00189069, {1, 1}, VRType::FD, false };
    const tag ParallelReductionFactorInPlaneRetired = { "ParallelReductionFactorInPlaneRetired", 0x00189096, {1, 1}, VRType::FD, false };
    const tag ParallelReductionFactorOutOfPlane = { "ParallelReductionFactorOutOfPlane", 0x00189155, {1, 1}, VRType::FD, false };
    const tag ParallelReductionFactorSecondInPlane = { "ParallelReductionFactorSecondInPlane", 0x00189168, {1, 1}, VRType::FD, false };
    const tag ParameterItemIndex = { "ParameterItemIndex", 0x30080063, {1, 1}, VRType::IS, false };
    const tag ParameterPointer = { "ParameterPointer", 0x30080065, {1, 1}, VRType::AT, false };
    const tag ParameterSequencePointer = { "ParameterSequencePointer", 0x30080061, {1, 1}, VRType::AT, false };
    const tag ParametersSpecificationSequence = { "ParametersSpecificationSequence", 0x00189913, {1, 1}, VRType::SQ, false };
    const tag ParameterValueNumber = { "ParameterValueNumber", 0x30080067, {1, 1}, VRType::US, false };
    const tag ParametricMapFrameTypeSequence = { "ParametricMapFrameTypeSequence", 0x00409092, {1, 1}, VRType::SQ, false };
    const tag PartialDataDisplayHandling = { "PartialDataDisplayHandling", 0x00720208, {1, 1}, VRType::CS, false };
    const tag PartialFourier = { "PartialFourier", 0x00189081, {1, 1}, VRType::CS, false };
    const tag PartialFourierDirection = { "PartialFourierDirection", 0x00189036, {1, 1}, VRType::CS, false };
    const tag PartialView = { "PartialView", 0x00281350, {1, 1}, VRType::CS, false };
    const tag PartialViewCodeSequence = { "PartialViewCodeSequence", 0x00281352, {1, 1}, VRType::SQ, false };
    const tag PartialViewDescription = { "PartialViewDescription", 0x00281351, {1, 1}, VRType::ST, false };
    const tag ParticipantSequence = { "ParticipantSequence", 0x0040A07A, {1, 1}, VRType::SQ, false };
    const tag ParticipationDateTime = { "ParticipationDateTime", 0x0040A082, {1, 1}, VRType::DT, false };
    const tag ParticipationType = { "ParticipationType", 0x0040A080, {1, 1}, VRType::CS, false };
    const tag PatientAdditionalPosition = { "PatientAdditionalPosition", 0x300A0184, {1, 1}, VRType::LO, false };
    const tag PatientAddress = { "PatientAddress", 0x00101040, {1, 1}, VRType::LO, false };
    const tag PatientAge = { "PatientAge", 0x00101010, {1, 1}, VRType::AS, false };
    const tag PatientAlternativeCalendar = { "PatientAlternativeCalendar", 0x00100035, {1, 1}, VRType::CS, false };
    const tag PatientBirthDate = { "PatientBirthDate", 0x00100030, {1, 1}, VRType::DA, false };
    const tag PatientBirthDateInAlternativeCalendar = { "PatientBirthDateInAlternativeCalendar", 0x00100033, {1, 1}, VRType::LO, false };
    const tag PatientBirthName = { "PatientBirthName", 0x00101005, {1, 1}, VRType::PN, false };
    const tag PatientBirthTime = { "PatientBirthTime", 0x00100032, {1, 1}, VRType::TM, false };
    const tag PatientBodyMassIndex = { "PatientBodyMassIndex", 0x00101022, {1, 1}, VRType::DS, false };
    const tag PatientBreedCodeSequence = { "PatientBreedCodeSequence", 0x00102293, {1, 1}, VRType::SQ, false };
    const tag PatientBreedDescription = { "PatientBreedDescription", 0x00102292, {1, 1}, VRType::LO, false };
    const tag PatientClinicalTrialParticipationSequence = { "PatientClinicalTrialParticipationSequence", 0x00380502, {1, 1}, VRType::SQ, false };
    const tag PatientComments = { "PatientComments", 0x00104000, {1, 1}, VRType::LT, false };
    const tag PatientDeathDateInAlternativeCalendar = { "PatientDeathDateInAlternativeCalendar", 0x00100034, {1, 1}, VRType::LO, false };
    const tag PatientEyeMovementCommandCodeSequence = { "PatientEyeMovementCommandCodeSequence", 0x00220006, {1, 1}, VRType::SQ, false };
    const tag PatientEyeMovementCommanded = { "PatientEyeMovementCommanded", 0x00220005, {1, 1}, VRType::CS, false };
    const tag PatientFrameOfReferenceSource = { "PatientFrameOfReferenceSource", 0x0020930C, {1, 1}, VRType::CS, false };
    const tag PatientGantryRelationshipCodeSequence = { "PatientGantryRelationshipCodeSequence", 0x00540414, {1, 1}, VRType::SQ, false };
    const tag PatientID = { "PatientID", 0x00100020, {1, 1}, VRType::LO, false };
    const tag PatientIdentityRemoved = { "PatientIdentityRemoved", 0x00120062, {1, 1}, VRType::CS, false };
    const tag PatientInstitutionResidence = { "PatientInstitutionResidence", 0x00380400, {1, 1}, VRType::LO, false };
    const tag PatientInsurancePlanCodeSequence = { "PatientInsurancePlanCodeSequence", 0x00100050, {1, 1}, VRType::SQ, false };
    const tag PatientMotherBirthName = { "PatientMotherBirthName", 0x00101060, {1, 1}, VRType::PN, false };
    const tag PatientMotionCorrected = { "PatientMotionCorrected", 0x00189763, {1, 1}, VRType::CS, false };
    const tag PatientName = { "PatientName", 0x00100010, {1, 1}, VRType::PN, false };
    const tag PatientNotProperlyFixatedQuantity = { "PatientNotProperlyFixatedQuantity", 0x00240036, {1, 1}, VRType::US, false };
    const tag PatientOrientation = { "PatientOrientation", 0x00200020, {2, 2}, VRType::CS, false };
    const tag PatientOrientationCodeSequence = { "PatientOrientationCodeSequence", 0x00540410, {1, 1}, VRType::SQ, false };
    const tag PatientOrientationInFrameSequence = { "PatientOrientationInFrameSequence", 0x00209450, {1, 1}, VRType::SQ, false };
    const tag PatientOrientationModifierCodeSequence = { "PatientOrientationModifierCodeSequence", 0x00540412, {1, 1}, VRType::SQ, false };
    const tag PatientPhysiologicalStateCodeSequence = { "PatientPhysiologicalStateCodeSequence", 0x00189772, {1, 1}, VRType::SQ, false };
    const tag PatientPhysiologicalStateSequence = { "PatientPhysiologicalStateSequence", 0x00189771, {1, 1}, VRType::SQ, false };
    const tag PatientPosition = { "PatientPosition", 0x00185100, {1, 1}, VRType::CS, false };
    const tag PatientPositioningInstructionSequence = { "PatientPositioningInstructionSequence", 0x0018991B, {1, 1}, VRType::SQ, false };
    const tag PatientPrimaryLanguageCodeSequence = { "PatientPrimaryLanguageCodeSequence", 0x00100101, {1, 1}, VRType::SQ, false };
    const tag PatientPrimaryLanguageModifierCodeSequence = { "PatientPrimaryLanguageModifierCodeSequence", 0x00100102, {1, 1}, VRType::SQ, false };
    const tag PatientReliabilityIndicator = { "PatientReliabilityIndicator", 0x00240069, {1, 1}, VRType::LO, false };
    const tag PatientReligiousPreference = { "PatientReligiousPreference", 0x001021F0, {1, 1}, VRType::LO, false };
    const tag PatientSetupLabel = { "PatientSetupLabel", 0x300A0183, {1, 1}, VRType::LO, false };
    const tag PatientSetupNumber = { "PatientSetupNumber", 0x300A0182, {1, 1}, VRType::IS, false };
    const tag PatientSetupSequence = { "PatientSetupSequence", 0x300A0180, {1, 1}, VRType::SQ, false };
    const tag PatientSex = { "PatientSex", 0x00100040, {1, 1}, VRType::CS, false };
    const tag PatientSexNeutered = { "PatientSexNeutered", 0x00102203, {1, 1}, VRType::CS, false };
    const tag PatientSize = { "PatientSize", 0x00101020, {1, 1}, VRType::DS, false };
    const tag PatientSizeCodeSequence = { "PatientSizeCodeSequence", 0x00101021, {1, 1}, VRType::SQ, false };
    const tag PatientSpeciesCodeSequence = { "PatientSpeciesCodeSequence", 0x00102202, {1, 1}, VRType::SQ, false };
    const tag PatientSpeciesDescription = { "PatientSpeciesDescription", 0x00102201, {1, 1}, VRType::LO, false };
    const tag PatientSpecificationSequence = { "PatientSpecificationSequence", 0x00189911, {1, 1}, VRType::SQ, false };
    const tag PatientState = { "PatientState", 0x00380500, {1, 1}, VRType::LO, false };
    const tag PatientSupportAccessoryCode = { "PatientSupportAccessoryCode", 0x300A0354, {1, 1}, VRType::LO, false };
    const tag PatientSupportAdjustedAngle = { "PatientSupportAdjustedAngle", 0x0074102A, {1, 1}, VRType::FD, false };
    const tag PatientSupportAngle = { "PatientSupportAngle", 0x300A0122, {1, 1}, VRType::DS, false };
    const tag PatientSupportAngleTolerance = { "PatientSupportAngleTolerance", 0x300A004C, {1, 1}, VRType::DS, false };
    const tag PatientSupportID = { "PatientSupportID", 0x300A0352, {1, 1}, VRType::SH, false };
    const tag PatientSupportRotationDirection = { "PatientSupportRotationDirection", 0x300A0123, {1, 1}, VRType::CS, false };
    const tag PatientSupportType = { "PatientSupportType", 0x300A0350, {1, 1}, VRType::CS, false };
    const tag PatientTelecomInformation = { "PatientTelecomInformation", 0x00102155, {1, 1}, VRType::LT, false };
    const tag PatientTelephoneNumbers = { "PatientTelephoneNumbers", 0x00102154, {1, 1}, VRType::SH, false };
    const tag PatientTransportArrangements = { "PatientTransportArrangements", 0x00401004, {1, 1}, VRType::LO, false };
    const tag PatientWeight = { "PatientWeight", 0x00101030, {1, 1}, VRType::DS, false };
    const tag PatternOffColorCIELabValue = { "PatternOffColorCIELabValue", 0x00700252, {3, 3}, VRType::US, false };
    const tag PatternOffOpacity = { "PatternOffOpacity", 0x00700285, {1, 1}, VRType::FL, false };
    const tag PatternOnColorCIELabValue = { "PatternOnColorCIELabValue", 0x00700251, {3, 3}, VRType::US, false };
    const tag PatternOnOpacity = { "PatternOnOpacity", 0x00700284, {1, 1}, VRType::FL, false };
    const tag PauseBetweenFrames = { "PauseBetweenFrames", 0x00540038, {1, 1}, VRType::IS, false };
    const tag PercentPhaseFieldOfView = { "PercentPhaseFieldOfView", 0x00180094, {1, 1}, VRType::DS, false };
    const tag PercentSampling = { "PercentSampling", 0x00180093, {1, 1}, VRType::DS, false };
    const tag PerformedLocation = { "PerformedLocation", 0x00400243, {1, 1}, VRType::SH, false };
    const tag PerformedProcedureCodeSequence = { "PerformedProcedureCodeSequence", 0x0040A372, {1, 1}, VRType::SQ, false };
    const tag PerformedProcedureStepDescription = { "PerformedProcedureStepDescription", 0x00400254, {1, 1}, VRType::LO, false };
    const tag PerformedProcedureStepDiscontinuationReasonCodeSequence = { "PerformedProcedureStepDiscontinuationReasonCodeSequence", 0x00400281, {1, 1}, VRType::SQ, false };
    const tag PerformedProcedureStepEndDate = { "PerformedProcedureStepEndDate", 0x00400250, {1, 1}, VRType::DA, false };
    const tag PerformedProcedureStepEndDateTime = { "PerformedProcedureStepEndDateTime", 0x00404051, {1, 1}, VRType::DT, false };
    const tag PerformedProcedureStepEndTime = { "PerformedProcedureStepEndTime", 0x00400251, {1, 1}, VRType::TM, false };
    const tag PerformedProcedureStepID = { "PerformedProcedureStepID", 0x00400253, {1, 1}, VRType::SH, false };
    const tag PerformedProcedureStepStartDate = { "PerformedProcedureStepStartDate", 0x00400244, {1, 1}, VRType::DA, false };
    const tag PerformedProcedureStepStartDateTime = { "PerformedProcedureStepStartDateTime", 0x00404050, {1, 1}, VRType::DT, false };
    const tag PerformedProcedureStepStartTime = { "PerformedProcedureStepStartTime", 0x00400245, {1, 1}, VRType::TM, false };
    const tag PerformedProcedureStepStatus = { "PerformedProcedureStepStatus", 0x00400252, {1, 1}, VRType::CS, false };
    const tag PerformedProcedureTypeDescription = { "PerformedProcedureTypeDescription", 0x00400255, {1, 1}, VRType::LO, false };
    const tag PerformedProcessingApplicationsCodeSequence = { "PerformedProcessingApplicationsCodeSequence", 0x00404007, {1, 1}, VRType::SQ, false };
    const tag PerformedProcessingParametersSequence = { "PerformedProcessingParametersSequence", 0x00741212, {1, 1}, VRType::SQ, false };
    const tag PerformedProtocolCodeSequence = { "PerformedProtocolCodeSequence", 0x00400260, {1, 1}, VRType::SQ, false };
    const tag PerformedProtocolType = { "PerformedProtocolType", 0x00400261, {1, 1}, VRType::CS, false };
    const tag PerformedSeriesSequence = { "PerformedSeriesSequence", 0x00400340, {1, 1}, VRType::SQ, false };
    const tag PerformedStationAETitle = { "PerformedStationAETitle", 0x00400241, {1, 1}, VRType::AE, false };
    const tag PerformedStationClassCodeSequence = { "PerformedStationClassCodeSequence", 0x00404029, {1, 1}, VRType::SQ, false };
    const tag PerformedStationGeographicLocationCodeSequence = { "PerformedStationGeographicLocationCodeSequence", 0x00404030, {1, 1}, VRType::SQ, false };
    const tag PerformedStationName = { "PerformedStationName", 0x00400242, {1, 1}, VRType::SH, false };
    const tag PerformedStationNameCodeSequence = { "PerformedStationNameCodeSequence", 0x00404028, {1, 1}, VRType::SQ, false };
    const tag PerformedWorkitemCodeSequence = { "PerformedWorkitemCodeSequence", 0x00404019, {1, 1}, VRType::SQ, false };
    const tag PerformingPhysicianIdentificationSequence = { "PerformingPhysicianIdentificationSequence", 0x00081052, {1, 1}, VRType::SQ, false };
    const tag PerformingPhysicianName = { "PerformingPhysicianName", 0x00081050, {1, 1}, VRType::PN, false };
    const tag PerFrameFunctionalGroupsSequence = { "PerFrameFunctionalGroupsSequence", 0x52009230, {1, 1}, VRType::SQ, false };
    const tag PerimeterTable = { "PerimeterTable", 0x00280070, {1, 1}, VRType::US, false };
    const tag PerimeterValue = { "PerimeterValue", 0x00280071, {1, 1}, VRType::US, true };
    const tag PerProjectionAcquisitionSequence = { "PerProjectionAcquisitionSequence", 0x00189538, {1, 1}, VRType::SQ, false };
    const tag PersonAddress = { "PersonAddress", 0x00401102, {1, 1}, VRType::ST, false };
    const tag PersonIdentificationCodeSequence = { "PersonIdentificationCodeSequence", 0x00401101, {1, 1}, VRType::SQ, false };
    const tag PersonName = { "PersonName", 0x0040A123, {1, 1}, VRType::PN, false };
    const tag PersonTelecomInformation = { "PersonTelecomInformation", 0x00401104, {1, 1}, VRType::LT, false };
    const tag PersonTelephoneNumbers = { "PersonTelephoneNumbers", 0x00401103, {1, 1}, VRType::LO, false };
    const tag PertinentDocumentsSequence = { "PertinentDocumentsSequence", 0x00380100, {1, 1}, VRType::SQ, false };
    const tag PertinentOtherEvidenceSequence = { "PertinentOtherEvidenceSequence", 0x0040A385, {1, 1}, VRType::SQ, false };
    const tag PertinentResourcesSequence = { "PertinentResourcesSequence", 0x00380101, {1, 1}, VRType::SQ, false };
    const tag PETDetectorMotionDetailsSequence = { "PETDetectorMotionDetailsSequence", 0x00189733, {1, 1}, VRType::SQ, false };
    const tag PETFrameAcquisitionSequence = { "PETFrameAcquisitionSequence", 0x00189732, {1, 1}, VRType::SQ, false };
    const tag PETFrameCorrectionFactorsSequence = { "PETFrameCorrectionFactorsSequence", 0x00189736, {1, 1}, VRType::SQ, false };
    const tag PETFrameTypeSequence = { "PETFrameTypeSequence", 0x00189751, {1, 1}, VRType::SQ, false };
    const tag PETPositionSequence = { "PETPositionSequence", 0x00189735, {1, 1}, VRType::SQ, false };
    const tag PETReconstructionSequence = { "PETReconstructionSequence", 0x00189749, {1, 1}, VRType::SQ, false };
    const tag PETTableDynamicsSequence = { "PETTableDynamicsSequence", 0x00189734, {1, 1}, VRType::SQ, false };
    const tag PhantomType = { "PhantomType", 0x40101046, {1, 1}, VRType::CS, false };
    const tag PhaseContrast = { "PhaseContrast", 0x00189014, {1, 1}, VRType::CS, false };
    const tag PhaseDelay = { "PhaseDelay", 0x00540036, {1, 1}, VRType::IS, false };
    const tag PhaseDescription = { "PhaseDescription", 0x00540039, {1, 1}, VRType::CS, false };
    const tag PhaseInformationSequence = { "PhaseInformationSequence", 0x00540032, {1, 1}, VRType::SQ, false };
    const tag PhaseNumber = { "PhaseNumber", 0x00200015, {1, 1}, VRType::IS, false };
    const tag PhaseVector = { "PhaseVector", 0x00540030, {1, 1}, VRType::US, false };
    const tag PhosphorType = { "PhosphorType", 0x00181261, {1, 1}, VRType::LO, false };
    const tag PhotometricInterpretation = { "PhotometricInterpretation", 0x00280004, {1, 1}, VRType::CS, false };
    const tag PhototimerSetting = { "PhototimerSetting", 0x00187065, {1, 1}, VRType::DS, false };
    const tag PhysicalDeltaX = { "PhysicalDeltaX", 0x0018602C, {1, 1}, VRType::FD, false };
    const tag PhysicalDeltaY = { "PhysicalDeltaY", 0x0018602E, {1, 1}, VRType::FD, false };
    const tag PhysicalDetectorSize = { "PhysicalDetectorSize", 0x00189429, {2, 2}, VRType::FL, false };
    const tag PhysicalUnitsXDirection = { "PhysicalUnitsXDirection", 0x00186024, {1, 1}, VRType::US, false };
    const tag PhysicalUnitsYDirection = { "PhysicalUnitsYDirection", 0x00186026, {1, 1}, VRType::US, false };
    const tag PhysicianApprovingInterpretation = { "PhysicianApprovingInterpretation", 0x40080114, {1, 1}, VRType::PN, false };
    const tag PhysiciansOfRecord = { "PhysiciansOfRecord", 0x00081048, {1, 1}, VRType::PN, false };
    const tag PhysiciansOfRecordIdentificationSequence = { "PhysiciansOfRecordIdentificationSequence", 0x00081049, {1, 1}, VRType::SQ, false };
    const tag PhysiciansReadingStudyIdentificationSequence = { "PhysiciansReadingStudyIdentificationSequence", 0x00081062, {1, 1}, VRType::SQ, false };
    const tag PixelAspectRatio = { "PixelAspectRatio", 0x00280034, {2, 2}, VRType::IS, false };
    const tag PixelBandwidth = { "PixelBandwidth", 0x00180095, {1, 1}, VRType::DS, false };
    const tag PixelComponentDataType = { "PixelComponentDataType", 0x0018604E, {1, 1}, VRType::US, false };
    const tag PixelComponentMask = { "PixelComponentMask", 0x00186046, {1, 1}, VRType::UL, false };
    const tag PixelComponentOrganization = { "PixelComponentOrganization", 0x00186044, {1, 1}, VRType::US, false };
    const tag PixelComponentPhysicalUnits = { "PixelComponentPhysicalUnits", 0x0018604C, {1, 1}, VRType::US, false };
    const tag PixelComponentRangeStart = { "PixelComponentRangeStart", 0x00186048, {1, 1}, VRType::UL, false };
    const tag PixelComponentRangeStop = { "PixelComponentRangeStop", 0x0018604A, {1, 1}, VRType::UL, false };
    const tag PixelCoordinatesSetTrial = { "PixelCoordinatesSetTrial", 0x0040A29A, {2, 2}, VRType::SL, false };
    const tag PixelData = { "PixelData", 0x7FE00010, {1, 1}, VRType::OB, true };
    const tag PixelDataAreaOriginRelativeToFOV = { "PixelDataAreaOriginRelativeToFOV", 0x00187036, {2, 2}, VRType::FL, false };
    const tag PixelDataAreaRotationAngleRelativeToFOV = { "PixelDataAreaRotationAngleRelativeToFOV", 0x00187038, {1, 1}, VRType::FL, false };
    const tag PixelDataProviderURL = { "PixelDataProviderURL", 0x00287FE0, {1, 1}, VRType::UR, false };
    const tag PixelIntensityRelationship = { "PixelIntensityRelationship", 0x00281040, {1, 1}, VRType::CS, false };
    const tag PixelIntensityRelationshipLUTSequence = { "PixelIntensityRelationshipLUTSequence", 0x00289422, {1, 1}, VRType::SQ, false };
    const tag PixelIntensityRelationshipSign = { "PixelIntensityRelationshipSign", 0x00281041, {1, 1}, VRType::SS, false };
    const tag PixelMeasuresSequence = { "PixelMeasuresSequence", 0x00289110, {1, 1}, VRType::SQ, false };
    const tag PixelOriginInterpretation = { "PixelOriginInterpretation", 0x00480301, {1, 1}, VRType::CS, false };
    const tag PixelPaddingRangeLimit = { "PixelPaddingRangeLimit", 0x00280121, {1, 1}, VRType::US, true };
    const tag PixelPaddingValue = { "PixelPaddingValue", 0x00280120, {1, 1}, VRType::US, true };
    const tag PixelPresentation = { "PixelPresentation", 0x00089205, {1, 1}, VRType::CS, false };
    const tag PixelRepresentation = { "PixelRepresentation", 0x00280103, {1, 1}, VRType::US, false };
    const tag PixelShiftFrameRange = { "PixelShiftFrameRange", 0x00289506, {2, 2}, VRType::US, false };
    const tag PixelShiftSequence = { "PixelShiftSequence", 0x00289501, {1, 1}, VRType::SQ, false };
    const tag PixelSpacing = { "PixelSpacing", 0x00280030, {2, 2}, VRType::DS, false };
    const tag PixelSpacingCalibrationDescription = { "PixelSpacingCalibrationDescription", 0x00280A04, {1, 1}, VRType::LO, false };
    const tag PixelSpacingCalibrationType = { "PixelSpacingCalibrationType", 0x00280A02, {1, 1}, VRType::CS, false };
    const tag PixelSpacingSequence = { "PixelSpacingSequence", 0x004008D8, {1, 1}, VRType::SQ, false };
    const tag PixelValueMappingCodeSequence = { "PixelValueMappingCodeSequence", 0x00409098, {1, 1}, VRType::SQ, false };
    const tag PixelValueMappingExplanation = { "PixelValueMappingExplanation", 0x00221454, {1, 1}, VRType::LO, false };
    const tag PixelValueMappingToCodedConceptSequence = { "PixelValueMappingToCodedConceptSequence", 0x00221450, {1, 1}, VRType::SQ, false };
    const tag PixelValueTransformationSequence = { "PixelValueTransformationSequence", 0x00289145, {1, 1}, VRType::SQ, false };
    const tag PlacerOrderNumberImagingServiceRequest = { "PlacerOrderNumberImagingServiceRequest", 0x00402016, {1, 1}, VRType::LO, false };
    const tag PlacerOrderNumberImagingServiceRequestRetired = { "PlacerOrderNumberImagingServiceRequestRetired", 0x00402006, {1, 1}, VRType::SH, false };
    const tag PlacerOrderNumberProcedure = { "PlacerOrderNumberProcedure", 0x00401006, {1, 1}, VRType::SH, false };
    const tag PlanarConfiguration = { "PlanarConfiguration", 0x00280006, {1, 1}, VRType::US, false };
    const tag Plane = { "Plane", 0x00701305, {4, 4}, VRType::FD, false };
    const tag PlaneIdentification = { "PlaneIdentification", 0x00189457, {1, 1}, VRType::CS, false };
    const tag PlaneNormal = { "PlaneNormal", 0x00701306, {3, 3}, VRType::FD, false };
    const tag PlaneOrientationSequence = { "PlaneOrientationSequence", 0x00209116, {1, 1}, VRType::SQ, false };
    const tag PlaneOrientationVolumeSequence = { "PlaneOrientationVolumeSequence", 0x0020930F, {1, 1}, VRType::SQ, false };
    const tag PlanePositionSequence = { "PlanePositionSequence", 0x00209113, {1, 1}, VRType::SQ, false };
    const tag PlanePositionSlideSequence = { "PlanePositionSlideSequence", 0x0048021A, {1, 1}, VRType::SQ, false };
    const tag PlanePositionVolumeSequence = { "PlanePositionVolumeSequence", 0x0020930E, {1, 1}, VRType::SQ, false };
    const tag Planes = { "Planes", 0x00280012, {1, 1}, VRType::US, false };
    const tag PlanesInAcquisition = { "PlanesInAcquisition", 0x00189410, {1, 1}, VRType::CS, false };
    const tag PlanIntent = { "PlanIntent", 0x300A000A, {1, 1}, VRType::CS, false };
    const tag PlannedVerificationImageSequence = { "PlannedVerificationImageSequence", 0x300A00CA, {1, 1}, VRType::SQ, false };
    const tag PlanningLandmarkDescription = { "PlanningLandmarkDescription", 0x00686540, {1, 1}, VRType::LO, false };
    const tag PlanningLandmarkID = { "PlanningLandmarkID", 0x00686530, {1, 1}, VRType::US, false };
    const tag PlanningLandmarkIdentificationCodeSequence = { "PlanningLandmarkIdentificationCodeSequence", 0x00686545, {1, 1}, VRType::SQ, false };
    const tag PlanningLandmarkLineSequence = { "PlanningLandmarkLineSequence", 0x00686510, {1, 1}, VRType::SQ, false };
    const tag PlanningLandmarkPlaneSequence = { "PlanningLandmarkPlaneSequence", 0x00686520, {1, 1}, VRType::SQ, false };
    const tag PlanningLandmarkPointSequence = { "PlanningLandmarkPointSequence", 0x00686500, {1, 1}, VRType::SQ, false };
    const tag PlateID = { "PlateID", 0x00181004, {1, 1}, VRType::LO, false };
    const tag PlateType = { "PlateType", 0x00181260, {1, 1}, VRType::SH, false };
    const tag PointCoordinatesData = { "PointCoordinatesData", 0x00660016, {1, 1}, VRType::OF, false };
    const tag PointPositionAccuracy = { "PointPositionAccuracy", 0x00660017, {3, 3}, VRType::FL, false };
    const tag PointsBoundingBoxCoordinates = { "PointsBoundingBoxCoordinates", 0x0066001A, {6, 6}, VRType::FL, false };
    const tag Polarity = { "Polarity", 0x20200020, {1, 1}, VRType::CS, false };
    const tag PositionerIsocenterDetectorRotationAngle = { "PositionerIsocenterDetectorRotationAngle", 0x00189465, {1, 1}, VRType::FL, false };
    const tag PositionerIsocenterPrimaryAngle = { "PositionerIsocenterPrimaryAngle", 0x00189463, {1, 1}, VRType::FL, false };
    const tag PositionerIsocenterSecondaryAngle = { "PositionerIsocenterSecondaryAngle", 0x00189464, {1, 1}, VRType::FL, false };
    const tag PositionerMotion = { "PositionerMotion", 0x00181500, {1, 1}, VRType::CS, false };
    const tag PositionerPositionSequence = { "PositionerPositionSequence", 0x00189405, {1, 1}, VRType::SQ, false };
    const tag PositionerPrimaryAngle = { "PositionerPrimaryAngle", 0x00181510, {1, 1}, VRType::DS, false };
    const tag PositionerPrimaryAngleDirection = { "PositionerPrimaryAngleDirection", 0x00189559, {1, 1}, VRType::CS, false };
    const tag PositionerPrimaryAngleIncrement = { "PositionerPrimaryAngleIncrement", 0x00181520, {1, 1}, VRType::DS, false };
    const tag PositionerSecondaryAngle = { "PositionerSecondaryAngle", 0x00181511, {1, 1}, VRType::DS, false };
    const tag PositionerSecondaryAngleIncrement = { "PositionerSecondaryAngleIncrement", 0x00181521, {1, 1}, VRType::DS, false };
    const tag PositionerType = { "PositionerType", 0x00181508, {1, 1}, VRType::CS, false };
    const tag PositioningLandmarkSequence = { "PositioningLandmarkSequence", 0x0018991D, {1, 1}, VRType::SQ, false };
    const tag PositioningMethodCodeSequence = { "PositioningMethodCodeSequence", 0x0018991C, {1, 1}, VRType::SQ, false };
    const tag PositionMeasuringDeviceUsed = { "PositionMeasuringDeviceUsed", 0x0018980C, {1, 1}, VRType::CS, false };
    const tag PositionOfIsocenterProjection = { "PositionOfIsocenterProjection", 0x00189430, {2, 2}, VRType::FL, false };
    const tag PositionReferenceIndicator = { "PositionReferenceIndicator", 0x00201040, {1, 1}, VRType::LO, false };
    const tag PositiveCatchTrialsQuantity = { "PositiveCatchTrialsQuantity", 0x00240056, {1, 1}, VRType::US, false };
    const tag PostDeformationMatrixRegistrationSequence = { "PostDeformationMatrixRegistrationSequence", 0x00640010, {1, 1}, VRType::SQ, false };
    const tag PostprocessingFunction = { "PostprocessingFunction", 0x00185021, {1, 1}, VRType::LO, false };
    const tag PotentialDiagnosticTasks = { "PotentialDiagnosticTasks", 0x0018990A, {1, 1}, VRType::UC, false };
    const tag PotentialReasonsForProcedure = { "PotentialReasonsForProcedure", 0x00189908, {1, 1}, VRType::UC, false };
    const tag PotentialReasonsForProcedureCodeSequence = { "PotentialReasonsForProcedureCodeSequence", 0x00189909, {1, 1}, VRType::SQ, false };
    const tag PotentialRequestedProcedureCodeSequence = { "PotentialRequestedProcedureCodeSequence", 0x00189907, {1, 1}, VRType::SQ, false };
    const tag PotentialScheduledProtocolCodeSequence = { "PotentialScheduledProtocolCodeSequence", 0x00189906, {1, 1}, VRType::SQ, false };
    const tag PotentialThreatObjectID = { "PotentialThreatObjectID", 0x40101010, {1, 1}, VRType::US, false };
    const tag PRCSToRCSOrientation = { "PRCSToRCSOrientation", 0x4010107E, {6, 6}, VRType::DS, false };
    const tag PreAmplifierEquipmentSequence = { "PreAmplifierEquipmentSequence", 0x0014400E, {1, 1}, VRType::SQ, false };
    const tag PreAmplifierNotes = { "PreAmplifierNotes", 0x0014400F, {1, 1}, VRType::LT, false };
    const tag PreAmplifierSettingsSequence = { "PreAmplifierSettingsSequence", 0x00144040, {1, 1}, VRType::SQ, false };
    const tag PredecessorDocumentsSequence = { "PredecessorDocumentsSequence", 0x0040A360, {1, 1}, VRType::SQ, false };
    const tag PredecessorProtocolSequence = { "PredecessorProtocolSequence", 0x0018990E, {1, 1}, VRType::SQ, false };
    const tag PredecessorStructureSetSequence = { "PredecessorStructureSetSequence", 0x30060018, {1, 1}, VRType::SQ, false };
    const tag PreDeformationMatrixRegistrationSequence = { "PreDeformationMatrixRegistrationSequence", 0x0064000F, {1, 1}, VRType::SQ, false };
    const tag PredictedRefractiveError = { "PredictedRefractiveError", 0x00221054, {1, 1}, VRType::FL, false };
    const tag PredictorColumns = { "PredictorColumns", 0x00280081, {1, 1}, VRType::US, false };
    const tag PredictorConstants = { "PredictorConstants", 0x00280082, {1, 1}, VRType::US, false };
    const tag PredictorRows = { "PredictorRows", 0x00280080, {1, 1}, VRType::US, false };
    const tag PreferredPlaybackSequencing = { "PreferredPlaybackSequencing", 0x00181244, {1, 1}, VRType::US, false };
    const tag PregnancyStatus = { "PregnancyStatus", 0x001021C0, {1, 1}, VRType::US, false };
    const tag PreliminaryFlag = { "PreliminaryFlag", 0x0040A496, {1, 1}, VRType::CS, false };
    const tag PreMedication = { "PreMedication", 0x00400012, {1, 1}, VRType::LO, false };
    const tag PrescriptionDescription = { "PrescriptionDescription", 0x300A000E, {1, 1}, VRType::ST, false };
    const tag PresentationAnimationStyle = { "PresentationAnimationStyle", 0x00701A01, {1, 1}, VRType::CS, false };
    const tag PresentationCreationDate = { "PresentationCreationDate", 0x00700082, {1, 1}, VRType::DA, false };
    const tag PresentationCreationTime = { "PresentationCreationTime", 0x00700083, {1, 1}, VRType::TM, false };
    const tag PresentationDisplayCollectionUID = { "PresentationDisplayCollectionUID", 0x00701101, {1, 1}, VRType::UI, false };
    const tag PresentationGroupNumber = { "PresentationGroupNumber", 0x003A0241, {1, 1}, VRType::US, false };
    const tag PresentationInputType = { "PresentationInputType", 0x00701202, {1, 1}, VRType::CS, false };
    const tag PresentationIntentType = { "PresentationIntentType", 0x00080068, {1, 1}, VRType::CS, false };
    const tag PresentationLUTContentSequence = { "PresentationLUTContentSequence", 0x21300080, {1, 1}, VRType::SQ, false };
    const tag PresentationLUTFlag = { "PresentationLUTFlag", 0x20000069, {1, 1}, VRType::CS, false };
    const tag PresentationLUTSequence = { "PresentationLUTSequence", 0x20500010, {1, 1}, VRType::SQ, false };
    const tag PresentationLUTShape = { "PresentationLUTShape", 0x20500020, {1, 1}, VRType::CS, false };
    const tag PresentationPixelAspectRatio = { "PresentationPixelAspectRatio", 0x00700102, {2, 2}, VRType::IS, false };
    const tag PresentationPixelMagnificationRatio = { "PresentationPixelMagnificationRatio", 0x00700103, {1, 1}, VRType::FL, false };
    const tag PresentationPixelSpacing = { "PresentationPixelSpacing", 0x00700101, {2, 2}, VRType::DS, false };
    const tag PresentationSequenceCollectionUID = { "PresentationSequenceCollectionUID", 0x00701102, {1, 1}, VRType::UI, false };
    const tag PresentationSequencePositionIndex = { "PresentationSequencePositionIndex", 0x00701103, {1, 1}, VRType::US, false };
    const tag PresentationSizeMode = { "PresentationSizeMode", 0x00700100, {1, 1}, VRType::CS, false };
    const tag PresentationStateClassificationComponentSequence = { "PresentationStateClassificationComponentSequence", 0x00701801, {1, 1}, VRType::SQ, false };
    const tag PresentationStateCompositorComponentSequence = { "PresentationStateCompositorComponentSequence", 0x00701805, {1, 1}, VRType::SQ, false };
    const tag PresentedVisualStimuliDataFlag = { "PresentedVisualStimuliDataFlag", 0x00240037, {1, 1}, VRType::CS, false };
    const tag PreserveCompositeInstancesAfterMediaCreation = { "PreserveCompositeInstancesAfterMediaCreation", 0x2200000A, {1, 1}, VRType::CS, false };
    const tag PrimaryAnatomicStructureModifierSequence = { "PrimaryAnatomicStructureModifierSequence", 0x00082230, {1, 1}, VRType::SQ, false };
    const tag PrimaryAnatomicStructureSequence = { "PrimaryAnatomicStructureSequence", 0x00082228, {1, 1}, VRType::SQ, false };
    const tag PrimaryDosimeterUnit = { "PrimaryDosimeterUnit", 0x300A00B3, {1, 1}, VRType::CS, false };
    const tag PrimaryFluenceModeSequence = { "PrimaryFluenceModeSequence", 0x30020050, {1, 1}, VRType::SQ, false };
    const tag PrimaryPositionerIncrement = { "PrimaryPositionerIncrement", 0x00189514, {1, 1}, VRType::FL, false };
    const tag PrimaryPositionerIncrementSign = { "PrimaryPositionerIncrementSign", 0x00189518, {1, 1}, VRType::SS, false };
    const tag PrimaryPositionerScanArc = { "PrimaryPositionerScanArc", 0x00189508, {1, 1}, VRType::FL, false };
    const tag PrimaryPositionerScanStartAngle = { "PrimaryPositionerScanStartAngle", 0x00189510, {1, 1}, VRType::FL, false };
    const tag PrimaryPromptsCountsAccumulated = { "PrimaryPromptsCountsAccumulated", 0x00541310, {1, 1}, VRType::IS, false };
    const tag PrimitivePointIndexList = { "PrimitivePointIndexList", 0x00660029, {1, 1}, VRType::OW, false };
    const tag PrinterCharacteristicsSequence = { "PrinterCharacteristicsSequence", 0x21300015, {1, 1}, VRType::SQ, false };
    const tag PrinterConfigurationSequence = { "PrinterConfigurationSequence", 0x2000001E, {1, 1}, VRType::SQ, false };
    const tag PrinterName = { "PrinterName", 0x21100030, {1, 1}, VRType::LO, false };
    const tag PrinterPixelSpacing = { "PrinterPixelSpacing", 0x20100376, {2, 2}, VRType::DS, false };
    const tag PrinterResolutionID = { "PrinterResolutionID", 0x20100052, {1, 1}, VRType::CS, false };
    const tag PrinterStatus = { "PrinterStatus", 0x21100010, {1, 1}, VRType::CS, false };
    const tag PrinterStatusInfo = { "PrinterStatusInfo", 0x21100020, {1, 1}, VRType::CS, false };
    const tag PrintingBitDepth = { "PrintingBitDepth", 0x200000A1, {1, 1}, VRType::US, false };
    const tag PrintJobDescriptionSequence = { "PrintJobDescriptionSequence", 0x21200050, {1, 1}, VRType::SQ, false };
    const tag PrintJobID = { "PrintJobID", 0x21000010, {1, 1}, VRType::SH, false };
    const tag PrintManagementCapabilitiesSequence = { "PrintManagementCapabilitiesSequence", 0x21300010, {1, 1}, VRType::SQ, false };
    const tag PrintPriority = { "PrintPriority", 0x20000020, {1, 1}, VRType::CS, false };
    const tag PrintQueueID = { "PrintQueueID", 0x21100099, {1, 1}, VRType::SH, false };
    const tag PrismSequence = { "PrismSequence", 0x00460028, {1, 1}, VRType::SQ, false };
    const tag PrivateCreatorReference = { "PrivateCreatorReference", 0x00080302, {1, 1}, VRType::LO, false };
    const tag PrivateDataElement = { "PrivateDataElement", 0x00080308, {1, 1}, VRType::US, false };
    const tag PrivateDataElementCharacteristicsSequence = { "PrivateDataElementCharacteristicsSequence", 0x00080300, {1, 1}, VRType::SQ, false };
    const tag PrivateDataElementDefinitionSequence = { "PrivateDataElementDefinitionSequence", 0x00080310, {1, 1}, VRType::SQ, false };
    const tag PrivateDataElementDescription = { "PrivateDataElementDescription", 0x0008030E, {1, 1}, VRType::UT, false };
    const tag PrivateDataElementEncoding = { "PrivateDataElementEncoding", 0x0008030F, {1, 1}, VRType::UT, false };
    const tag PrivateDataElementKeyword = { "PrivateDataElementKeyword", 0x0008030D, {1, 1}, VRType::UC, false };
    const tag PrivateDataElementName = { "PrivateDataElementName", 0x0008030C, {1, 1}, VRType::UC, false };
    const tag PrivateDataElementNumberOfItems = { "PrivateDataElementNumberOfItems", 0x0008030B, {1, 2}, VRType::UL, false };
    const tag PrivateDataElementValueMultiplicity = { "PrivateDataElementValueMultiplicity", 0x00080309, {1, 3}, VRType::UL, false };
    const tag PrivateDataElementValueRepresentation = { "PrivateDataElementValueRepresentation", 0x0008030A, {1, 1}, VRType::CS, false };
    const tag PrivateGroupReference = { "PrivateGroupReference", 0x00080301, {1, 1}, VRType::US, false };
    const tag PrivateInformation = { "PrivateInformation", 0x00020102, {1, 1}, VRType::OB, false };
    const tag PrivateInformationCreatorUID = { "PrivateInformationCreatorUID", 0x00020100, {1, 1}, VRType::UI, false };
    const tag PrivateRecordUID = { "PrivateRecordUID", 0x00041432, {1, 1}, VRType::UI, false };
    const tag ProbeCenterLocationX = { "ProbeCenterLocationX", 0x00144058, {1, 1}, VRType::DS, false };
    const tag ProbeCenterLocationZ = { "ProbeCenterLocationZ", 0x00144059, {1, 1}, VRType::DS, false };
    const tag ProbeDriveEquipmentSequence = { "ProbeDriveEquipmentSequence", 0x00144080, {1, 1}, VRType::SQ, false };
    const tag ProbeDriveNotes = { "ProbeDriveNotes", 0x00144082, {1, 1}, VRType::LT, false };
    const tag ProbeDriveSettingsSequence = { "ProbeDriveSettingsSequence", 0x00144087, {1, 1}, VRType::SQ, false };
    const tag ProbeInductance = { "ProbeInductance", 0x00144084, {1, 1}, VRType::DS, false };
    const tag ProbeOrientationAngle = { "ProbeOrientationAngle", 0x00144089, {1, 1}, VRType::DS, false };
    const tag ProbeResistance = { "ProbeResistance", 0x00144085, {1, 1}, VRType::DS, false };
    const tag ProcedureCodeSequence = { "ProcedureCodeSequence", 0x00081032, {1, 1}, VRType::SQ, false };
    const tag ProcedureContextFlagTrial = { "ProcedureContextFlagTrial", 0x0040A603, {1, 1}, VRType::CS, false };
    const tag ProcedureContextSequenceTrial = { "ProcedureContextSequenceTrial", 0x0040A340, {1, 1}, VRType::SQ, false };
    const tag ProcedureCreationDate = { "ProcedureCreationDate", 0x00144076, {1, 1}, VRType::DA, false };
    const tag ProcedureExpirationDate = { "ProcedureExpirationDate", 0x00144078, {1, 1}, VRType::DA, false };
    const tag ProcedureIdentifierCodeSequenceTrial = { "ProcedureIdentifierCodeSequenceTrial", 0x0040A085, {1, 1}, VRType::SQ, false };
    const tag ProcedureLastModifiedDate = { "ProcedureLastModifiedDate", 0x0014407A, {1, 1}, VRType::DA, false };
    const tag ProcedureStepCancellationDateTime = { "ProcedureStepCancellationDateTime", 0x00404052, {1, 1}, VRType::DT, false };
    const tag ProcedureStepCommunicationsURISequence = { "ProcedureStepCommunicationsURISequence", 0x00741008, {1, 1}, VRType::SQ, false };
    const tag ProcedureStepDiscontinuationReasonCodeSequence = { "ProcedureStepDiscontinuationReasonCodeSequence", 0x0074100E, {1, 1}, VRType::SQ, false };
    const tag ProcedureStepLabel = { "ProcedureStepLabel", 0x00741204, {1, 1}, VRType::LO, false };
    const tag ProcedureStepProgress = { "ProcedureStepProgress", 0x00741004, {1, 1}, VRType::DS, false };
    const tag ProcedureStepProgressDescription = { "ProcedureStepProgressDescription", 0x00741006, {1, 1}, VRType::ST, false };
    const tag ProcedureStepProgressInformationSequence = { "ProcedureStepProgressInformationSequence", 0x00741002, {1, 1}, VRType::SQ, false };
    const tag ProcedureStepProgressParametersSequence = { "ProcedureStepProgressParametersSequence", 0x00741007, {1, 1}, VRType::SQ, false };
    const tag ProcedureStepRelationshipType = { "ProcedureStepRelationshipType", 0x00741222, {1, 1}, VRType::LO, false };
    const tag ProcedureStepState = { "ProcedureStepState", 0x00741000, {1, 1}, VRType::CS, false };
    const tag ProcedureTypeCodeSequence = { "ProcedureTypeCodeSequence", 0x00760020, {1, 1}, VRType::SQ, false };
    const tag ProcedureVersion = { "ProcedureVersion", 0x00144074, {1, 1}, VRType::SH, false };
    const tag ProcessingFunction = { "ProcessingFunction", 0x00185020, {1, 1}, VRType::LO, false };
    const tag ProductDescription = { "ProductDescription", 0x00440009, {1, 1}, VRType::LT, false };
    const tag ProductExpirationDateTime = { "ProductExpirationDateTime", 0x0044000B, {1, 1}, VRType::DT, false };
    const tag ProductLotIdentifier = { "ProductLotIdentifier", 0x0044000A, {1, 1}, VRType::LO, false };
    const tag ProductName = { "ProductName", 0x00440008, {1, 1}, VRType::LO, false };
    const tag ProductPackageIdentifier = { "ProductPackageIdentifier", 0x00440001, {1, 1}, VRType::ST, false };
    const tag ProductParameterSequence = { "ProductParameterSequence", 0x00440013, {1, 1}, VRType::SQ, false };
    const tag ProductTypeCodeSequence = { "ProductTypeCodeSequence", 0x00440007, {1, 1}, VRType::SQ, false };
    const tag ProjectionEponymousNameCodeSequence = { "ProjectionEponymousNameCodeSequence", 0x00185104, {1, 1}, VRType::SQ, false };
    const tag ProjectionPixelCalibrationSequence = { "ProjectionPixelCalibrationSequence", 0x00189401, {1, 1}, VRType::SQ, false };
    const tag PropertyLabel = { "PropertyLabel", 0x00142032, {1, 1}, VRType::SH, false };
    const tag ProposedStudySequence = { "ProposedStudySequence", 0x213000A0, {1, 1}, VRType::SQ, false };
    const tag ProtocolContextSequence = { "ProtocolContextSequence", 0x00400440, {1, 1}, VRType::SQ, false };
    const tag ProtocolDefinedPatientPosition = { "ProtocolDefinedPatientPosition", 0x00189947, {1, 1}, VRType::CS, false };
    const tag ProtocolDesignRationale = { "ProtocolDesignRationale", 0x00189910, {1, 1}, VRType::UT, false };
    const tag ProtocolElementCharacteristicsSummary = { "ProtocolElementCharacteristicsSummary", 0x00189923, {1, 1}, VRType::UT, false };
    const tag ProtocolElementName = { "ProtocolElementName", 0x00189922, {1, 1}, VRType::LO, false };
    const tag ProtocolElementNumber = { "ProtocolElementNumber", 0x00189921, {1, 1}, VRType::US, false };
    const tag ProtocolElementPurpose = { "ProtocolElementPurpose", 0x00189924, {1, 1}, VRType::UT, false };
    const tag ProtocolName = { "ProtocolName", 0x00181030, {1, 1}, VRType::LO, false };
    const tag ProtocolPlanningInformation = { "ProtocolPlanningInformation", 0x0018990F, {1, 1}, VRType::UT, false };
    const tag PseudoColorPaletteInstanceReferenceSequence = { "PseudoColorPaletteInstanceReferenceSequence", 0x00720705, {1, 1}, VRType::SQ, false };
    const tag PseudoColorType = { "PseudoColorType", 0x00720704, {1, 1}, VRType::CS, false };
    const tag PTOLocationDescription = { "PTOLocationDescription", 0x40101078, {1, 1}, VRType::ST, false };
    const tag PTORegionSequence = { "PTORegionSequence", 0x4010107B, {1, 1}, VRType::SQ, false };
    const tag PTORepresentationSequence = { "PTORepresentationSequence", 0x40101037, {1, 1}, VRType::SQ, false };
    const tag PulseNumber = { "PulseNumber", 0x30080172, {1, 1}, VRType::US, false };
    const tag PulseRepetitionFrequency = { "PulseRepetitionFrequency", 0x00186032, {1, 1}, VRType::UL, false };
    const tag PulseRepetitionInterval = { "PulseRepetitionInterval", 0x300A028C, {1, 1}, VRType::DS, false };
    const tag PulserEquipmentSequence = { "PulserEquipmentSequence", 0x00144002, {1, 1}, VRType::SQ, false };
    const tag PulserNotes = { "PulserNotes", 0x00144006, {1, 1}, VRType::LT, false };
    const tag PulserSettingsSequence = { "PulserSettingsSequence", 0x00144020, {1, 1}, VRType::SQ, false };
    const tag PulserType = { "PulserType", 0x00144004, {1, 1}, VRType::CS, false };
    const tag PulseSequenceName = { "PulseSequenceName", 0x00189005, {1, 1}, VRType::SH, false };
    const tag PulseSpecificBrachyControlPointDeliveredSequence = { "PulseSpecificBrachyControlPointDeliveredSequence", 0x30080171, {1, 1}, VRType::SQ, false };
    const tag PulseWidth = { "PulseWidth", 0x00144022, {1, 1}, VRType::DS, false };
    const tag PupilCentroidXCoordinate = { "PupilCentroidXCoordinate", 0x00460203, {1, 1}, VRType::FL, false };
    const tag PupilCentroidYCoordinate = { "PupilCentroidYCoordinate", 0x00460204, {1, 1}, VRType::FL, false };
    const tag PupilDilated = { "PupilDilated", 0x0022000D, {1, 1}, VRType::CS, false };
    const tag PupilSize = { "PupilSize", 0x00460044, {1, 1}, VRType::FD, false };
    const tag PurposeOfReferenceCodeSequence = { "PurposeOfReferenceCodeSequence", 0x0040A170, {1, 1}, VRType::SQ, false };
    const tag PVCRejection = { "PVCRejection", 0x00181085, {1, 1}, VRType::LO, false };
    const tag QAResultsSequence = { "QAResultsSequence", 0x0028700F, {1, 1}, VRType::SQ, false };
    const tag QRMeasurementsSequence = { "QRMeasurementsSequence", 0x40101071, {1, 1}, VRType::SQ, false };
    const tag QuadratureReceiveCoil = { "QuadratureReceiveCoil", 0x00189044, {1, 1}, VRType::CS, false };
    const tag QualityControlImage = { "QualityControlImage", 0x00280300, {1, 1}, VRType::CS, false };
    const tag QualityControlSubject = { "QualityControlSubject", 0x00100200, {1, 1}, VRType::CS, false };
    const tag QualityControlSubjectTypeCodeSequence = { "QualityControlSubjectTypeCodeSequence", 0x00100201, {1, 1}, VRType::SQ, false };
    const tag QualityThreshold = { "QualityThreshold", 0x00221630, {1, 1}, VRType::DS, false };
    const tag QuantifiedDefect = { "QuantifiedDefect", 0x00240098, {1, 1}, VRType::FL, false };
    const tag Quantity = { "Quantity", 0x00400294, {1, 1}, VRType::DS, false };
    const tag QuantityDefinitionSequence = { "QuantityDefinitionSequence", 0x00409220, {1, 1}, VRType::SQ, false };
    const tag QuantitySequence = { "QuantitySequence", 0x00400293, {1, 1}, VRType::SQ, false };
    const tag QueryRetrieveLevel = { "QueryRetrieveLevel", 0x00080052, {1, 1}, VRType::CS, false };
    const tag QueryRetrieveView = { "QueryRetrieveView", 0x00080053, {1, 1}, VRType::CS, false };
    const tag QueueStatus = { "QueueStatus", 0x21200010, {1, 1}, VRType::CS, false };
    const tag RadialPosition = { "RadialPosition", 0x00181142, {1, 1}, VRType::DS, false };
    const tag RadiationAtomicNumber = { "RadiationAtomicNumber", 0x300A0304, {1, 1}, VRType::IS, false };
    const tag RadiationChargeState = { "RadiationChargeState", 0x300A0306, {1, 1}, VRType::SS, false };
    const tag RadiationMachineName = { "RadiationMachineName", 0x30020020, {1, 1}, VRType::SH, false };
    const tag RadiationMachineSAD = { "RadiationMachineSAD", 0x30020022, {1, 1}, VRType::DS, false };
    const tag RadiationMachineSSD = { "RadiationMachineSSD", 0x30020024, {1, 1}, VRType::DS, false };
    const tag RadiationMassNumber = { "RadiationMassNumber", 0x300A0302, {1, 1}, VRType::IS, false };
    const tag RadiationMode = { "RadiationMode", 0x0018115A, {1, 1}, VRType::CS, false };
    const tag RadiationSetting = { "RadiationSetting", 0x00181155, {1, 1}, VRType::CS, false };
    const tag RadiationType = { "RadiationType", 0x300A00C6, {1, 1}, VRType::CS, false };
    const tag Radionuclide = { "Radionuclide", 0x00180030, {1, 1}, VRType::LO, false };
    const tag RadionuclideCodeSequence = { "RadionuclideCodeSequence", 0x00540300, {1, 1}, VRType::SQ, false };
    const tag RadionuclideHalfLife = { "RadionuclideHalfLife", 0x00181075, {1, 1}, VRType::DS, false };
    const tag RadionuclidePositronFraction = { "RadionuclidePositronFraction", 0x00181076, {1, 1}, VRType::DS, false };
    const tag RadionuclideTotalDose = { "RadionuclideTotalDose", 0x00181074, {1, 1}, VRType::DS, false };
    const tag Radiopharmaceutical = { "Radiopharmaceutical", 0x00180031, {1, 1}, VRType::LO, false };
    const tag RadiopharmaceuticalAdministrationEventUID = { "RadiopharmaceuticalAdministrationEventUID", 0x00083012, {1, 1}, VRType::UI, false };
    const tag RadiopharmaceuticalAgentNumber = { "RadiopharmaceuticalAgentNumber", 0x00189729, {1, 1}, VRType::US, false };
    const tag RadiopharmaceuticalCodeSequence = { "RadiopharmaceuticalCodeSequence", 0x00540304, {1, 1}, VRType::SQ, false };
    const tag RadiopharmaceuticalInformationSequence = { "RadiopharmaceuticalInformationSequence", 0x00540016, {1, 1}, VRType::SQ, false };
    const tag RadiopharmaceuticalRoute = { "RadiopharmaceuticalRoute", 0x00181070, {1, 1}, VRType::LO, false };
    const tag RadiopharmaceuticalSpecificActivity = { "RadiopharmaceuticalSpecificActivity", 0x00181077, {1, 1}, VRType::DS, false };
    const tag RadiopharmaceuticalStartDateTime = { "RadiopharmaceuticalStartDateTime", 0x00181078, {1, 1}, VRType::DT, false };
    const tag RadiopharmaceuticalStartTime = { "RadiopharmaceuticalStartTime", 0x00181072, {1, 1}, VRType::TM, false };
    const tag RadiopharmaceuticalStopDateTime = { "RadiopharmaceuticalStopDateTime", 0x00181079, {1, 1}, VRType::DT, false };
    const tag RadiopharmaceuticalStopTime = { "RadiopharmaceuticalStopTime", 0x00181073, {1, 1}, VRType::TM, false };
    const tag RadiopharmaceuticalUsageSequence = { "RadiopharmaceuticalUsageSequence", 0x00189737, {1, 1}, VRType::SQ, false };
    const tag RadiopharmaceuticalVolume = { "RadiopharmaceuticalVolume", 0x00181071, {1, 1}, VRType::DS, false };
    const tag RadiusAlongWedge = { "RadiusAlongWedge", 0x0014511F, {1, 1}, VRType::DS, false };
    const tag RadiusOfCircularCollimator = { "RadiusOfCircularCollimator", 0x00181712, {1, 1}, VRType::IS, false };
    const tag RadiusOfCircularExposureControlSensingRegion = { "RadiusOfCircularExposureControlSensingRegion", 0x00189441, {1, 1}, VRType::US, false };
    const tag RadiusOfCircularShutter = { "RadiusOfCircularShutter", 0x00181612, {1, 1}, VRType::IS, false };
    const tag RadiusOfCurvature = { "RadiusOfCurvature", 0x00460075, {1, 1}, VRType::FD, false };
    const tag RandomsCorrected = { "RandomsCorrected", 0x00189765, {1, 1}, VRType::CS, false };
    const tag RandomsCorrectionMethod = { "RandomsCorrectionMethod", 0x00541100, {1, 1}, VRType::CS, false };
    const tag RangeModulatorDescription = { "RangeModulatorDescription", 0x300A034A, {1, 1}, VRType::LO, false };
    const tag RangeModulatorGatingStartValue = { "RangeModulatorGatingStartValue", 0x300A0382, {1, 1}, VRType::FL, false };
    const tag RangeModulatorGatingStartWaterEquivalentThickness = { "RangeModulatorGatingStartWaterEquivalentThickness", 0x300A0386, {1, 1}, VRType::FL, false };
    const tag RangeModulatorGatingStopValue = { "RangeModulatorGatingStopValue", 0x300A0384, {1, 1}, VRType::FL, false };
    const tag RangeModulatorGatingStopWaterEquivalentThickness = { "RangeModulatorGatingStopWaterEquivalentThickness", 0x300A0388, {1, 1}, VRType::FL, false };
    const tag RangeModulatorID = { "RangeModulatorID", 0x300A0346, {1, 1}, VRType::SH, false };
    const tag RangeModulatorNumber = { "RangeModulatorNumber", 0x300A0344, {1, 1}, VRType::IS, false };
    const tag RangeModulatorSequence = { "RangeModulatorSequence", 0x300A0342, {1, 1}, VRType::SQ, false };
    const tag RangeModulatorSettingsSequence = { "RangeModulatorSettingsSequence", 0x300A0380, {1, 1}, VRType::SQ, false };
    const tag RangeModulatorType = { "RangeModulatorType", 0x300A0348, {1, 1}, VRType::CS, false };
    const tag RangeOfFreedom = { "RangeOfFreedom", 0x006864A0, {2, 2}, VRType::FD, false };
    const tag RangeShifterDescription = { "RangeShifterDescription", 0x300A0322, {1, 1}, VRType::LO, false };
    const tag RangeShifterID = { "RangeShifterID", 0x300A0318, {1, 1}, VRType::SH, false };
    const tag RangeShifterNumber = { "RangeShifterNumber", 0x300A0316, {1, 1}, VRType::IS, false };
    const tag RangeShifterSequence = { "RangeShifterSequence", 0x300A0314, {1, 1}, VRType::SQ, false };
    const tag RangeShifterSetting = { "RangeShifterSetting", 0x300A0362, {1, 1}, VRType::LO, false };
    const tag RangeShifterSettingsSequence = { "RangeShifterSettingsSequence", 0x300A0360, {1, 1}, VRType::SQ, false };
    const tag RangeShifterType = { "RangeShifterType", 0x300A0320, {1, 1}, VRType::CS, false };
    const tag RangeShifterWaterEquivalentThickness = { "RangeShifterWaterEquivalentThickness", 0x300A0366, {1, 1}, VRType::FL, false };
    const tag RangingDepth = { "RangingDepth", 0x00520009, {1, 1}, VRType::FD, false };
    const tag RationalDenominatorValue = { "RationalDenominatorValue", 0x0040A163, {1, 1}, VRType::UL, false };
    const tag RationalNumeratorValue = { "RationalNumeratorValue", 0x0040A162, {1, 1}, VRType::SL, false };
    const tag RawDataHandling = { "RawDataHandling", 0x00404040, {1, 1}, VRType::CS, false };
    const tag RealWorldValueFirstValueMapped = { "RealWorldValueFirstValueMapped", 0x00409216, {1, 1}, VRType::US, true };
    const tag RealWorldValueIntercept = { "RealWorldValueIntercept", 0x00409224, {1, 1}, VRType::FD, false };
    const tag RealWorldValueLastValueMapped = { "RealWorldValueLastValueMapped", 0x00409211, {1, 1}, VRType::US, true };
    const tag RealWorldValueLUTData = { "RealWorldValueLUTData", 0x00409212, {1, 1}, VRType::FD, false };
    const tag RealWorldValueMappingSequence = { "RealWorldValueMappingSequence", 0x00409096, {1, 1}, VRType::SQ, false };
    const tag RealWorldValueSlope = { "RealWorldValueSlope", 0x00409225, {1, 1}, VRType::FD, false };
    const tag ReasonForCancellation = { "ReasonForCancellation", 0x00741238, {1, 1}, VRType::LT, false };
    const tag ReasonForChannelOmission = { "ReasonForChannelOmission", 0x0074140A, {1, 1}, VRType::CS, false };
    const tag ReasonForChannelOmissionDescription = { "ReasonForChannelOmissionDescription", 0x0074140B, {1, 1}, VRType::LO, false };
    const tag ReasonForOmission = { "ReasonForOmission", 0x300C0112, {1, 1}, VRType::CS, false };
    const tag ReasonForOmissionDescription = { "ReasonForOmissionDescription", 0x300C0113, {1, 1}, VRType::LO, false };
    const tag ReasonForPerformedProcedureCodeSequence = { "ReasonForPerformedProcedureCodeSequence", 0x00401012, {1, 1}, VRType::SQ, false };
    const tag ReasonForRequestedProcedureCodeSequence = { "ReasonForRequestedProcedureCodeSequence", 0x0040100A, {1, 1}, VRType::SQ, false };
    const tag ReasonForStudy = { "ReasonForStudy", 0x00321030, {1, 1}, VRType::LO, false };
    const tag ReasonForTheAttributeModification = { "ReasonForTheAttributeModification", 0x04000565, {1, 1}, VRType::CS, false };
    const tag ReasonForTheImagingServiceRequest = { "ReasonForTheImagingServiceRequest", 0x00402001, {1, 1}, VRType::LO, false };
    const tag ReasonForTheRequestedProcedure = { "ReasonForTheRequestedProcedure", 0x00401002, {1, 1}, VRType::LO, false };
    const tag ReceiveCoilManufacturerName = { "ReceiveCoilManufacturerName", 0x00189041, {1, 1}, VRType::LO, false };
    const tag ReceiveCoilName = { "ReceiveCoilName", 0x00181250, {1, 1}, VRType::SH, false };
    const tag ReceiveCoilType = { "ReceiveCoilType", 0x00189043, {1, 1}, VRType::CS, false };
    const tag ReceiveProbeSequence = { "ReceiveProbeSequence", 0x00144086, {1, 1}, VRType::SQ, false };
    const tag ReceiverEquipmentSequence = { "ReceiverEquipmentSequence", 0x00144008, {1, 1}, VRType::SQ, false };
    const tag ReceiverNotes = { "ReceiverNotes", 0x0014400C, {1, 1}, VRType::LT, false };
    const tag ReceiverSettingsSequence = { "ReceiverSettingsSequence", 0x00144030, {1, 1}, VRType::SQ, false };
    const tag ReceiveTransducerSequence = { "ReceiveTransducerSequence", 0x00144011, {1, 1}, VRType::SQ, false };
    const tag ReceiveTransducerSettingsSequence = { "ReceiveTransducerSettingsSequence", 0x00144051, {1, 1}, VRType::SQ, false };
    const tag ReceivingAE = { "ReceivingAE", 0x00741234, {1, 1}, VRType::AE, false };
    const tag ReceivingApplicationEntityTitle = { "ReceivingApplicationEntityTitle", 0x00020018, {1, 1}, VRType::AE, false };
    const tag RecognitionCode = { "RecognitionCode", 0x00080010, {1, 1}, VRType::SH, false };
    const tag RecognizableVisualFeatures = { "RecognizableVisualFeatures", 0x00280302, {1, 1}, VRType::CS, false };
    const tag RecommendedAbsentPixelCIELabValue = { "RecommendedAbsentPixelCIELabValue", 0x00480015, {3, 3}, VRType::US, false };
    const tag RecommendedAnimationRate = { "RecommendedAnimationRate", 0x00701A03, {1, 1}, VRType::FD, false };
    const tag RecommendedDefaultValueSequence = { "RecommendedDefaultValueSequence", 0x00820035, {1, 1}, VRType::SQ, false };
    const tag RecommendedDisplayCIELabValue = { "RecommendedDisplayCIELabValue", 0x0062000D, {3, 3}, VRType::US, false };
    const tag RecommendedDisplayCIELabValueList = { "RecommendedDisplayCIELabValueList", 0x00660103, {1, 1}, VRType::OW, false };
    const tag RecommendedDisplayFrameRate = { "RecommendedDisplayFrameRate", 0x00082144, {1, 1}, VRType::IS, false };
    const tag RecommendedDisplayFrameRateInFloat = { "RecommendedDisplayFrameRateInFloat", 0x00089459, {1, 1}, VRType::FL, false };
    const tag RecommendedDisplayGrayscaleValue = { "RecommendedDisplayGrayscaleValue", 0x0062000C, {1, 1}, VRType::US, false };
    const tag RecommendedLineThickness = { "RecommendedLineThickness", 0x00660038, {1, 1}, VRType::FL, false };
    const tag RecommendedPointRadius = { "RecommendedPointRadius", 0x00660037, {1, 1}, VRType::FL, false };
    const tag RecommendedPresentationOpacity = { "RecommendedPresentationOpacity", 0x0066000C, {1, 1}, VRType::FL, false };
    const tag RecommendedPresentationType = { "RecommendedPresentationType", 0x0066000D, {1, 1}, VRType::CS, false };
    const tag RecommendedRotationPoint = { "RecommendedRotationPoint", 0x00686346, {2, 2}, VRType::FD, false };
    const tag RecommendedViewingMode = { "RecommendedViewingMode", 0x00281090, {1, 1}, VRType::CS, false };
    const tag ReconstructionAlgorithm = { "ReconstructionAlgorithm", 0x00189315, {1, 1}, VRType::CS, false };
    const tag ReconstructionAlgorithmSequence = { "ReconstructionAlgorithmSequence", 0x0018993D, {1, 1}, VRType::SQ, false };
    const tag ReconstructionAngle = { "ReconstructionAngle", 0x00189319, {1, 1}, VRType::FD, false };
    const tag ReconstructionDescription = { "ReconstructionDescription", 0x00189531, {1, 1}, VRType::LO, false };
    const tag ReconstructionDiameter = { "ReconstructionDiameter", 0x00181100, {1, 1}, VRType::DS, false };
    const tag ReconstructionEndLocationSequence = { "ReconstructionEndLocationSequence", 0x0018993C, {1, 1}, VRType::SQ, false };
    const tag ReconstructionFieldOfView = { "ReconstructionFieldOfView", 0x00189317, {2, 2}, VRType::FD, false };
    const tag ReconstructionIndex = { "ReconstructionIndex", 0x00209536, {1, 1}, VRType::US, false };
    const tag ReconstructionMethod = { "ReconstructionMethod", 0x00541103, {1, 1}, VRType::LO, false };
    const tag ReconstructionPixelSpacing = { "ReconstructionPixelSpacing", 0x00189322, {2, 2}, VRType::FD, false };
    const tag ReconstructionProtocolElementSequence = { "ReconstructionProtocolElementSequence", 0x00189934, {1, 1}, VRType::SQ, false };
    const tag ReconstructionProtocolElementSpecificationSequence = { "ReconstructionProtocolElementSpecificationSequence", 0x00189933, {1, 1}, VRType::SQ, false };
    const tag ReconstructionStartLocationSequence = { "ReconstructionStartLocationSequence", 0x0018993B, {1, 1}, VRType::SQ, false };
    const tag ReconstructionTargetCenterLocationSequence = { "ReconstructionTargetCenterLocationSequence", 0x0018993E, {1, 1}, VRType::SQ, false };
    const tag ReconstructionTargetCenterPatient = { "ReconstructionTargetCenterPatient", 0x00189318, {3, 3}, VRType::FD, false };
    const tag ReconstructionType = { "ReconstructionType", 0x00189756, {1, 1}, VRType::CS, false };
    const tag RecordedBlockSequence = { "RecordedBlockSequence", 0x300800D0, {1, 1}, VRType::SQ, false };
    const tag RecordedBrachyAccessoryDeviceSequence = { "RecordedBrachyAccessoryDeviceSequence", 0x30080120, {1, 1}, VRType::SQ, false };
    const tag RecordedChannelSequence = { "RecordedChannelSequence", 0x30080130, {1, 1}, VRType::SQ, false };
    const tag RecordedChannelShieldSequence = { "RecordedChannelShieldSequence", 0x30080150, {1, 1}, VRType::SQ, false };
    const tag RecordedCompensatorSequence = { "RecordedCompensatorSequence", 0x300800C0, {1, 1}, VRType::SQ, false };
    const tag RecordedLateralSpreadingDeviceSequence = { "RecordedLateralSpreadingDeviceSequence", 0x300800F4, {1, 1}, VRType::SQ, false };
    const tag RecordedRangeModulatorSequence = { "RecordedRangeModulatorSequence", 0x300800F6, {1, 1}, VRType::SQ, false };
    const tag RecordedRangeShifterSequence = { "RecordedRangeShifterSequence", 0x300800F2, {1, 1}, VRType::SQ, false };
    const tag RecordedSnoutSequence = { "RecordedSnoutSequence", 0x300800F0, {1, 1}, VRType::SQ, false };
    const tag RecordedSourceApplicatorSequence = { "RecordedSourceApplicatorSequence", 0x30080140, {1, 1}, VRType::SQ, false };
    const tag RecordedSourceSequence = { "RecordedSourceSequence", 0x30080100, {1, 1}, VRType::SQ, false };
    const tag RecordedWedgeSequence = { "RecordedWedgeSequence", 0x300800B0, {1, 1}, VRType::SQ, false };
    const tag RecordInUseFlag = { "RecordInUseFlag", 0x00041410, {1, 1}, VRType::US, false };
    const tag RectificationType = { "RectificationType", 0x00181156, {1, 1}, VRType::CS, false };
    const tag RectifierSmoothing = { "RectifierSmoothing", 0x00144034, {1, 1}, VRType::DS, false };
    const tag RectilinearPhaseEncodeReordering = { "RectilinearPhaseEncodeReordering", 0x00189034, {1, 1}, VRType::CS, false };
    const tag RedPaletteColorLookupTableData = { "RedPaletteColorLookupTableData", 0x00281201, {1, 1}, VRType::OW, false };
    const tag RedPaletteColorLookupTableDescriptor = { "RedPaletteColorLookupTableDescriptor", 0x00281101, {3, 3}, VRType::US, true };
    const tag Reference = { "Reference", 0x00201020, {1, 1}, VRType::LO, false };
    const tag ReferenceAirKermaRate = { "ReferenceAirKermaRate", 0x300A022A, {1, 1}, VRType::DS, false };
    const tag ReferenceBasisCodeSequence = { "ReferenceBasisCodeSequence", 0x00189902, {1, 1}, VRType::SQ, false };
    const tag ReferenceCoordinates = { "ReferenceCoordinates", 0x00220032, {2, 2}, VRType::FL, false };
    const tag ReferencedAccessionSequenceTrial = { "ReferencedAccessionSequenceTrial", 0x0040A313, {1, 1}, VRType::SQ, false };
    const tag ReferencedAssertionUID = { "ReferencedAssertionUID", 0x00440108, {1, 1}, VRType::UI, false };
    const tag ReferencedBasicAnnotationBoxSequence = { "ReferencedBasicAnnotationBoxSequence", 0x20100520, {1, 1}, VRType::SQ, false };
    const tag ReferencedBeamNumber = { "ReferencedBeamNumber", 0x300C0006, {1, 1}, VRType::IS, false };
    const tag ReferencedBeamSequence = { "ReferencedBeamSequence", 0x300C0004, {1, 1}, VRType::SQ, false };
    const tag ReferencedBlockNumber = { "ReferencedBlockNumber", 0x300C00E0, {1, 1}, VRType::IS, false };
    const tag ReferencedBolusSequence = { "ReferencedBolusSequence", 0x300C00B0, {1, 1}, VRType::SQ, false };
    const tag ReferencedBrachyAccessoryDeviceNumber = { "ReferencedBrachyAccessoryDeviceNumber", 0x30080122, {1, 1}, VRType::IS, false };
    const tag ReferencedBrachyApplicationSetupNumber = { "ReferencedBrachyApplicationSetupNumber", 0x300C000C, {1, 1}, VRType::IS, false };
    const tag ReferencedBrachyApplicationSetupSequence = { "ReferencedBrachyApplicationSetupSequence", 0x300C000A, {1, 1}, VRType::SQ, false };
    const tag ReferencedCalculatedDoseReferenceNumber = { "ReferencedCalculatedDoseReferenceNumber", 0x30080092, {1, 1}, VRType::IS, false };
    const tag ReferencedCalculatedDoseReferenceSequence = { "ReferencedCalculatedDoseReferenceSequence", 0x30080090, {1, 1}, VRType::SQ, false };
    const tag ReferencedChannelNumber = { "ReferencedChannelNumber", 0x00741406, {1, 1}, VRType::IS, false };
    const tag ReferencedChannelShieldNumber = { "ReferencedChannelShieldNumber", 0x30080152, {1, 1}, VRType::IS, false };
    const tag ReferencedColorPaletteInstanceUID = { "ReferencedColorPaletteInstanceUID", 0x00280304, {1, 1}, VRType::UI, false };
    const tag ReferencedComparisonSOPInstanceSequence = { "ReferencedComparisonSOPInstanceSequence", 0x00820005, {1, 1}, VRType::SQ, false };
    const tag ReferencedCompensatorNumber = { "ReferencedCompensatorNumber", 0x300C00D0, {1, 1}, VRType::IS, false };
    const tag ReferencedContentItem = { "ReferencedContentItem", 0x00701904, {1, 1}, VRType::UI, false };
    const tag ReferencedContentItemIdentifier = { "ReferencedContentItemIdentifier", 0x0040DB73, {1, 1}, VRType::UL, false };
    const tag ReferencedControlPointIndex = { "ReferencedControlPointIndex", 0x300C00F0, {1, 1}, VRType::IS, false };
    const tag ReferencedControlPointSequence = { "ReferencedControlPointSequence", 0x300C00F2, {1, 1}, VRType::SQ, false };
    const tag ReferencedCurveSequence = { "ReferencedCurveSequence", 0x00081145, {1, 1}, VRType::SQ, false };
    const tag ReferencedDateTime = { "ReferencedDateTime", 0x0040A13A, {1, 1}, VRType::DT, false };
    const tag ReferencedDefinedProtocolSequence = { "ReferencedDefinedProtocolSequence", 0x0018990C, {1, 1}, VRType::SQ, false };
    const tag ReferencedDigitalSignatureSequence = { "ReferencedDigitalSignatureSequence", 0x04000402, {1, 1}, VRType::SQ, false };
    const tag ReferencedDoseReferenceNumber = { "ReferencedDoseReferenceNumber", 0x300C0051, {1, 1}, VRType::IS, false };
    const tag ReferencedDoseReferenceSequence = { "ReferencedDoseReferenceSequence", 0x300C0050, {1, 1}, VRType::SQ, false };
    const tag ReferencedDoseReferenceUID = { "ReferencedDoseReferenceUID", 0x300A0083, {1, 1}, VRType::UI, false };
    const tag ReferencedDoseSequence = { "ReferencedDoseSequence", 0x300C0080, {1, 1}, VRType::SQ, false };
    const tag ReferencedFiducialUID = { "ReferencedFiducialUID", 0x0070031B, {1, 1}, VRType::UI, false };
    const tag ReferencedFileID = { "ReferencedFileID", 0x00041500, {1, 8}, VRType::CS, false };
    const tag ReferencedFilmBoxSequence = { "ReferencedFilmBoxSequence", 0x20000500, {1, 1}, VRType::SQ, false };
    const tag ReferencedFilmSessionSequence = { "ReferencedFilmSessionSequence", 0x20100500, {1, 1}, VRType::SQ, false };
    const tag ReferencedFindingsGroupUIDTrial = { "ReferencedFindingsGroupUIDTrial", 0x0040A022, {1, 1}, VRType::UI, false };
    const tag ReferencedFirstFrameSequence = { "ReferencedFirstFrameSequence", 0x00720427, {1, 1}, VRType::SQ, false };
    const tag ReferencedFractionGroupNumber = { "ReferencedFractionGroupNumber", 0x300C0022, {1, 1}, VRType::IS, false };
    const tag ReferencedFractionGroupSequence = { "ReferencedFractionGroupSequence", 0x300C0020, {1, 1}, VRType::SQ, false };
    const tag ReferencedFractionNumber = { "ReferencedFractionNumber", 0x30080223, {1, 1}, VRType::IS, false };
    const tag ReferencedFrameNumber = { "ReferencedFrameNumber", 0x00081160, {1, 1}, VRType::IS, false };
    const tag ReferencedFrameNumbers = { "ReferencedFrameNumbers", 0x0040A136, {1, 1}, VRType::US, false };
    const tag ReferencedFrameOfReferenceSequence = { "ReferencedFrameOfReferenceSequence", 0x30060010, {1, 1}, VRType::SQ, false };
    const tag ReferencedFrameOfReferenceUID = { "ReferencedFrameOfReferenceUID", 0x30060024, {1, 1}, VRType::UI, false };
    const tag ReferencedGeneralPurposeScheduledProcedureStepSequence = { "ReferencedGeneralPurposeScheduledProcedureStepSequence", 0x00404016, {1, 1}, VRType::SQ, false };
    const tag ReferencedGeneralPurposeScheduledProcedureStepTransactionUID = { "ReferencedGeneralPurposeScheduledProcedureStepTransactionUID", 0x00404023, {1, 1}, VRType::UI, false };
    const tag ReferencedHPGLDocumentID = { "ReferencedHPGLDocumentID", 0x00686440, {1, 1}, VRType::US, false };
    const tag ReferencedImageBoxSequence = { "ReferencedImageBoxSequence", 0x20100510, {1, 1}, VRType::SQ, false };
    const tag ReferencedImageBoxSequenceRetired = { "ReferencedImageBoxSequenceRetired", 0x20400500, {1, 1}, VRType::SQ, false };
    const tag ReferencedImageEvidenceSequence = { "ReferencedImageEvidenceSequence", 0x00089092, {1, 1}, VRType::SQ, false };
    const tag ReferencedImageNavigationSequence = { "ReferencedImageNavigationSequence", 0x00480200, {1, 1}, VRType::SQ, false };
    const tag ReferencedImageOverlayBoxSequence = { "ReferencedImageOverlayBoxSequence", 0x20200130, {1, 1}, VRType::SQ, false };
    const tag ReferencedImageRealWorldValueMappingSequence = { "ReferencedImageRealWorldValueMappingSequence", 0x00409094, {1, 1}, VRType::SQ, false };
    const tag ReferencedImageSequence = { "ReferencedImageSequence", 0x00081140, {1, 1}, VRType::SQ, false };
    const tag ReferencedImplantTemplateGroupMemberID = { "ReferencedImplantTemplateGroupMemberID", 0x007800B6, {1, 1}, VRType::US, false };
    const tag ReferencedInstanceSequence = { "ReferencedInstanceSequence", 0x0008114A, {1, 1}, VRType::SQ, false };
    const tag ReferencedInterpretationSequence = { "ReferencedInterpretationSequence", 0x40080050, {1, 1}, VRType::SQ, false };
    const tag ReferenceDisplaySets = { "ReferenceDisplaySets", 0x00720218, {1, 1}, VRType::US, false };
    const tag ReferencedLateralSpreadingDeviceNumber = { "ReferencedLateralSpreadingDeviceNumber", 0x300C0102, {1, 1}, VRType::IS, false };
    const tag ReferencedMeasuredDoseReferenceNumber = { "ReferencedMeasuredDoseReferenceNumber", 0x30080082, {1, 1}, VRType::IS, false };
    const tag ReferencedMeasuredDoseReferenceSequence = { "ReferencedMeasuredDoseReferenceSequence", 0x30080080, {1, 1}, VRType::SQ, false };
    const tag ReferencedNonImageCompositeSOPInstanceSequence = { "ReferencedNonImageCompositeSOPInstanceSequence", 0x00400220, {1, 1}, VRType::SQ, false };
    const tag ReferencedObjectObservationClassTrial = { "ReferencedObjectObservationClassTrial", 0x0040A174, {1, 1}, VRType::CS, false };
    const tag ReferencedObservationClassTrial = { "ReferencedObservationClassTrial", 0x0040A173, {1, 1}, VRType::CS, false };
    const tag ReferencedObservationUIDTrial = { "ReferencedObservationUIDTrial", 0x0040A172, {1, 1}, VRType::UI, false };
    const tag ReferencedOphthalmicAxialLengthMeasurementQCImageSequence = { "ReferencedOphthalmicAxialLengthMeasurementQCImageSequence", 0x00221330, {1, 1}, VRType::SQ, false };
    const tag ReferencedOphthalmicAxialMeasurementsSequence = { "ReferencedOphthalmicAxialMeasurementsSequence", 0x00221100, {1, 1}, VRType::SQ, false };
    const tag ReferenceDoseDefinition = { "ReferenceDoseDefinition", 0x300A0512, {1, 1}, VRType::CS, false };
    const tag ReferencedOtherPlaneSequence = { "ReferencedOtherPlaneSequence", 0x00089410, {1, 1}, VRType::SQ, false };
    const tag ReferencedOverlayPlaneGroups = { "ReferencedOverlayPlaneGroups", 0x20400011, {1, 99}, VRType::US, false };
    const tag ReferencedOverlayPlaneSequence = { "ReferencedOverlayPlaneSequence", 0x20400010, {1, 1}, VRType::SQ, false };
    const tag ReferencedOverlaySequence = { "ReferencedOverlaySequence", 0x00081130, {1, 1}, VRType::SQ, false };
    const tag ReferencedPatientAliasSequence = { "ReferencedPatientAliasSequence", 0x00380004, {1, 1}, VRType::SQ, false };
    const tag ReferencedPatientPhotoSequence = { "ReferencedPatientPhotoSequence", 0x00101100, {1, 1}, VRType::SQ, false };
    const tag ReferencedPatientSequence = { "ReferencedPatientSequence", 0x00081120, {1, 1}, VRType::SQ, false };
    const tag ReferencedPatientSetupNumber = { "ReferencedPatientSetupNumber", 0x300C006A, {1, 1}, VRType::IS, false };
    const tag ReferencedPerformedProcedureStepSequence = { "ReferencedPerformedProcedureStepSequence", 0x00081111, {1, 1}, VRType::SQ, false };
    const tag ReferencedPerformedProtocolSequence = { "ReferencedPerformedProtocolSequence", 0x0018990D, {1, 1}, VRType::SQ, false };
    const tag ReferencedPresentationLUTSequence = { "ReferencedPresentationLUTSequence", 0x20500500, {1, 1}, VRType::SQ, false };
    const tag ReferencedPresentationStateSequence = { "ReferencedPresentationStateSequence", 0x00089237, {1, 1}, VRType::SQ, false };
    const tag ReferencedPrintJobSequence = { "ReferencedPrintJobSequence", 0x21200070, {1, 1}, VRType::SQ, false };
    const tag ReferencedPrintJobSequencePullStoredPrint = { "ReferencedPrintJobSequencePullStoredPrint", 0x21000500, {1, 1}, VRType::SQ, false };
    const tag ReferencedProcedureStepSequence = { "ReferencedProcedureStepSequence", 0x00400330, {1, 1}, VRType::SQ, false };
    const tag ReferencedPTOSequence = { "ReferencedPTOSequence", 0x40101076, {1, 1}, VRType::SQ, false };
    const tag ReferencedRangeModulatorNumber = { "ReferencedRangeModulatorNumber", 0x300C0104, {1, 1}, VRType::IS, false };
    const tag ReferencedRangeShifterNumber = { "ReferencedRangeShifterNumber", 0x300C0100, {1, 1}, VRType::IS, false };
    const tag ReferencedRawDataSequence = { "ReferencedRawDataSequence", 0x00089121, {1, 1}, VRType::SQ, false };
    const tag ReferencedRealWorldValueMappingInstanceSequence = { "ReferencedRealWorldValueMappingInstanceSequence", 0x0008114B, {1, 1}, VRType::SQ, false };
    const tag ReferencedReferenceImageNumber = { "ReferencedReferenceImageNumber", 0x300C0007, {1, 1}, VRType::IS, false };
    const tag ReferencedReferenceImageSequence = { "ReferencedReferenceImageSequence", 0x300C0042, {1, 1}, VRType::SQ, false };
    const tag ReferencedRefractiveMeasurementsSequence = { "ReferencedRefractiveMeasurementsSequence", 0x00460145, {1, 1}, VRType::SQ, false };
    const tag ReferencedRelatedGeneralSOPClassUIDInFile = { "ReferencedRelatedGeneralSOPClassUIDInFile", 0x0004151A, {1, 1}, VRType::UI, false };
    const tag ReferencedRequestSequence = { "ReferencedRequestSequence", 0x0040A370, {1, 1}, VRType::SQ, false };
    const tag ReferencedResultsSequence = { "ReferencedResultsSequence", 0x00081100, {1, 1}, VRType::SQ, false };
    const tag ReferencedROINumber = { "ReferencedROINumber", 0x30060084, {1, 1}, VRType::IS, false };
    const tag ReferencedRTPlanSequence = { "ReferencedRTPlanSequence", 0x300C0002, {1, 1}, VRType::SQ, false };
    const tag ReferencedSamplePositions = { "ReferencedSamplePositions", 0x0040A132, {1, 1}, VRType::UL, false };
    const tag ReferencedSegmentNumber = { "ReferencedSegmentNumber", 0x0062000B, {1, 1}, VRType::US, false };
    const tag ReferencedSeriesSequence = { "ReferencedSeriesSequence", 0x00081115, {1, 1}, VRType::SQ, false };
    const tag ReferencedSetupImageSequence = { "ReferencedSetupImageSequence", 0x300A0401, {1, 1}, VRType::SQ, false };
    const tag ReferencedSOPClassUID = { "ReferencedSOPClassUID", 0x00081150, {1, 1}, VRType::UI, false };
    const tag ReferencedSOPClassUIDInFile = { "ReferencedSOPClassUIDInFile", 0x00041510, {1, 1}, VRType::UI, false };
    const tag ReferencedSOPInstanceMACSequence = { "ReferencedSOPInstanceMACSequence", 0x04000403, {1, 1}, VRType::SQ, false };
    const tag ReferencedSOPInstanceUID = { "ReferencedSOPInstanceUID", 0x00081155, {1, 1}, VRType::UI, false };
    const tag ReferencedSOPInstanceUIDInFile = { "ReferencedSOPInstanceUIDInFile", 0x00041511, {1, 1}, VRType::UI, false };
    const tag ReferencedSOPSequence = { "ReferencedSOPSequence", 0x00081199, {1, 1}, VRType::SQ, false };
    const tag ReferencedSourceApplicatorNumber = { "ReferencedSourceApplicatorNumber", 0x30080142, {1, 1}, VRType::IS, false };
    const tag ReferencedSourceNumber = { "ReferencedSourceNumber", 0x300C000E, {1, 1}, VRType::IS, false };
    const tag ReferencedSpatialRegistrationSequence = { "ReferencedSpatialRegistrationSequence", 0x00700404, {1, 1}, VRType::SQ, false };
    const tag ReferencedStartControlPointIndex = { "ReferencedStartControlPointIndex", 0x300C00F4, {1, 1}, VRType::IS, false };
    const tag ReferencedStereometricInstanceSequence = { "ReferencedStereometricInstanceSequence", 0x00081134, {1, 1}, VRType::SQ, false };
    const tag ReferencedStopControlPointIndex = { "ReferencedStopControlPointIndex", 0x300C00F6, {1, 1}, VRType::IS, false };
    const tag ReferencedStorageMediaSequence = { "ReferencedStorageMediaSequence", 0x2200000D, {1, 1}, VRType::SQ, false };
    const tag ReferencedStoredPrintSequence = { "ReferencedStoredPrintSequence", 0x20000510, {1, 1}, VRType::SQ, false };
    const tag ReferencedStructuredContextSequence = { "ReferencedStructuredContextSequence", 0x00701903, {1, 1}, VRType::SQ, false };
    const tag ReferencedStructureSetSequence = { "ReferencedStructureSetSequence", 0x300C0060, {1, 1}, VRType::SQ, false };
    const tag ReferencedStudySequence = { "ReferencedStudySequence", 0x00081110, {1, 1}, VRType::SQ, false };
    const tag ReferencedSurfaceDataSequence = { "ReferencedSurfaceDataSequence", 0x00800013, {1, 1}, VRType::SQ, false };
    const tag ReferencedSurfaceMeshIdentificationSequence = { "ReferencedSurfaceMeshIdentificationSequence", 0x00221620, {1, 1}, VRType::SQ, false };
    const tag ReferencedSurfaceNumber = { "ReferencedSurfaceNumber", 0x0066002C, {1, 1}, VRType::UL, false };
    const tag ReferencedSurfaceSequence = { "ReferencedSurfaceSequence", 0x0066002B, {1, 1}, VRType::SQ, false };
    const tag ReferencedTargetLuminanceCharacteristicsID = { "ReferencedTargetLuminanceCharacteristicsID", 0x0028700E, {1, 1}, VRType::US, false };
    const tag ReferencedTDRInstanceSequence = { "ReferencedTDRInstanceSequence", 0x40101077, {1, 1}, VRType::SQ, false };
    const tag ReferencedTextureSequence = { "ReferencedTextureSequence", 0x00800012, {1, 1}, VRType::SQ, false };
    const tag ReferencedTimeOffsets = { "ReferencedTimeOffsets", 0x0040A138, {1, 1}, VRType::DS, false };
    const tag ReferencedToleranceTableNumber = { "ReferencedToleranceTableNumber", 0x300C00A0, {1, 1}, VRType::IS, false };
    const tag ReferencedTransferSyntaxUIDInFile = { "ReferencedTransferSyntaxUIDInFile", 0x00041512, {1, 1}, VRType::UI, false };
    const tag ReferencedTreatmentRecordSequence = { "ReferencedTreatmentRecordSequence", 0x30080030, {1, 1}, VRType::SQ, false };
    const tag ReferencedVerificationImageSequence = { "ReferencedVerificationImageSequence", 0x300C0040, {1, 1}, VRType::SQ, false };
    const tag ReferencedVisitSequence = { "ReferencedVisitSequence", 0x00081125, {1, 1}, VRType::SQ, false };
    const tag ReferencedVOILUTBoxSequence = { "ReferencedVOILUTBoxSequence", 0x20200140, {1, 1}, VRType::SQ, false };
    const tag ReferencedWaveformChannels = { "ReferencedWaveformChannels", 0x0040A0B0, {2, 2}, VRType::US, false };
    const tag ReferencedWaveformSequence = { "ReferencedWaveformSequence", 0x0008113A, {1, 1}, VRType::SQ, false };
    const tag ReferencedWedgeNumber = { "ReferencedWedgeNumber", 0x300C00C0, {1, 1}, VRType::IS, false };
    const tag ReferenceGeometryCodeSequence = { "ReferenceGeometryCodeSequence", 0x00189903, {1, 1}, VRType::SQ, false };
    const tag ReferenceImageNumber = { "ReferenceImageNumber", 0x300A00C8, {1, 1}, VRType::IS, false };
    const tag ReferenceLocationDescription = { "ReferenceLocationDescription", 0x00189901, {1, 1}, VRType::UT, false };
    const tag ReferenceLocationLabel = { "ReferenceLocationLabel", 0x00189900, {1, 1}, VRType::LO, false };
    const tag ReferencePixelPhysicalValueX = { "ReferencePixelPhysicalValueX", 0x00186028, {1, 1}, VRType::FD, false };
    const tag ReferencePixelPhysicalValueY = { "ReferencePixelPhysicalValueY", 0x0018602A, {1, 1}, VRType::FD, false };
    const tag ReferencePixelX0 = { "ReferencePixelX0", 0x00186020, {1, 1}, VRType::SL, false };
    const tag ReferencePixelY0 = { "ReferencePixelY0", 0x00186022, {1, 1}, VRType::SL, false };
    const tag ReferenceToRecordedSound = { "ReferenceToRecordedSound", 0x40080103, {1, 1}, VRType::LO, false };
    const tag ReferringPhysicianAddress = { "ReferringPhysicianAddress", 0x00080092, {1, 1}, VRType::ST, false };
    const tag ReferringPhysicianIdentificationSequence = { "ReferringPhysicianIdentificationSequence", 0x00080096, {1, 1}, VRType::SQ, false };
    const tag ReferringPhysicianName = { "ReferringPhysicianName", 0x00080090, {1, 1}, VRType::PN, false };
    const tag ReferringPhysicianTelephoneNumbers = { "ReferringPhysicianTelephoneNumbers", 0x00080094, {1, 1}, VRType::SH, false };
    const tag ReflectedAmbientLight = { "ReflectedAmbientLight", 0x20100160, {1, 1}, VRType::US, false };
    const tag ReformattingInterval = { "ReformattingInterval", 0x00720514, {1, 1}, VRType::FD, false };
    const tag ReformattingOperationInitialViewDirection = { "ReformattingOperationInitialViewDirection", 0x00720516, {1, 1}, VRType::CS, false };
    const tag ReformattingOperationType = { "ReformattingOperationType", 0x00720510, {1, 1}, VRType::CS, false };
    const tag ReformattingThickness = { "ReformattingThickness", 0x00720512, {1, 1}, VRType::FD, false };
    const tag RefractiveErrorBeforeRefractiveSurgeryCodeSequence = { "RefractiveErrorBeforeRefractiveSurgeryCodeSequence", 0x00221103, {1, 1}, VRType::SQ, false };
    const tag RefractiveIndexApplied = { "RefractiveIndexApplied", 0x0052003A, {1, 1}, VRType::CS, false };
    const tag RefractiveParametersUsedOnPatientSequence = { "RefractiveParametersUsedOnPatientSequence", 0x00240112, {1, 1}, VRType::SQ, false };
    const tag RefractivePower = { "RefractivePower", 0x00460251, {1, 1}, VRType::FL, false };
    const tag RefractiveProcedureOccurred = { "RefractiveProcedureOccurred", 0x00221039, {1, 1}, VRType::CS, false };
    const tag RefractiveStateSequence = { "RefractiveStateSequence", 0x0022001B, {1, 1}, VRType::SQ, false };
    const tag RefractiveSurgeryTypeCodeSequence = { "RefractiveSurgeryTypeCodeSequence", 0x00221040, {1, 1}, VRType::SQ, false };
    const tag RegionDataType = { "RegionDataType", 0x00186014, {1, 1}, VRType::US, false };
    const tag RegionFlags = { "RegionFlags", 0x00186016, {1, 1}, VRType::UL, false };
    const tag RegionLocationMaxX1 = { "RegionLocationMaxX1", 0x0018601C, {1, 1}, VRType::UL, false };
    const tag RegionLocationMaxY1 = { "RegionLocationMaxY1", 0x0018601E, {1, 1}, VRType::UL, false };
    const tag RegionLocationMinX0 = { "RegionLocationMinX0", 0x00186018, {1, 1}, VRType::UL, false };
    const tag RegionLocationMinY0 = { "RegionLocationMinY0", 0x0018601A, {1, 1}, VRType::UL, false };
    const tag RegionOfResidence = { "RegionOfResidence", 0x00102152, {1, 1}, VRType::LO, false };
    const tag RegionPixelShiftSequence = { "RegionPixelShiftSequence", 0x00289502, {1, 1}, VRType::SQ, false };
    const tag RegionSpatialFormat = { "RegionSpatialFormat", 0x00186012, {1, 1}, VRType::US, false };
    const tag RegisteredLocalizerBottomRightHandCorner = { "RegisteredLocalizerBottomRightHandCorner", 0x00221468, {2, 2}, VRType::FL, false };
    const tag RegisteredLocalizerTopLeftHandCorner = { "RegisteredLocalizerTopLeftHandCorner", 0x00221467, {2, 2}, VRType::FL, false };
    const tag RegisteredLocalizerUnits = { "RegisteredLocalizerUnits", 0x00221466, {1, 1}, VRType::CS, false };
    const tag RegistrationMethodCodeSequence = { "RegistrationMethodCodeSequence", 0x00800003, {1, 1}, VRType::SQ, false };
    const tag RegistrationSequence = { "RegistrationSequence", 0x00700308, {1, 1}, VRType::SQ, false };
    const tag RegistrationToLocalizerSequence = { "RegistrationToLocalizerSequence", 0x00221465, {1, 1}, VRType::SQ, false };
    const tag RegistrationTypeCodeSequence = { "RegistrationTypeCodeSequence", 0x0070030D, {1, 1}, VRType::SQ, false };
    const tag RelatedAssertionSequence = { "RelatedAssertionSequence", 0x00440107, {1, 1}, VRType::SQ, false };
    const tag RelatedFrameOfReferenceUID = { "RelatedFrameOfReferenceUID", 0x300600C2, {1, 1}, VRType::UI, false };
    const tag RelatedGeneralSOPClassUID = { "RelatedGeneralSOPClassUID", 0x0008001A, {1, 1}, VRType::UI, false };
    const tag RelatedProcedureStepSequence = { "RelatedProcedureStepSequence", 0x00741220, {1, 1}, VRType::SQ, false };
    const tag RelatedReferenceRTImageSequence = { "RelatedReferenceRTImageSequence", 0x00741040, {1, 1}, VRType::SQ, false };
    const tag RelatedRTROIObservationsSequence = { "RelatedRTROIObservationsSequence", 0x300600A0, {1, 1}, VRType::SQ, false };
    const tag RelatedSeriesSequence = { "RelatedSeriesSequence", 0x00081250, {1, 1}, VRType::SQ, false };
    const tag RelationshipSequenceTrial = { "RelationshipSequenceTrial", 0x0040A731, {1, 1}, VRType::SQ, false };
    const tag RelationshipType = { "RelationshipType", 0x0040A010, {1, 1}, VRType::CS, false };
    const tag RelationshipTypeCodeSequenceTrial = { "RelationshipTypeCodeSequenceTrial", 0x0040A732, {1, 1}, VRType::SQ, false };
    const tag RelativeElevation = { "RelativeElevation", 0x00460252, {1, 1}, VRType::FL, false };
    const tag RelativeImagePositionCodeSequence = { "RelativeImagePositionCodeSequence", 0x0022001D, {1, 1}, VRType::SQ, false };
    const tag RelativeOpacity = { "RelativeOpacity", 0x00700403, {1, 1}, VRType::FL, false };
    const tag RelativeTime = { "RelativeTime", 0x00720038, {2, 2}, VRType::US, false };
    const tag RelativeTimeUnits = { "RelativeTimeUnits", 0x0072003A, {1, 1}, VRType::CS, false };
    const tag RelativeXRayExposure = { "RelativeXRayExposure", 0x00181405, {1, 1}, VRType::IS, false };
    const tag RelevantInformationSequence = { "RelevantInformationSequence", 0x00404022, {1, 1}, VRType::SQ, false };
    const tag RelevantOPTAttributesSequence = { "RelevantOPTAttributesSequence", 0x00221472, {1, 1}, VRType::SQ, false };
    const tag RenderedImageReferenceSequence = { "RenderedImageReferenceSequence", 0x00701104, {1, 1}, VRType::SQ, false };
    const tag RenderFieldOfView = { "RenderFieldOfView", 0x00701606, {6, 6}, VRType::FD, false };
    const tag RenderingMethod = { "RenderingMethod", 0x0070120D, {1, 1}, VRType::CS, false };
    const tag RenderProjection = { "RenderProjection", 0x00701602, {1, 1}, VRType::CS, false };
    const tag RepairID = { "RepairID", 0x00140105, {1, 1}, VRType::ST, false };
    const tag RepeatFractionCycleLength = { "RepeatFractionCycleLength", 0x300A007A, {1, 1}, VRType::IS, false };
    const tag RepeatInterval = { "RepeatInterval", 0x00280068, {1, 1}, VRType::US, false };
    const tag RepetitionTime = { "RepetitionTime", 0x00180080, {1, 1}, VRType::DS, false };
    const tag ReplacedImplantAssemblyTemplateSequence = { "ReplacedImplantAssemblyTemplateSequence", 0x00760008, {1, 1}, VRType::SQ, false };
    const tag ReplacedImplantTemplateGroupSequence = { "ReplacedImplantTemplateGroupSequence", 0x00780026, {1, 1}, VRType::SQ, false };
    const tag ReplacedImplantTemplateSequence = { "ReplacedImplantTemplateSequence", 0x00686222, {1, 1}, VRType::SQ, false };
    const tag ReplacedProcedureStepSequence = { "ReplacedProcedureStepSequence", 0x00741224, {1, 1}, VRType::SQ, false };
    const tag ReportDetailSequenceTrial = { "ReportDetailSequenceTrial", 0x0040A380, {1, 1}, VRType::SQ, false };
    const tag ReportedValuesOrigin = { "ReportedValuesOrigin", 0x3002000A, {1, 1}, VRType::CS, false };
    const tag ReportingPriority = { "ReportingPriority", 0x00401009, {1, 1}, VRType::SH, false };
    const tag ReportNumber = { "ReportNumber", 0x002000AA, {1, 1}, VRType::IS, false };
    const tag ReportProductionStatusTrial = { "ReportProductionStatusTrial", 0x400800FF, {1, 1}, VRType::CS, false };
    const tag ReportStatusCommentTrial = { "ReportStatusCommentTrial", 0x0040A33A, {1, 1}, VRType::ST, false };
    const tag ReportStatusIDTrial = { "ReportStatusIDTrial", 0x0040A125, {2, 2}, VRType::CS, false };
    const tag RepositoryUniqueID = { "RepositoryUniqueID", 0x0040E030, {1, 1}, VRType::UI, false };
    const tag RepresentativeFrameNumber = { "RepresentativeFrameNumber", 0x00286010, {1, 1}, VRType::US, false };
    const tag ReprojectionMethod = { "ReprojectionMethod", 0x00541004, {1, 1}, VRType::CS, false };
    const tag RequestAttributesSequence = { "RequestAttributesSequence", 0x00400275, {1, 1}, VRType::SQ, false };
    const tag RequestedContrastAgent = { "RequestedContrastAgent", 0x00321070, {1, 1}, VRType::LO, false };
    const tag RequestedDecimateCropBehavior = { "RequestedDecimateCropBehavior", 0x20200040, {1, 1}, VRType::CS, false };
    const tag RequestedImageSize = { "RequestedImageSize", 0x20200030, {1, 1}, VRType::DS, false };
    const tag RequestedImageSizeFlag = { "RequestedImageSizeFlag", 0x202000A0, {1, 1}, VRType::CS, false };
    const tag RequestedMediaApplicationProfile = { "RequestedMediaApplicationProfile", 0x2200000C, {1, 1}, VRType::LO, false };
    const tag RequestedProcedureCodeSequence = { "RequestedProcedureCodeSequence", 0x00321064, {1, 1}, VRType::SQ, false };
    const tag RequestedProcedureComments = { "RequestedProcedureComments", 0x00401400, {1, 1}, VRType::LT, false };
    const tag RequestedProcedureDescription = { "RequestedProcedureDescription", 0x00321060, {1, 1}, VRType::LO, false };
    const tag RequestedProcedureDescriptionTrial = { "RequestedProcedureDescriptionTrial", 0x00401060, {1, 1}, VRType::LO, false };
    const tag RequestedProcedureID = { "RequestedProcedureID", 0x00401001, {1, 1}, VRType::SH, false };
    const tag RequestedProcedureLocation = { "RequestedProcedureLocation", 0x00401005, {1, 1}, VRType::LO, false };
    const tag RequestedProcedurePriority = { "RequestedProcedurePriority", 0x00401003, {1, 1}, VRType::SH, false };
    const tag RequestedResolutionID = { "RequestedResolutionID", 0x20200050, {1, 1}, VRType::CS, false };
    const tag RequestedSeriesDescription = { "RequestedSeriesDescription", 0x00189937, {1, 1}, VRType::LO, false };
    const tag RequestedSubsequentWorkitemCodeSequence = { "RequestedSubsequentWorkitemCodeSequence", 0x00404031, {1, 1}, VRType::SQ, false };
    const tag RequestingAE = { "RequestingAE", 0x00741236, {1, 1}, VRType::AE, false };
    const tag RequestingPhysician = { "RequestingPhysician", 0x00321032, {1, 1}, VRType::PN, false };
    const tag RequestingPhysicianIdentificationSequence = { "RequestingPhysicianIdentificationSequence", 0x00321031, {1, 1}, VRType::SQ, false };
    const tag RequestingService = { "RequestingService", 0x00321033, {1, 1}, VRType::LO, false };
    const tag RequestingServiceCodeSequence = { "RequestingServiceCodeSequence", 0x00321034, {1, 1}, VRType::SQ, false };
    const tag RequestPriority = { "RequestPriority", 0x22000020, {1, 1}, VRType::CS, false };
    const tag RescaleIntercept = { "RescaleIntercept", 0x00281052, {1, 1}, VRType::DS, false };
    const tag RescaleSlope = { "RescaleSlope", 0x00281053, {1, 1}, VRType::DS, false };
    const tag RescaleType = { "RescaleType", 0x00281054, {1, 1}, VRType::LO, false };
    const tag ResidualSyringeCounts = { "ResidualSyringeCounts", 0x00540017, {1, 1}, VRType::IS, false };
    const tag ResonantNucleus = { "ResonantNucleus", 0x00189100, {1, 2}, VRType::CS, false };
    const tag ResourceDescription = { "ResourceDescription", 0x00380102, {1, 1}, VRType::LO, false };
    const tag RespiratoryCyclePosition = { "RespiratoryCyclePosition", 0x00189214, {1, 1}, VRType::CS, false };
    const tag RespiratoryIntervalTime = { "RespiratoryIntervalTime", 0x00209254, {1, 1}, VRType::FD, false };
    const tag RespiratoryMotionCompensationTechnique = { "RespiratoryMotionCompensationTechnique", 0x00189170, {1, 1}, VRType::CS, false };
    const tag RespiratoryMotionCompensationTechniqueDescription = { "RespiratoryMotionCompensationTechniqueDescription", 0x00189185, {1, 1}, VRType::ST, false };
    const tag RespiratorySignalSource = { "RespiratorySignalSource", 0x00189171, {1, 1}, VRType::CS, false };
    const tag RespiratorySignalSourceID = { "RespiratorySignalSourceID", 0x00189186, {1, 1}, VRType::SH, false };
    const tag RespiratorySynchronizationSequence = { "RespiratorySynchronizationSequence", 0x00209253, {1, 1}, VRType::SQ, false };
    const tag RespiratoryTriggerDelayThreshold = { "RespiratoryTriggerDelayThreshold", 0x00209256, {1, 1}, VRType::FD, false };
    const tag RespiratoryTriggerType = { "RespiratoryTriggerType", 0x00209250, {1, 1}, VRType::CS, false };
    const tag ResponsibleGroupCodeSequence = { "ResponsibleGroupCodeSequence", 0x00080220, {1, 1}, VRType::SQ, false };
    const tag ResponsibleOrganization = { "ResponsibleOrganization", 0x00102299, {1, 1}, VRType::LO, false };
    const tag ResponsiblePerson = { "ResponsiblePerson", 0x00102297, {1, 1}, VRType::PN, false };
    const tag ResponsiblePersonRole = { "ResponsiblePersonRole", 0x00102298, {1, 1}, VRType::CS, false };
    const tag ResultingGeneralPurposePerformedProcedureStepsSequence = { "ResultingGeneralPurposePerformedProcedureStepsSequence", 0x00404015, {1, 1}, VRType::SQ, false };
    const tag ResultsComments = { "ResultsComments", 0x40084000, {1, 1}, VRType::ST, false };
    const tag ResultsDistributionListSequence = { "ResultsDistributionListSequence", 0x40080118, {1, 1}, VRType::SQ, false };
    const tag ResultsID = { "ResultsID", 0x40080040, {1, 1}, VRType::SH, false };
    const tag ResultsIDIssuer = { "ResultsIDIssuer", 0x40080042, {1, 1}, VRType::LO, false };
    const tag ResultsNormalsSequence = { "ResultsNormalsSequence", 0x00240064, {1, 1}, VRType::SQ, false };
    const tag RetestSensitivityValue = { "RetestSensitivityValue", 0x00240096, {1, 1}, VRType::FL, false };
    const tag RetestStimulusSeen = { "RetestStimulusSeen", 0x00240095, {1, 1}, VRType::CS, false };
    const tag RetinalThicknessDefinitionCodeSequence = { "RetinalThicknessDefinitionCodeSequence", 0x00221445, {1, 1}, VRType::SQ, false };
    const tag RetrieveAETitle = { "RetrieveAETitle", 0x00080054, {1, 1}, VRType::AE, false };
    const tag RetrieveLocationUID = { "RetrieveLocationUID", 0x0040E011, {1, 1}, VRType::UI, false };
    const tag RetrieveURI = { "RetrieveURI", 0x0040E010, {1, 1}, VRType::UR, false };
    const tag RetrieveURL = { "RetrieveURL", 0x00081190, {1, 1}, VRType::UR, false };
    const tag ReviewDate = { "ReviewDate", 0x300E0004, {1, 1}, VRType::DA, false };
    const tag ReviewerName = { "ReviewerName", 0x300E0008, {1, 1}, VRType::PN, false };
    const tag ReviewTime = { "ReviewTime", 0x300E0005, {1, 1}, VRType::TM, false };
    const tag RevolutionTime = { "RevolutionTime", 0x00189305, {1, 1}, VRType::FD, false };
    const tag RFEchoTrainLength = { "RFEchoTrainLength", 0x00189240, {1, 1}, VRType::US, false };
    const tag RGBATransferFunctionDescription = { "RGBATransferFunctionDescription", 0x00701A09, {1, 1}, VRType::LO, false };
    const tag RGBLUTTransferFunction = { "RGBLUTTransferFunction", 0x0028140F, {1, 1}, VRType::CS, false };
    const tag RightImageSequence = { "RightImageSequence", 0x00220022, {1, 1}, VRType::SQ, false };
    const tag RightLensSequence = { "RightLensSequence", 0x00460014, {1, 1}, VRType::SQ, false };
    const range_tag ROIArea = { "ROIArea", 0x60001301, 0x60FF1301, 0x00010000, {1, 1}, VRType::IS, false };
    const tag ROIContourSequence = { "ROIContourSequence", 0x30060039, {1, 1}, VRType::SQ, false };
    const tag ROIDescription = { "ROIDescription", 0x30060028, {1, 1}, VRType::ST, false };
    const tag ROIDisplayColor = { "ROIDisplayColor", 0x3006002A, {3, 3}, VRType::IS, false };
    const tag ROIElementalCompositionAtomicMassFraction = { "ROIElementalCompositionAtomicMassFraction", 0x300600B8, {1, 1}, VRType::FL, false };
    const tag ROIElementalCompositionAtomicNumber = { "ROIElementalCompositionAtomicNumber", 0x300600B7, {1, 1}, VRType::US, false };
    const tag ROIElementalCompositionSequence = { "ROIElementalCompositionSequence", 0x300600B6, {1, 1}, VRType::SQ, false };
    const tag ROIGenerationAlgorithm = { "ROIGenerationAlgorithm", 0x30060036, {1, 1}, VRType::CS, false };
    const tag ROIGenerationDescription = { "ROIGenerationDescription", 0x30060038, {1, 1}, VRType::LO, false };
    const tag ROIInterpreter = { "ROIInterpreter", 0x300600A6, {1, 1}, VRType::PN, false };
    const range_tag ROIMean = { "ROIMean", 0x60001302, 0x60FF1302, 0x00010000, {1, 1}, VRType::DS, false };
    const tag ROIName = { "ROIName", 0x30060026, {1, 1}, VRType::LO, false };
    const tag ROINumber = { "ROINumber", 0x30060022, {1, 1}, VRType::IS, false };
    const tag ROIObservationDescription = { "ROIObservationDescription", 0x30060088, {1, 1}, VRType::ST, false };
    const tag ROIObservationLabel = { "ROIObservationLabel", 0x30060085, {1, 1}, VRType::SH, false };
    const tag ROIPhysicalPropertiesSequence = { "ROIPhysicalPropertiesSequence", 0x300600B0, {1, 1}, VRType::SQ, false };
    const tag ROIPhysicalProperty = { "ROIPhysicalProperty", 0x300600B2, {1, 1}, VRType::CS, false };
    const tag ROIPhysicalPropertyValue = { "ROIPhysicalPropertyValue", 0x300600B4, {1, 1}, VRType::DS, false };
    const range_tag ROIStandardDeviation = { "ROIStandardDeviation", 0x60001303, 0x60FF1303, 0x00010000, {1, 1}, VRType::DS, false };
    const tag ROIVolume = { "ROIVolume", 0x3006002C, {1, 1}, VRType::DS, false };
    const tag RotationAngle = { "RotationAngle", 0x00700230, {1, 1}, VRType::FD, false };
    const tag RotationDirection = { "RotationDirection", 0x00181140, {1, 1}, VRType::CS, false };
    const tag RotationInformationSequence = { "RotationInformationSequence", 0x00540052, {1, 1}, VRType::SQ, false };
    const tag RotationOffset = { "RotationOffset", 0x00181146, {1, 1}, VRType::DS, false };
    const tag RotationOfScannedFilm = { "RotationOfScannedFilm", 0x00182030, {1, 1}, VRType::DS, false };
    const tag RotationPoint = { "RotationPoint", 0x00700273, {2, 2}, VRType::FL, false };
    const tag RotationVector = { "RotationVector", 0x00540050, {1, 1}, VRType::US, false };
    const tag RouteID = { "RouteID", 0x40101054, {1, 1}, VRType::SH, false };
    const tag RouteIDAssigningAuthority = { "RouteIDAssigningAuthority", 0x40101055, {1, 1}, VRType::SH, false };
    const tag RouteOfAdmissions = { "RouteOfAdmissions", 0x00380016, {1, 1}, VRType::LO, false };
    const tag RouteSegmentEndLocationID = { "RouteSegmentEndLocationID", 0x4010101F, {1, 1}, VRType::SH, false };
    const tag RouteSegmentEndTime = { "RouteSegmentEndTime", 0x40101026, {1, 1}, VRType::DT, false };
    const tag RouteSegmentID = { "RouteSegmentID", 0x40101007, {1, 1}, VRType::SH, false };
    const tag RouteSegmentLocationIDType = { "RouteSegmentLocationIDType", 0x40101020, {1, 1}, VRType::CS, false };
    const tag RouteSegmentSequence = { "RouteSegmentSequence", 0x4010100A, {1, 1}, VRType::SQ, false };
    const tag RouteSegmentStartLocationID = { "RouteSegmentStartLocationID", 0x4010101E, {1, 1}, VRType::SH, false };
    const tag RouteSegmentStartTime = { "RouteSegmentStartTime", 0x40101025, {1, 1}, VRType::DT, false };
    const tag RowOverlap = { "RowOverlap", 0x00280093, {1, 1}, VRType::US, false };
    const tag RowPositionInTotalImagePixelMatrix = { "RowPositionInTotalImagePixelMatrix", 0x0048021F, {1, 1}, VRType::SL, false };
    const tag Rows = { "Rows", 0x00280010, {1, 1}, VRType::US, false };
    const range_tag RowsForNthOrderCoefficients = { "RowsForNthOrderCoefficients", 0x00280400, 0x002804F0, 0x00000010, {1, 1}, VRType::US, false };
    const tag RRIntervalTimeNominal = { "RRIntervalTimeNominal", 0x00209251, {1, 1}, VRType::FD, false };
    const tag RRIntervalVector = { "RRIntervalVector", 0x00540060, {1, 1}, VRType::US, false };
    const tag RTBeamLimitingDeviceType = { "RTBeamLimitingDeviceType", 0x300A00B8, {1, 1}, VRType::CS, false };
    const tag RTDoseROISequence = { "RTDoseROISequence", 0x30040010, {1, 1}, VRType::SQ, false };
    const tag RTImageDescription = { "RTImageDescription", 0x30020004, {1, 1}, VRType::ST, false };
    const tag RTImageLabel = { "RTImageLabel", 0x30020002, {1, 1}, VRType::SH, false };
    const tag RTImageName = { "RTImageName", 0x30020003, {1, 1}, VRType::LO, false };
    const tag RTImageOrientation = { "RTImageOrientation", 0x30020010, {6, 6}, VRType::DS, false };
    const tag RTImagePlane = { "RTImagePlane", 0x3002000C, {1, 1}, VRType::CS, false };
    const tag RTImagePosition = { "RTImagePosition", 0x30020012, {2, 2}, VRType::DS, false };
    const tag RTImageSID = { "RTImageSID", 0x30020026, {1, 1}, VRType::DS, false };
    const tag RTPlanDate = { "RTPlanDate", 0x300A0006, {1, 1}, VRType::DA, false };
    const tag RTPlanDescription = { "RTPlanDescription", 0x300A0004, {1, 1}, VRType::ST, false };
    const tag RTPlanGeometry = { "RTPlanGeometry", 0x300A000C, {1, 1}, VRType::CS, false };
    const tag RTPlanLabel = { "RTPlanLabel", 0x300A0002, {1, 1}, VRType::SH, false };
    const tag RTPlanName = { "RTPlanName", 0x300A0003, {1, 1}, VRType::LO, false };
    const tag RTPlanRelationship = { "RTPlanRelationship", 0x300A0055, {1, 1}, VRType::CS, false };
    const tag RTPlanTime = { "RTPlanTime", 0x300A0007, {1, 1}, VRType::TM, false };
    const tag RTReferencedSeriesSequence = { "RTReferencedSeriesSequence", 0x30060014, {1, 1}, VRType::SQ, false };
    const tag RTReferencedStudySequence = { "RTReferencedStudySequence", 0x30060012, {1, 1}, VRType::SQ, false };
    const tag RTRelatedROISequence = { "RTRelatedROISequence", 0x30060030, {1, 1}, VRType::SQ, false };
    const tag RTROIIdentificationCodeSequence = { "RTROIIdentificationCodeSequence", 0x30060086, {1, 1}, VRType::SQ, false };
    const tag RTROIInterpretedType = { "RTROIInterpretedType", 0x300600A4, {1, 1}, VRType::CS, false };
    const tag RTROIObservationsSequence = { "RTROIObservationsSequence", 0x30060080, {1, 1}, VRType::SQ, false };
    const tag RTROIRelationship = { "RTROIRelationship", 0x30060033, {1, 1}, VRType::CS, false };
    const range_tag RunLengthTriplet = { "RunLengthTriplet", 0x10000001, 0x1000FFF1, 0x00000010, {3, 3}, VRType::US, false };
    const tag RWavePointer = { "RWavePointer", 0x00286040, {1, 1}, VRType::US, false };
    const tag RWaveTimeVector = { "RWaveTimeVector", 0x00186060, {1, 1}, VRType::FL, false };
    const tag SafePositionExitDate = { "SafePositionExitDate", 0x30080162, {1, 1}, VRType::DA, false };
    const tag SafePositionExitTime = { "SafePositionExitTime", 0x30080164, {1, 1}, VRType::TM, false };
    const tag SafePositionReturnDate = { "SafePositionReturnDate", 0x30080166, {1, 1}, VRType::DA, false };
    const tag SafePositionReturnTime = { "SafePositionReturnTime", 0x30080168, {1, 1}, VRType::TM, false };
    const range_tag SampleRate = { "SampleRate", 0x50002008, 0x50FF2008, 0x00010000, {1, 1}, VRType::UL, false };
    const tag SamplesPerPixel = { "SamplesPerPixel", 0x00280002, {1, 1}, VRType::US, false };
    const tag SamplesPerPixelUsed = { "SamplesPerPixelUsed", 0x00280003, {1, 1}, VRType::US, false };
    const tag SamplingFrequency = { "SamplingFrequency", 0x003A001A, {1, 1}, VRType::DS, false };
    const tag SamplingStepSize = { "SamplingStepSize", 0x00701607, {1, 1}, VRType::FD, false };
    const tag SAR = { "SAR", 0x00181316, {1, 1}, VRType::DS, false };
    const tag SaturationRecovery = { "SaturationRecovery", 0x00189024, {1, 1}, VRType::CS, false };
    const tag ScanArc = { "ScanArc", 0x00181143, {1, 1}, VRType::DS, false };
    const tag ScanLength = { "ScanLength", 0x00181302, {1, 1}, VRType::IS, false };
    const tag ScanMode = { "ScanMode", 0x300A0308, {1, 1}, VRType::CS, false };
    const tag ScannerSettingsSequence = { "ScannerSettingsSequence", 0x0014409A, {1, 1}, VRType::SQ, false };
    const tag ScanningSequence = { "ScanningSequence", 0x00180020, {1, 1}, VRType::CS, false };
    const tag ScanningSpotSize = { "ScanningSpotSize", 0x300A0398, {2, 2}, VRType::FL, false };
    const tag ScanOptions = { "ScanOptions", 0x00180022, {1, 1}, VRType::CS, false };
    const tag ScanPatternTypeCodeSequence = { "ScanPatternTypeCodeSequence", 0x00221618, {1, 1}, VRType::SQ, false };
    const tag ScanProcedure = { "ScanProcedure", 0x0014409B, {1, 1}, VRType::ST, false };
    const tag ScanProgressionDirection = { "ScanProgressionDirection", 0x00540501, {1, 1}, VRType::CS, false };
    const tag ScanSpotMetersetsDelivered = { "ScanSpotMetersetsDelivered", 0x30080047, {1, 1}, VRType::FL, false };
    const tag ScanSpotMetersetWeights = { "ScanSpotMetersetWeights", 0x300A0396, {1, 1}, VRType::FL, false };
    const tag ScanSpotPositionMap = { "ScanSpotPositionMap", 0x300A0394, {1, 1}, VRType::FL, false };
    const tag ScanSpotPrescribedIndices = { "ScanSpotPrescribedIndices", 0x300A0391, {1, 1}, VRType::IS, false };
    const tag ScanSpotReordered = { "ScanSpotReordered", 0x300A0393, {1, 1}, VRType::CS, false };
    const tag ScanSpotReorderingAllowed = { "ScanSpotReorderingAllowed", 0x300A0395, {1, 1}, VRType::CS, false };
    const tag ScanSpotTimeOffset = { "ScanSpotTimeOffset", 0x300A038F, {1, 1}, VRType::FL, false };
    const tag ScanSpotTuneID = { "ScanSpotTuneID", 0x300A0390, {1, 1}, VRType::SH, false };
    const tag ScanType = { "ScanType", 0x40101048, {1, 1}, VRType::CS, false };
    const tag ScanVelocity = { "ScanVelocity", 0x00181300, {1, 1}, VRType::DS, false };
    const tag ScatterCorrected = { "ScatterCorrected", 0x00189760, {1, 1}, VRType::CS, false };
    const tag ScatterCorrectionMethod = { "ScatterCorrectionMethod", 0x00541105, {1, 1}, VRType::LO, false };
    const tag ScatterFractionFactor = { "ScatterFractionFactor", 0x00541323, {1, 1}, VRType::DS, false };
    const tag ScheduledAdmissionDate = { "ScheduledAdmissionDate", 0x0038001A, {1, 1}, VRType::DA, false };
    const tag ScheduledAdmissionTime = { "ScheduledAdmissionTime", 0x0038001B, {1, 1}, VRType::TM, false };
    const tag ScheduledDischargeDate = { "ScheduledDischargeDate", 0x0038001C, {1, 1}, VRType::DA, false };
    const tag ScheduledDischargeTime = { "ScheduledDischargeTime", 0x0038001D, {1, 1}, VRType::TM, false };
    const tag ScheduledHumanPerformersSequence = { "ScheduledHumanPerformersSequence", 0x00404034, {1, 1}, VRType::SQ, false };
    const tag ScheduledPatientInstitutionResidence = { "ScheduledPatientInstitutionResidence", 0x0038001E, {1, 1}, VRType::LO, false };
    const tag ScheduledPerformingPhysicianIdentificationSequence = { "ScheduledPerformingPhysicianIdentificationSequence", 0x0040000B, {1, 1}, VRType::SQ, false };
    const tag ScheduledPerformingPhysicianName = { "ScheduledPerformingPhysicianName", 0x00400006, {1, 1}, VRType::PN, false };
    const tag ScheduledProcedureStepDescription = { "ScheduledProcedureStepDescription", 0x00400007, {1, 1}, VRType::LO, false };
    const tag ScheduledProcedureStepEndDate = { "ScheduledProcedureStepEndDate", 0x00400004, {1, 1}, VRType::DA, false };
    const tag ScheduledProcedureStepEndTime = { "ScheduledProcedureStepEndTime", 0x00400005, {1, 1}, VRType::TM, false };
    const tag ScheduledProcedureStepExpirationDateTime = { "ScheduledProcedureStepExpirationDateTime", 0x00404008, {1, 1}, VRType::DT, false };
    const tag ScheduledProcedureStepID = { "ScheduledProcedureStepID", 0x00400009, {1, 1}, VRType::SH, false };
    const tag ScheduledProcedureStepLocation = { "ScheduledProcedureStepLocation", 0x00400011, {1, 1}, VRType::SH, false };
    const tag ScheduledProcedureStepModificationDateTime = { "ScheduledProcedureStepModificationDateTime", 0x00404010, {1, 1}, VRType::DT, false };
    const tag ScheduledProcedureStepPriority = { "ScheduledProcedureStepPriority", 0x00741200, {1, 1}, VRType::CS, false };
    const tag ScheduledProcedureStepSequence = { "ScheduledProcedureStepSequence", 0x00400100, {1, 1}, VRType::SQ, false };
    const tag ScheduledProcedureStepStartDate = { "ScheduledProcedureStepStartDate", 0x00400002, {1, 1}, VRType::DA, false };
    const tag ScheduledProcedureStepStartDateTime = { "ScheduledProcedureStepStartDateTime", 0x00404005, {1, 1}, VRType::DT, false };
    const tag ScheduledProcedureStepStartTime = { "ScheduledProcedureStepStartTime", 0x00400003, {1, 1}, VRType::TM, false };
    const tag ScheduledProcedureStepStatus = { "ScheduledProcedureStepStatus", 0x00400020, {1, 1}, VRType::CS, false };
    const tag ScheduledProcessingApplicationsCodeSequence = { "ScheduledProcessingApplicationsCodeSequence", 0x00404004, {1, 1}, VRType::SQ, false };
    const tag ScheduledProcessingParametersSequence = { "ScheduledProcessingParametersSequence", 0x00741210, {1, 1}, VRType::SQ, false };
    const tag ScheduledProtocolCodeSequence = { "ScheduledProtocolCodeSequence", 0x00400008, {1, 1}, VRType::SQ, false };
    const tag ScheduledSpecimenSequence = { "ScheduledSpecimenSequence", 0x00400500, {1, 1}, VRType::SQ, false };
    const tag ScheduledStationAETitle = { "ScheduledStationAETitle", 0x00400001, {1, 1}, VRType::AE, false };
    const tag ScheduledStationClassCodeSequence = { "ScheduledStationClassCodeSequence", 0x00404026, {1, 1}, VRType::SQ, false };
    const tag ScheduledStationGeographicLocationCodeSequence = { "ScheduledStationGeographicLocationCodeSequence", 0x00404027, {1, 1}, VRType::SQ, false };
    const tag ScheduledStationName = { "ScheduledStationName", 0x00400010, {1, 1}, VRType::SH, false };
    const tag ScheduledStationNameCodeSequence = { "ScheduledStationNameCodeSequence", 0x00404025, {1, 1}, VRType::SQ, false };
    const tag ScheduledStepAttributesSequence = { "ScheduledStepAttributesSequence", 0x00400270, {1, 1}, VRType::SQ, false };
    const tag ScheduledStudyLocation = { "ScheduledStudyLocation", 0x00321020, {1, 1}, VRType::LO, false };
    const tag ScheduledStudyLocationAETitle = { "ScheduledStudyLocationAETitle", 0x00321021, {1, 1}, VRType::AE, false };
    const tag ScheduledStudyStartDate = { "ScheduledStudyStartDate", 0x00321000, {1, 1}, VRType::DA, false };
    const tag ScheduledStudyStartTime = { "ScheduledStudyStartTime", 0x00321001, {1, 1}, VRType::TM, false };
    const tag ScheduledStudyStopDate = { "ScheduledStudyStopDate", 0x00321010, {1, 1}, VRType::DA, false };
    const tag ScheduledStudyStopTime = { "ScheduledStudyStopTime", 0x00321011, {1, 1}, VRType::TM, false };
    const tag ScheduledWorkitemCodeSequence = { "ScheduledWorkitemCodeSequence", 0x00404018, {1, 1}, VRType::SQ, false };
    const tag SCPStatus = { "SCPStatus", 0x00741242, {1, 1}, VRType::CS, false };
    const tag ScreeningBaselineMeasured = { "ScreeningBaselineMeasured", 0x00240120, {1, 1}, VRType::CS, false };
    const tag ScreeningBaselineMeasuredSequence = { "ScreeningBaselineMeasuredSequence", 0x00240122, {1, 1}, VRType::SQ, false };
    const tag ScreeningBaselineType = { "ScreeningBaselineType", 0x00240124, {1, 1}, VRType::CS, false };
    const tag ScreeningBaselineValue = { "ScreeningBaselineValue", 0x00240126, {1, 1}, VRType::FL, false };
    const tag ScreeningTestModeCodeSequence = { "ScreeningTestModeCodeSequence", 0x00240016, {1, 1}, VRType::SQ, false };
    const tag ScreenMinimumColorBitDepth = { "ScreenMinimumColorBitDepth", 0x0072010C, {1, 1}, VRType::US, false };
    const tag ScreenMinimumGrayscaleBitDepth = { "ScreenMinimumGrayscaleBitDepth", 0x0072010A, {1, 1}, VRType::US, false };
    const tag SeamLineIndex = { "SeamLineIndex", 0x00520036, {1, 1}, VRType::US, false };
    const tag SeamLineLocation = { "SeamLineLocation", 0x00520033, {1, 1}, VRType::FD, false };
    const tag SecondaryApprovalStatus = { "SecondaryApprovalStatus", 0x00140101, {1, 1}, VRType::CS, false };
    const tag SecondaryCaptureDeviceID = { "SecondaryCaptureDeviceID", 0x00181010, {1, 1}, VRType::LO, false };
    const tag SecondaryCaptureDeviceManufacturer = { "SecondaryCaptureDeviceManufacturer", 0x00181016, {1, 1}, VRType::LO, false };
    const tag SecondaryCaptureDeviceManufacturerModelName = { "SecondaryCaptureDeviceManufacturerModelName", 0x00181018, {1, 1}, VRType::LO, false };
    const tag SecondaryCaptureDeviceSoftwareVersions = { "SecondaryCaptureDeviceSoftwareVersions", 0x00181019, {1, 1}, VRType::LO, false };
    const tag SecondaryCountsAccumulated = { "SecondaryCountsAccumulated", 0x00541311, {1, 1}, VRType::IS, false };
    const tag SecondaryCountsType = { "SecondaryCountsType", 0x00541220, {1, 1}, VRType::CS, false };
    const tag SecondaryInspectionMethodSequence = { "SecondaryInspectionMethodSequence", 0x4010107D, {1, 1}, VRType::SQ, false };
    const tag SecondaryPositionerIncrement = { "SecondaryPositionerIncrement", 0x00189515, {1, 1}, VRType::FL, false };
    const tag SecondaryPositionerIncrementSign = { "SecondaryPositionerIncrementSign", 0x00189519, {1, 1}, VRType::SS, false };
    const tag SecondaryPositionerScanArc = { "SecondaryPositionerScanArc", 0x00189509, {1, 1}, VRType::FL, false };
    const tag SecondaryPositionerScanStartAngle = { "SecondaryPositionerScanStartAngle", 0x00189511, {1, 1}, VRType::FL, false };
    const tag SecondaryReviewDate = { "SecondaryReviewDate", 0x00140102, {1, 1}, VRType::DA, false };
    const tag SecondaryReviewerName = { "SecondaryReviewerName", 0x00140104, {1, 1}, VRType::PN, false };
    const tag SecondaryReviewTime = { "SecondaryReviewTime", 0x00140103, {1, 1}, VRType::TM, false };
    const tag SegmentAlgorithmName = { "SegmentAlgorithmName", 0x00620009, {1, 1}, VRType::LO, false };
    const tag SegmentAlgorithmType = { "SegmentAlgorithmType", 0x00620008, {1, 1}, VRType::CS, false };
    const tag SegmentationAlgorithmIdentificationSequence = { "SegmentationAlgorithmIdentificationSequence", 0x00620007, {1, 1}, VRType::SQ, false };
    const tag SegmentationFractionalType = { "SegmentationFractionalType", 0x00620010, {1, 1}, VRType::CS, false };
    const tag SegmentationType = { "SegmentationType", 0x00620001, {1, 1}, VRType::CS, false };
    const tag SegmentDescription = { "SegmentDescription", 0x00620006, {1, 1}, VRType::ST, false };
    const tag SegmentedAlphaPaletteColorLookupTableData = { "SegmentedAlphaPaletteColorLookupTableData", 0x00281224, {1, 1}, VRType::OW, false };
    const tag SegmentedBluePaletteColorLookupTableData = { "SegmentedBluePaletteColorLookupTableData", 0x00281223, {1, 1}, VRType::OW, false };
    const tag SegmentedGreenPaletteColorLookupTableData = { "SegmentedGreenPaletteColorLookupTableData", 0x00281222, {1, 1}, VRType::OW, false };
    const tag SegmentedKSpaceTraversal = { "SegmentedKSpaceTraversal", 0x00189033, {1, 1}, VRType::CS, false };
    const tag SegmentedPropertyCategoryCodeSequence = { "SegmentedPropertyCategoryCodeSequence", 0x00620003, {1, 1}, VRType::SQ, false };
    const tag SegmentedPropertyTypeCodeSequence = { "SegmentedPropertyTypeCodeSequence", 0x0062000F, {1, 1}, VRType::SQ, false };
    const tag SegmentedPropertyTypeModifierCodeSequence = { "SegmentedPropertyTypeModifierCodeSequence", 0x00620011, {1, 1}, VRType::SQ, false };
    const tag SegmentedRedPaletteColorLookupTableData = { "SegmentedRedPaletteColorLookupTableData", 0x00281221, {1, 1}, VRType::OW, false };
    const tag SegmentIdentificationSequence = { "SegmentIdentificationSequence", 0x0062000A, {1, 1}, VRType::SQ, false };
    const tag SegmentLabel = { "SegmentLabel", 0x00620005, {1, 1}, VRType::LO, false };
    const tag SegmentNumber = { "SegmentNumber", 0x00620004, {1, 1}, VRType::US, false };
    const tag SegmentSequence = { "SegmentSequence", 0x00620002, {1, 1}, VRType::SQ, false };
    const tag SegmentSurfaceGenerationAlgorithmIdentificationSequence = { "SegmentSurfaceGenerationAlgorithmIdentificationSequence", 0x0066002D, {1, 1}, VRType::SQ, false };
    const tag SegmentSurfaceSourceInstanceSequence = { "SegmentSurfaceSourceInstanceSequence", 0x0066002E, {1, 1}, VRType::SQ, false };
    const tag SelectedSegmentalOphthalmicAxialLengthSequence = { "SelectedSegmentalOphthalmicAxialLengthSequence", 0x00221257, {1, 1}, VRType::SQ, false };
    const tag SelectedTotalOphthalmicAxialLengthSequence = { "SelectedTotalOphthalmicAxialLengthSequence", 0x00221260, {1, 1}, VRType::SQ, false };
    const tag SelectorAEValue = { "SelectorAEValue", 0x0072005E, {1, 1}, VRType::AE, false };
    const tag SelectorASValue = { "SelectorASValue", 0x0072005F, {1, 1}, VRType::AS, false };
    const tag SelectorAttribute = { "SelectorAttribute", 0x00720026, {1, 1}, VRType::AT, false };
    const tag SelectorAttributeKeyword = { "SelectorAttributeKeyword", 0x00820019, {1, 1}, VRType::LO, false };
    const tag SelectorAttributeName = { "SelectorAttributeName", 0x00820018, {1, 1}, VRType::LO, false };
    const tag SelectorAttributePrivateCreator = { "SelectorAttributePrivateCreator", 0x00720056, {1, 1}, VRType::LO, false };
    const tag SelectorAttributeVR = { "SelectorAttributeVR", 0x00720050, {1, 1}, VRType::CS, false };
    const tag SelectorATValue = { "SelectorATValue", 0x00720060, {1, 1}, VRType::AT, false };
    const tag SelectorCodeSequenceValue = { "SelectorCodeSequenceValue", 0x00720080, {1, 1}, VRType::SQ, false };
    const tag SelectorCSValue = { "SelectorCSValue", 0x00720062, {1, 1}, VRType::CS, false };
    const tag SelectorDAValue = { "SelectorDAValue", 0x00720061, {1, 1}, VRType::DA, false };
    const tag SelectorDSValue = { "SelectorDSValue", 0x00720072, {1, 1}, VRType::DS, false };
    const tag SelectorDTValue = { "SelectorDTValue", 0x00720063, {1, 1}, VRType::DT, false };
    const tag SelectorFDValue = { "SelectorFDValue", 0x00720074, {1, 1}, VRType::FD, false };
    const tag SelectorFLValue = { "SelectorFLValue", 0x00720076, {1, 1}, VRType::FL, false };
    const tag SelectorISValue = { "SelectorISValue", 0x00720064, {1, 1}, VRType::IS, false };
    const tag SelectorLOValue = { "SelectorLOValue", 0x00720066, {1, 1}, VRType::LO, false };
    const tag SelectorLTValue = { "SelectorLTValue", 0x00720068, {1, 1}, VRType::LT, false };
    const tag SelectorOBValue = { "SelectorOBValue", 0x00720065, {1, 1}, VRType::OB, false };
    const tag SelectorODValue = { "SelectorODValue", 0x00720073, {1, 1}, VRType::OD, false };
    const tag SelectorOFValue = { "SelectorOFValue", 0x00720067, {1, 1}, VRType::OF, false };
    const tag SelectorOLValue = { "SelectorOLValue", 0x00720075, {1, 1}, VRType::OL, false };
    const tag SelectorOWValue = { "SelectorOWValue", 0x00720069, {1, 1}, VRType::OW, false };
    const tag SelectorPNValue = { "SelectorPNValue", 0x0072006A, {1, 1}, VRType::PN, false };
    const tag SelectorSequencePointer = { "SelectorSequencePointer", 0x00720052, {1, 1}, VRType::AT, false };
    const tag SelectorSequencePointerItems = { "SelectorSequencePointerItems", 0x00741057, {1, 1}, VRType::IS, false };
    const tag SelectorSequencePointerPrivateCreator = { "SelectorSequencePointerPrivateCreator", 0x00720054, {1, 1}, VRType::LO, false };
    const tag SelectorSHValue = { "SelectorSHValue", 0x0072006C, {1, 1}, VRType::SH, false };
    const tag SelectorSLValue = { "SelectorSLValue", 0x0072007C, {1, 1}, VRType::SL, false };
    const tag SelectorSSValue = { "SelectorSSValue", 0x0072007E, {1, 1}, VRType::SS, false };
    const tag SelectorSTValue = { "SelectorSTValue", 0x0072006E, {1, 1}, VRType::ST, false };
    const tag SelectorTMValue = { "SelectorTMValue", 0x0072006B, {1, 1}, VRType::TM, false };
    const tag SelectorUCValue = { "SelectorUCValue", 0x0072006F, {1, 1}, VRType::UC, false };
    const tag SelectorUIValue = { "SelectorUIValue", 0x0072007F, {1, 1}, VRType::UI, false };
    const tag SelectorULValue = { "SelectorULValue", 0x00720078, {1, 1}, VRType::UL, false };
    const tag SelectorUNValue = { "SelectorUNValue", 0x0072006D, {1, 1}, VRType::UN, false };
    const tag SelectorURValue = { "SelectorURValue", 0x00720071, {1, 1}, VRType::UR, false };
    const tag SelectorUSValue = { "SelectorUSValue", 0x0072007A, {1, 1}, VRType::US, false };
    const tag SelectorUTValue = { "SelectorUTValue", 0x00720070, {1, 1}, VRType::UT, false };
    const tag SelectorValueNumber = { "SelectorValueNumber", 0x00720028, {1, 1}, VRType::US, false };
    const tag SendingApplicationEntityTitle = { "SendingApplicationEntityTitle", 0x00020017, {1, 1}, VRType::AE, false };
    const tag Sensitivity = { "Sensitivity", 0x00186000, {1, 1}, VRType::DS, false };
    const tag SensitivityCalibrated = { "SensitivityCalibrated", 0x00189767, {1, 1}, VRType::CS, false };
    const tag SensitivityValue = { "SensitivityValue", 0x00240094, {1, 1}, VRType::FL, false };
    const tag SensorName = { "SensorName", 0x00143022, {1, 1}, VRType::ST, false };
    const tag SensorTemperature = { "SensorTemperature", 0x00143028, {1, 1}, VRType::DS, false };
    const tag SequenceName = { "SequenceName", 0x00180024, {1, 1}, VRType::SH, false };
    const tag SequenceOfCompressedData = { "SequenceOfCompressedData", 0x00280403, {1, 1}, VRType::LO, false };
    const tag SequenceOfUltrasoundRegions = { "SequenceOfUltrasoundRegions", 0x00186011, {1, 1}, VRType::SQ, false };
    const tag SequenceVariant = { "SequenceVariant", 0x00180021, {1, 1}, VRType::CS, false };
    const tag SequencingIndicatorTrial = { "SequencingIndicatorTrial", 0x0040A060, {1, 1}, VRType::LO, false };
    const tag SeriesDate = { "SeriesDate", 0x00080021, {1, 1}, VRType::DA, false };
    const tag SeriesDescription = { "SeriesDescription", 0x0008103E, {1, 1}, VRType::LO, false };
    const tag SeriesDescriptionCodeSequence = { "SeriesDescriptionCodeSequence", 0x0008103F, {1, 1}, VRType::SQ, false };
    const tag SeriesInstanceUID = { "SeriesInstanceUID", 0x0020000E, {1, 1}, VRType::UI, false };
    const tag SeriesInStudy = { "SeriesInStudy", 0x00201000, {1, 1}, VRType::IS, false };
    const tag SeriesNumber = { "SeriesNumber", 0x00200011, {1, 1}, VRType::IS, false };
    const tag SeriesTime = { "SeriesTime", 0x00080031, {1, 1}, VRType::TM, false };
    const tag SeriesType = { "SeriesType", 0x00541000, {2, 2}, VRType::CS, false };
    const tag ServiceEpisodeDescription = { "ServiceEpisodeDescription", 0x00380062, {1, 1}, VRType::LO, false };
    const tag ServiceEpisodeID = { "ServiceEpisodeID", 0x00380060, {1, 1}, VRType::LO, false };
    const tag SettlingPhaseFrame = { "SettlingPhaseFrame", 0x00189624, {1, 1}, VRType::CS, false };
    const tag SetupDeviceDescription = { "SetupDeviceDescription", 0x300A01BA, {1, 1}, VRType::ST, false };
    const tag SetupDeviceLabel = { "SetupDeviceLabel", 0x300A01B8, {1, 1}, VRType::SH, false };
    const tag SetupDeviceParameter = { "SetupDeviceParameter", 0x300A01BC, {1, 1}, VRType::DS, false };
    const tag SetupDeviceSequence = { "SetupDeviceSequence", 0x300A01B4, {1, 1}, VRType::SQ, false };
    const tag SetupDeviceType = { "SetupDeviceType", 0x300A01B6, {1, 1}, VRType::CS, false };
    const tag SetupImageComment = { "SetupImageComment", 0x300A0402, {1, 1}, VRType::ST, false };
    const tag SetupReferenceDescription = { "SetupReferenceDescription", 0x300A01D0, {1, 1}, VRType::ST, false };
    const tag SetupTechnique = { "SetupTechnique", 0x300A01B0, {1, 1}, VRType::CS, false };
    const tag SetupTechniqueDescription = { "SetupTechniqueDescription", 0x300A01B2, {1, 1}, VRType::ST, false };
    const tag ShadingStyle = { "ShadingStyle", 0x00701701, {1, 1}, VRType::CS, false };
    const tag ShadowColorCIELabValue = { "ShadowColorCIELabValue", 0x00700247, {3, 3}, VRType::US, false };
    const tag ShadowOffsetX = { "ShadowOffsetX", 0x00700245, {1, 1}, VRType::FL, false };
    const tag ShadowOffsetY = { "ShadowOffsetY", 0x00700246, {1, 1}, VRType::FL, false };
    const tag ShadowOpacity = { "ShadowOpacity", 0x00700258, {1, 1}, VRType::FL, false };
    const tag ShadowStyle = { "ShadowStyle", 0x00700244, {1, 1}, VRType::CS, false };
    const tag ShapeType = { "ShapeType", 0x00700306, {1, 1}, VRType::CS, false };
    const tag SharedFunctionalGroupsSequence = { "SharedFunctionalGroupsSequence", 0x52009229, {1, 1}, VRType::SQ, false };
    const tag ShieldingDeviceDescription = { "ShieldingDeviceDescription", 0x300A01A6, {1, 1}, VRType::ST, false };
    const tag ShieldingDeviceLabel = { "ShieldingDeviceLabel", 0x300A01A4, {1, 1}, VRType::SH, false };
    const tag ShieldingDevicePosition = { "ShieldingDevicePosition", 0x300A01A8, {1, 1}, VRType::SH, false };
    const tag ShieldingDeviceSequence = { "ShieldingDeviceSequence", 0x300A01A0, {1, 1}, VRType::SQ, false };
    const tag ShieldingDeviceType = { "ShieldingDeviceType", 0x300A01A2, {1, 1}, VRType::CS, false };
    const range_tag ShiftTableSize = { "ShiftTableSize", 0x10000004, 0x1000FFF4, 0x00000010, {1, 1}, VRType::US, false };
    const range_tag ShiftTableTriplet = { "ShiftTableTriplet", 0x10000005, 0x1000FFF5, 0x00000010, {3, 3}, VRType::US, false };
    const tag Shininess = { "Shininess", 0x00701706, {1, 1}, VRType::FD, false };
    const tag ShortTermFluctuation = { "ShortTermFluctuation", 0x00240075, {1, 1}, VRType::FL, false };
    const tag ShortTermFluctuationCalculated = { "ShortTermFluctuationCalculated", 0x00240074, {1, 1}, VRType::CS, false };
    const tag ShortTermFluctuationProbability = { "ShortTermFluctuationProbability", 0x00240077, {1, 1}, VRType::FL, false };
    const tag ShortTermFluctuationProbabilityCalculated = { "ShortTermFluctuationProbabilityCalculated", 0x00240076, {1, 1}, VRType::CS, false };
    const tag ShotDurationTime = { "ShotDurationTime", 0x00800004, {1, 1}, VRType::FD, false };
    const tag ShotOffsetTime = { "ShotOffsetTime", 0x00800005, {1, 1}, VRType::FD, false };
    const tag ShowAcquisitionTechniquesFlag = { "ShowAcquisitionTechniquesFlag", 0x00720716, {1, 1}, VRType::CS, false };
    const tag ShowGraphicAnnotationFlag = { "ShowGraphicAnnotationFlag", 0x00720712, {1, 1}, VRType::CS, false };
    const tag ShowGrayscaleInverted = { "ShowGrayscaleInverted", 0x00720706, {1, 1}, VRType::CS, false };
    const tag ShowImageTrueSizeFlag = { "ShowImageTrueSizeFlag", 0x00720710, {1, 1}, VRType::CS, false };
    const tag ShowPatientDemographicsFlag = { "ShowPatientDemographicsFlag", 0x00720714, {1, 1}, VRType::CS, false };
    const tag ShowTickLabel = { "ShowTickLabel", 0x00700278, {1, 1}, VRType::CS, false };
    const tag ShutterLeftVerticalEdge = { "ShutterLeftVerticalEdge", 0x00181602, {1, 1}, VRType::IS, false };
    const tag ShutterLowerHorizontalEdge = { "ShutterLowerHorizontalEdge", 0x00181608, {1, 1}, VRType::IS, false };
    const tag ShutterOverlayGroup = { "ShutterOverlayGroup", 0x00181623, {1, 1}, VRType::US, false };
    const tag ShutterPresentationColorCIELabValue = { "ShutterPresentationColorCIELabValue", 0x00181624, {3, 3}, VRType::US, false };
    const tag ShutterPresentationValue = { "ShutterPresentationValue", 0x00181622, {1, 1}, VRType::US, false };
    const tag ShutterRightVerticalEdge = { "ShutterRightVerticalEdge", 0x00181604, {1, 1}, VRType::IS, false };
    const tag ShutterShape = { "ShutterShape", 0x00181600, {1, 3}, VRType::CS, false };
    const tag ShutterUpperHorizontalEdge = { "ShutterUpperHorizontalEdge", 0x00181606, {1, 1}, VRType::IS, false };
    const tag SignalDomainColumns = { "SignalDomainColumns", 0x00289003, {1, 1}, VRType::CS, false };
    const tag SignalDomainRows = { "SignalDomainRows", 0x00289235, {1, 1}, VRType::CS, false };
    const tag SignalToNoiseRatio = { "SignalToNoiseRatio", 0x00221155, {1, 1}, VRType::FL, false };
    const tag Signature = { "Signature", 0x04000120, {1, 1}, VRType::OB, false };
    const tag SimpleFrameList = { "SimpleFrameList", 0x00081161, {1, 1}, VRType::UL, false };
    const tag SimulatedKeratometricCylinderSequence = { "SimulatedKeratometricCylinderSequence", 0x00460218, {1, 1}, VRType::SQ, false };
    const tag SingleCollimationWidth = { "SingleCollimationWidth", 0x00189306, {1, 1}, VRType::FD, false };
    const tag SkipBeats = { "SkipBeats", 0x00181086, {1, 1}, VRType::IS, false };
    const tag SkipFrameRangeFlag = { "SkipFrameRangeFlag", 0x00089460, {1, 1}, VRType::CS, false };
    const tag SlabOrientation = { "SlabOrientation", 0x00189105, {3, 3}, VRType::FD, false };
    const tag SlabThickness = { "SlabThickness", 0x00189104, {1, 1}, VRType::FD, false };
    const tag SliceLocation = { "SliceLocation", 0x00201041, {1, 1}, VRType::DS, false };
    const tag SliceLocationVector = { "SliceLocationVector", 0x00182005, {1, 1}, VRType::DS, false };
    const tag SliceProgressionDirection = { "SliceProgressionDirection", 0x00540500, {1, 1}, VRType::CS, false };
    const tag SliceSensitivityFactor = { "SliceSensitivityFactor", 0x00541320, {1, 1}, VRType::DS, false };
    const tag SliceThickness = { "SliceThickness", 0x00180050, {1, 1}, VRType::DS, false };
    const tag SliceVector = { "SliceVector", 0x00540080, {1, 1}, VRType::US, false };
    const tag SlideIdentifier = { "SlideIdentifier", 0x004006FA, {1, 1}, VRType::LO, false };
    const tag SmallestImagePixelValue = { "SmallestImagePixelValue", 0x00280106, {1, 1}, VRType::US, true };
    const tag SmallestImagePixelValueInPlane = { "SmallestImagePixelValueInPlane", 0x00280110, {1, 1}, VRType::US, true };
    const tag SmallestPixelValueInSeries = { "SmallestPixelValueInSeries", 0x00280108, {1, 1}, VRType::US, true };
    const tag SmallestValidPixelValue = { "SmallestValidPixelValue", 0x00280104, {1, 1}, VRType::US, true };
    const tag SmokingStatus = { "SmokingStatus", 0x001021A0, {1, 1}, VRType::CS, false };
    const tag SmoothingType = { "SmoothingType", 0x20100080, {1, 1}, VRType::CS, false };
    const tag SnoutID = { "SnoutID", 0x300A030F, {1, 1}, VRType::SH, false };
    const tag SnoutPosition = { "SnoutPosition", 0x300A030D, {1, 1}, VRType::FL, false };
    const tag SnoutPositionTolerance = { "SnoutPositionTolerance", 0x300A004B, {1, 1}, VRType::FL, false };
    const tag SnoutSequence = { "SnoutSequence", 0x300A030C, {1, 1}, VRType::SQ, false };
    const tag SNRThreshold = { "SNRThreshold", 0x40101073, {1, 1}, VRType::FD, false };
    const tag SoftcopyVOILUTSequence = { "SoftcopyVOILUTSequence", 0x00283110, {1, 1}, VRType::SQ, false };
    const tag SoftTissueFocusThermalIndex = { "SoftTissueFocusThermalIndex", 0x00185028, {1, 1}, VRType::DS, false };
    const tag SoftTissueSurfaceThermalIndex = { "SoftTissueSurfaceThermalIndex", 0x00185029, {1, 1}, VRType::DS, false };
    const tag SoftTissueThermalIndex = { "SoftTissueThermalIndex", 0x00185027, {1, 1}, VRType::DS, false };
    const tag SoftwareVersions = { "SoftwareVersions", 0x00181020, {1, 1}, VRType::LO, false };
    const tag SOPAuthorizationComment = { "SOPAuthorizationComment", 0x01000424, {1, 1}, VRType::LT, false };
    const tag SOPAuthorizationDateTime = { "SOPAuthorizationDateTime", 0x01000420, {1, 1}, VRType::DT, false };
    const tag SOPClassesInStudy = { "SOPClassesInStudy", 0x00080062, {1, 1}, VRType::UI, false };
    const tag SOPClassesSupported = { "SOPClassesSupported", 0x0008115A, {1, 1}, VRType::UI, false };
    const tag SOPClassUID = { "SOPClassUID", 0x00080016, {1, 1}, VRType::UI, false };
    const tag SOPInstanceStatus = { "SOPInstanceStatus", 0x01000410, {1, 1}, VRType::CS, false };
    const tag SOPInstanceUID = { "SOPInstanceUID", 0x00080018, {1, 1}, VRType::UI, false };
    const tag SOPInstanceUIDOfConcatenationSource = { "SOPInstanceUIDOfConcatenationSource", 0x00200242, {1, 1}, VRType::UI, false };
    const tag SortByCategory = { "SortByCategory", 0x00720602, {1, 1}, VRType::CS, false };
    const tag SortingDirection = { "SortingDirection", 0x00720604, {1, 1}, VRType::CS, false };
    const tag SortingOperationsSequence = { "SortingOperationsSequence", 0x00720600, {1, 1}, VRType::SQ, false };
    const tag SoundPathLength = { "SoundPathLength", 0x0014405A, {1, 1}, VRType::DS, false };
    const tag SourceAcquisitionBeamNumber = { "SourceAcquisitionBeamNumber", 0x00189939, {1, 1}, VRType::US, false };
    const tag SourceAcquisitionProtocolElementNumber = { "SourceAcquisitionProtocolElementNumber", 0x00189938, {1, 1}, VRType::US, false };
    const tag SourceApplicationEntityTitle = { "SourceApplicationEntityTitle", 0x00020016, {1, 1}, VRType::AE, false };
    const tag SourceApplicatorID = { "SourceApplicatorID", 0x300A0291, {1, 1}, VRType::SH, false };
    const tag SourceApplicatorLength = { "SourceApplicatorLength", 0x300A0296, {1, 1}, VRType::DS, false };
    const tag SourceApplicatorManufacturer = { "SourceApplicatorManufacturer", 0x300A0298, {1, 1}, VRType::LO, false };
    const tag SourceApplicatorName = { "SourceApplicatorName", 0x300A0294, {1, 1}, VRType::LO, false };
    const tag SourceApplicatorNumber = { "SourceApplicatorNumber", 0x300A0290, {1, 1}, VRType::IS, false };
    const tag SourceApplicatorStepSize = { "SourceApplicatorStepSize", 0x300A02A0, {1, 1}, VRType::DS, false };
    const tag SourceApplicatorTipLength = { "SourceApplicatorTipLength", 0x300A0274, {1, 1}, VRType::DS, false };
    const tag SourceApplicatorType = { "SourceApplicatorType", 0x300A0292, {1, 1}, VRType::CS, false };
    const tag SourceApplicatorWallNominalThickness = { "SourceApplicatorWallNominalThickness", 0x300A029C, {1, 1}, VRType::DS, false };
    const tag SourceApplicatorWallNominalTransmission = { "SourceApplicatorWallNominalTransmission", 0x300A029E, {1, 1}, VRType::DS, false };
    const tag SourceAxisDistance = { "SourceAxisDistance", 0x300A00B4, {1, 1}, VRType::DS, false };
    const tag SourceDescription = { "SourceDescription", 0x300A021C, {1, 1}, VRType::LO, false };
    const tag SourceEncapsulationNominalThickness = { "SourceEncapsulationNominalThickness", 0x300A0222, {1, 1}, VRType::DS, false };
    const tag SourceEncapsulationNominalTransmission = { "SourceEncapsulationNominalTransmission", 0x300A0224, {1, 1}, VRType::DS, false };
    const tag SourceFrameOfReferenceUID = { "SourceFrameOfReferenceUID", 0x00640003, {1, 1}, VRType::UI, false };
    const tag SourceHangingProtocolSequence = { "SourceHangingProtocolSequence", 0x00720012, {1, 1}, VRType::SQ, false };
    const tag SourceImageCornealProcessedDataSequence = { "SourceImageCornealProcessedDataSequence", 0x00460244, {1, 1}, VRType::SQ, false };
    const tag SourceImageEvidenceSequence = { "SourceImageEvidenceSequence", 0x00089154, {1, 1}, VRType::SQ, false };
    const range_tag SourceImageIDs = { "SourceImageIDs", 0x00203100, 0x002031FF, 0x00000001, {1, 1}, VRType::CS, false };
    const tag SourceImageSequence = { "SourceImageSequence", 0x00082112, {1, 1}, VRType::SQ, false };
    const tag SourceInstanceSequence = { "SourceInstanceSequence", 0x00420013, {1, 1}, VRType::SQ, false };
    const tag SourceIrradiationEventSequence = { "SourceIrradiationEventSequence", 0x00083011, {1, 1}, VRType::SQ, false };
    const tag SourceIsotopeHalfLife = { "SourceIsotopeHalfLife", 0x300A0228, {1, 1}, VRType::DS, false };
    const tag SourceIsotopeName = { "SourceIsotopeName", 0x300A0226, {1, 1}, VRType::LO, false };
    const tag SourceManufacturer = { "SourceManufacturer", 0x300A0216, {1, 1}, VRType::LO, false };
    const tag SourceModelID = { "SourceModelID", 0x300A021B, {1, 1}, VRType::SH, false };
    const tag SourceMovementType = { "SourceMovementType", 0x300A0288, {1, 1}, VRType::CS, false };
    const tag SourceNumber = { "SourceNumber", 0x300A0212, {1, 1}, VRType::IS, false };
    const tag SourceOfAnteriorChamberDepthDataCodeSequence = { "SourceOfAnteriorChamberDepthDataCodeSequence", 0x00221133, {1, 1}, VRType::SQ, false };
    const tag SourceOfLensThicknessDataCodeSequence = { "SourceOfLensThicknessDataCodeSequence", 0x00221132, {1, 1}, VRType::SQ, false };
    const tag SourceOfOphthalmicAxialLengthCodeSequence = { "SourceOfOphthalmicAxialLengthCodeSequence", 0x00221035, {1, 1}, VRType::SQ, false };
    const tag SourceOfPreviousValues = { "SourceOfPreviousValues", 0x04000564, {1, 1}, VRType::LO, false };
    const tag SourceOfRefractiveMeasurementsCodeSequence = { "SourceOfRefractiveMeasurementsCodeSequence", 0x00221135, {1, 1}, VRType::SQ, false };
    const tag SourceOfRefractiveMeasurementsSequence = { "SourceOfRefractiveMeasurementsSequence", 0x00221134, {1, 1}, VRType::SQ, false };
    const tag SourceOrientation = { "SourceOrientation", 0x40101060, {3, 3}, VRType::FL, false };
    const tag SourcePatientGroupIdentificationSequence = { "SourcePatientGroupIdentificationSequence", 0x00100026, {1, 1}, VRType::SQ, false };
    const tag SourcePosition = { "SourcePosition", 0x40101061, {3, 3}, VRType::FL, false };
    const tag SourceReconstructionProtocolElementNumber = { "SourceReconstructionProtocolElementNumber", 0x0018993A, {1, 1}, VRType::US, false };
    const tag SourceSequence = { "SourceSequence", 0x300A0210, {1, 1}, VRType::SQ, false };
    const tag SourceSerialNumber = { "SourceSerialNumber", 0x30080105, {1, 1}, VRType::LO, false };
    const tag SourceStrength = { "SourceStrength", 0x300A022B, {1, 1}, VRType::DS, false };
    const tag SourceStrengthReferenceDate = { "SourceStrengthReferenceDate", 0x300A022C, {1, 1}, VRType::DA, false };
    const tag SourceStrengthReferenceTime = { "SourceStrengthReferenceTime", 0x300A022E, {1, 1}, VRType::TM, false };
    const tag SourceStrengthUnits = { "SourceStrengthUnits", 0x300A0229, {1, 1}, VRType::CS, false };
    const tag SourceToApplicatorMountingPositionDistance = { "SourceToApplicatorMountingPositionDistance", 0x300A0436, {1, 1}, VRType::FL, false };
    const tag SourceToBeamLimitingDeviceDistance = { "SourceToBeamLimitingDeviceDistance", 0x300A00BA, {1, 1}, VRType::DS, false };
    const tag SourceToBlockTrayDistance = { "SourceToBlockTrayDistance", 0x300A00F6, {1, 1}, VRType::DS, false };
    const tag SourceToCompensatorDistance = { "SourceToCompensatorDistance", 0x300A02E2, {1, 1}, VRType::DS, false };
    const tag SourceToCompensatorTrayDistance = { "SourceToCompensatorTrayDistance", 0x300A00E6, {1, 1}, VRType::DS, false };
    const tag SourceToExternalContourDistance = { "SourceToExternalContourDistance", 0x300A0132, {1, 1}, VRType::FL, false };
    const tag SourceToGeneralAccessoryDistance = { "SourceToGeneralAccessoryDistance", 0x300A0425, {1, 1}, VRType::FL, false };
    const tag SourceToReferenceObjectDistance = { "SourceToReferenceObjectDistance", 0x30020028, {1, 1}, VRType::DS, false };
    const tag SourceToSurfaceDistance = { "SourceToSurfaceDistance", 0x300A0130, {1, 1}, VRType::DS, false };
    const tag SourceToWedgeTrayDistance = { "SourceToWedgeTrayDistance", 0x300A00DA, {1, 1}, VRType::DS, false };
    const tag SourceType = { "SourceType", 0x300A0214, {1, 1}, VRType::CS, false };
    const tag SourceWaveformSequence = { "SourceWaveformSequence", 0x003A020A, {1, 1}, VRType::SQ, false };
    const tag SpacingBetweenSlices = { "SpacingBetweenSlices", 0x00180088, {1, 1}, VRType::DS, false };
    const tag SpatialLocationsPreserved = { "SpatialLocationsPreserved", 0x0028135A, {1, 1}, VRType::CS, false };
    const tag SpatialPresaturation = { "SpatialPresaturation", 0x00189027, {1, 1}, VRType::CS, false };
    const tag SpatialResolution = { "SpatialResolution", 0x00181050, {1, 1}, VRType::DS, false };
    const tag SpatialTransformOfDose = { "SpatialTransformOfDose", 0x30040005, {1, 1}, VRType::CS, false };
    const tag SpecialNeeds = { "SpecialNeeds", 0x00380050, {1, 1}, VRType::LO, false };
    const tag SpecificAbsorptionRateDefinition = { "SpecificAbsorptionRateDefinition", 0x00189179, {1, 1}, VRType::CS, false };
    const tag SpecificAbsorptionRateSequence = { "SpecificAbsorptionRateSequence", 0x00189239, {1, 1}, VRType::SQ, false };
    const tag SpecificAbsorptionRateValue = { "SpecificAbsorptionRateValue", 0x00189181, {1, 1}, VRType::FD, false };
    const tag SpecificationSelectionGuidance = { "SpecificationSelectionGuidance", 0x00820033, {1, 1}, VRType::UT, false };
    const tag SpecificCharacterSet = { "SpecificCharacterSet", 0x00080005, {1, 1}, VRType::CS, false };
    const tag SpecificCharacterSetOfFileSetDescriptorFile = { "SpecificCharacterSetOfFileSetDescriptorFile", 0x00041142, {1, 1}, VRType::CS, false };
    const tag SpecifiedChannelTotalTime = { "SpecifiedChannelTotalTime", 0x30080132, {1, 1}, VRType::DS, false };
    const tag SpecifiedMeterset = { "SpecifiedMeterset", 0x30080042, {1, 1}, VRType::DS, false };
    const tag SpecifiedNumberOfPulses = { "SpecifiedNumberOfPulses", 0x30080136, {1, 1}, VRType::IS, false };
    const tag SpecifiedPrimaryMeterset = { "SpecifiedPrimaryMeterset", 0x30080032, {1, 1}, VRType::DS, false };
    const tag SpecifiedPulseRepetitionInterval = { "SpecifiedPulseRepetitionInterval", 0x3008013A, {1, 1}, VRType::DS, false };
    const tag SpecifiedSecondaryMeterset = { "SpecifiedSecondaryMeterset", 0x30080033, {1, 1}, VRType::DS, false };
    const tag SpecifiedTreatmentTime = { "SpecifiedTreatmentTime", 0x3008003A, {1, 1}, VRType::DS, false };
    const tag SpecimenAccessionNumber = { "SpecimenAccessionNumber", 0x0040050A, {1, 1}, VRType::LO, false };
    const tag SpecimenDescriptionSequence = { "SpecimenDescriptionSequence", 0x00400560, {1, 1}, VRType::SQ, false };
    const tag SpecimenDescriptionSequenceTrial = { "SpecimenDescriptionSequenceTrial", 0x00400552, {1, 1}, VRType::SQ, false };
    const tag SpecimenDescriptionTrial = { "SpecimenDescriptionTrial", 0x00400553, {1, 1}, VRType::ST, false };
    const tag SpecimenDetailedDescription = { "SpecimenDetailedDescription", 0x00400602, {1, 1}, VRType::UT, false };
    const tag SpecimenIdentifier = { "SpecimenIdentifier", 0x00400551, {1, 1}, VRType::LO, false };
    const tag SpecimenLabelInImage = { "SpecimenLabelInImage", 0x00480010, {1, 1}, VRType::CS, false };
    const tag SpecimenLocalizationContentItemSequence = { "SpecimenLocalizationContentItemSequence", 0x00400620, {1, 1}, VRType::SQ, false };
    const tag SpecimenPreparationSequence = { "SpecimenPreparationSequence", 0x00400610, {1, 1}, VRType::SQ, false };
    const tag SpecimenPreparationStepContentItemSequence = { "SpecimenPreparationStepContentItemSequence", 0x00400612, {1, 1}, VRType::SQ, false };
    const tag SpecimenReferenceSequence = { "SpecimenReferenceSequence", 0x00480110, {1, 1}, VRType::SQ, false };
    const tag SpecimenSequence = { "SpecimenSequence", 0x00400550, {1, 1}, VRType::SQ, false };
    const tag SpecimenShortDescription = { "SpecimenShortDescription", 0x00400600, {1, 1}, VRType::LO, false };
    const tag SpecimenTypeCodeSequence = { "SpecimenTypeCodeSequence", 0x0040059A, {1, 1}, VRType::SQ, false };
    const tag SpecimenUID = { "SpecimenUID", 0x00400554, {1, 1}, VRType::UI, false };
    const tag SpectrallySelectedExcitation = { "SpectrallySelectedExcitation", 0x00189026, {1, 1}, VRType::CS, false };
    const tag SpectrallySelectedSuppression = { "SpectrallySelectedSuppression", 0x00189025, {1, 1}, VRType::CS, false };
    const tag SpectralWidth = { "SpectralWidth", 0x00189052, {1, 2}, VRType::FD, false };
    const tag SpectroscopyAcquisitionDataColumns = { "SpectroscopyAcquisitionDataColumns", 0x00189127, {1, 1}, VRType::UL, false };
    const tag SpectroscopyAcquisitionOutOfPlanePhaseSteps = { "SpectroscopyAcquisitionOutOfPlanePhaseSteps", 0x00189159, {1, 1}, VRType::UL, false };
    const tag SpectroscopyAcquisitionPhaseColumns = { "SpectroscopyAcquisitionPhaseColumns", 0x00189234, {1, 1}, VRType::UL, false };
    const tag SpectroscopyAcquisitionPhaseRows = { "SpectroscopyAcquisitionPhaseRows", 0x00189095, {1, 1}, VRType::UL, false };
    const tag SpectroscopyData = { "SpectroscopyData", 0x56000020, {1, 1}, VRType::OF, false };
    const tag SpecularReflectionIntensity = { "SpecularReflectionIntensity", 0x00701705, {1, 1}, VRType::FD, false };
    const tag SpherePower = { "SpherePower", 0x00460146, {1, 1}, VRType::FD, false };
    const tag SphericalLensPower = { "SphericalLensPower", 0x00220007, {1, 1}, VRType::FL, false };
    const tag SpiralPitchFactor = { "SpiralPitchFactor", 0x00189311, {1, 1}, VRType::FD, false };
    const tag Spoiling = { "Spoiling", 0x00189016, {1, 1}, VRType::CS, false };
    const tag StackID = { "StackID", 0x00209056, {1, 1}, VRType::SH, false };
    const tag StageCodeSequence = { "StageCodeSequence", 0x0040000A, {1, 1}, VRType::SQ, false };
    const tag StageName = { "StageName", 0x00082120, {1, 1}, VRType::SH, false };
    const tag StageNumber = { "StageNumber", 0x00082122, {1, 1}, VRType::IS, false };
    const tag StartAcquisitionDateTime = { "StartAcquisitionDateTime", 0x00189516, {1, 1}, VRType::DT, false };
    const tag StartAngle = { "StartAngle", 0x00540200, {1, 1}, VRType::DS, false };
    const tag StartCardiacTriggerCountThreshold = { "StartCardiacTriggerCountThreshold", 0x00189717, {1, 1}, VRType::FD, false };
    const tag StartCumulativeMetersetWeight = { "StartCumulativeMetersetWeight", 0x300C0008, {1, 1}, VRType::DS, false };
    const tag StartCumulativeTimeWeight = { "StartCumulativeTimeWeight", 0x00741407, {1, 1}, VRType::DS, false };
    const tag StartDensityThreshold = { "StartDensityThreshold", 0x00189715, {1, 1}, VRType::FD, false };
    const tag StartingRespiratoryAmplitude = { "StartingRespiratoryAmplitude", 0x00209246, {1, 1}, VRType::FL, false };
    const tag StartingRespiratoryPhase = { "StartingRespiratoryPhase", 0x00209247, {1, 1}, VRType::CS, false };
    const tag StartMeterset = { "StartMeterset", 0x30080078, {1, 1}, VRType::DS, false };
    const tag StartRelativeDensityDifferenceThreshold = { "StartRelativeDensityDifferenceThreshold", 0x00189716, {1, 1}, VRType::FD, false };
    const tag StartRespiratoryTriggerCountThreshold = { "StartRespiratoryTriggerCountThreshold", 0x00189718, {1, 1}, VRType::FD, false };
    const tag StartTrim = { "StartTrim", 0x00082142, {1, 1}, VRType::IS, false };
    const tag StationAETitle = { "StationAETitle", 0x00080055, {1, 1}, VRType::AE, false };
    const tag StationName = { "StationName", 0x00081010, {1, 1}, VRType::SH, false };
    const tag SteadyStatePulseSequence = { "SteadyStatePulseSequence", 0x00189017, {1, 1}, VRType::CS, false };
    const tag SteepKeratometricAxisSequence = { "SteepKeratometricAxisSequence", 0x00460074, {1, 1}, VRType::SQ, false };
    const tag SteeringAngle = { "SteeringAngle", 0x00186036, {1, 1}, VRType::FD, false };
    const tag StereoBaselineAngle = { "StereoBaselineAngle", 0x00220010, {1, 1}, VRType::FL, false };
    const tag StereoBaselineDisplacement = { "StereoBaselineDisplacement", 0x00220011, {1, 1}, VRType::FL, false };
    const tag StereoHorizontalPixelOffset = { "StereoHorizontalPixelOffset", 0x00220012, {1, 1}, VRType::FL, false };
    const tag StereoPairsPresent = { "StereoPairsPresent", 0x00220028, {1, 1}, VRType::CS, false };
    const tag StereoPairsSequence = { "StereoPairsSequence", 0x00220020, {1, 1}, VRType::SQ, false };
    const tag StereoRotation = { "StereoRotation", 0x00220014, {1, 1}, VRType::FL, false };
    const tag StereoVerticalPixelOffset = { "StereoVerticalPixelOffset", 0x00220013, {1, 1}, VRType::FL, false };
    const tag StimuliRetestingQuantity = { "StimuliRetestingQuantity", 0x00240042, {1, 1}, VRType::US, false };
    const tag StimulusArea = { "StimulusArea", 0x00240025, {1, 1}, VRType::FL, false };
    const tag StimulusColorCodeSequence = { "StimulusColorCodeSequence", 0x00240021, {1, 1}, VRType::SQ, false };
    const tag StimulusPresentationTime = { "StimulusPresentationTime", 0x00240028, {1, 1}, VRType::FL, false };
    const tag StimulusResults = { "StimulusResults", 0x00240093, {1, 1}, VRType::CS, false };
    const tag StopTrim = { "StopTrim", 0x00082143, {1, 1}, VRType::IS, false };
    const tag StorageMediaFileSetID = { "StorageMediaFileSetID", 0x00880130, {1, 1}, VRType::SH, false };
    const tag StorageMediaFileSetUID = { "StorageMediaFileSetUID", 0x00880140, {1, 1}, VRType::UI, false };
    const tag StorageProtocolElementSequence = { "StorageProtocolElementSequence", 0x00189936, {1, 1}, VRType::SQ, false };
    const tag StorageProtocolElementSpecificationSequence = { "StorageProtocolElementSpecificationSequence", 0x00189935, {1, 1}, VRType::SQ, false };
    const tag StorageURL = { "StorageURL", 0x00404073, {1, 1}, VRType::UR, false };
    const tag StoredValueColorRangeSequence = { "StoredValueColorRangeSequence", 0x00281230, {1, 1}, VRType::SQ, false };
    const tag STOWRSStorageSequence = { "STOWRSStorageSequence", 0x00404072, {1, 1}, VRType::SQ, false };
    const tag StrainAdditionalInformation = { "StrainAdditionalInformation", 0x00100218, {1, 1}, VRType::UT, false };
    const tag StrainCodeSequence = { "StrainCodeSequence", 0x00100219, {1, 1}, VRType::SQ, false };
    const tag StrainDescription = { "StrainDescription", 0x00100212, {1, 1}, VRType::UC, false };
    const tag StrainNomenclature = { "StrainNomenclature", 0x00100213, {1, 1}, VRType::LO, false };
    const tag StrainSource = { "StrainSource", 0x00100217, {1, 1}, VRType::LO, false };
    const tag StrainSourceRegistryCodeSequence = { "StrainSourceRegistryCodeSequence", 0x00100215, {1, 1}, VRType::SQ, false };
    const tag StrainStockNumber = { "StrainStockNumber", 0x00100214, {1, 1}, VRType::LO, false };
    const tag StrainStockSequence = { "StrainStockSequence", 0x00100216, {1, 1}, VRType::SQ, false };
    const tag StructuredConstraintObservationSequence = { "StructuredConstraintObservationSequence", 0x0082000C, {1, 1}, VRType::SQ, false };
    const tag StructuredDisplayBackgroundCIELabValue = { "StructuredDisplayBackgroundCIELabValue", 0x00720420, {3, 3}, VRType::US, false };
    const tag StructuredDisplayImageBoxSequence = { "StructuredDisplayImageBoxSequence", 0x00720422, {1, 1}, VRType::SQ, false };
    const tag StructuredDisplayTextBoxSequence = { "StructuredDisplayTextBoxSequence", 0x00720424, {1, 1}, VRType::SQ, false };
    const tag StructureSetDate = { "StructureSetDate", 0x30060008, {1, 1}, VRType::DA, false };
    const tag StructureSetDescription = { "StructureSetDescription", 0x30060006, {1, 1}, VRType::ST, false };
    const tag StructureSetLabel = { "StructureSetLabel", 0x30060002, {1, 1}, VRType::SH, false };
    const tag StructureSetName = { "StructureSetName", 0x30060004, {1, 1}, VRType::LO, false };
    const tag StructureSetROISequence = { "StructureSetROISequence", 0x30060020, {1, 1}, VRType::SQ, false };
    const tag StructureSetTime = { "StructureSetTime", 0x30060009, {1, 1}, VRType::TM, false };
    const tag StudiesContainingOtherReferencedInstancesSequence = { "StudiesContainingOtherReferencedInstancesSequence", 0x00081200, {1, 1}, VRType::SQ, false };
    const tag StudyArrivalDate = { "StudyArrivalDate", 0x00321040, {1, 1}, VRType::DA, false };
    const tag StudyArrivalTime = { "StudyArrivalTime", 0x00321041, {1, 1}, VRType::TM, false };
    const tag StudyComments = { "StudyComments", 0x00324000, {1, 1}, VRType::LT, false };
    const tag StudyCompletionDate = { "StudyCompletionDate", 0x00321050, {1, 1}, VRType::DA, false };
    const tag StudyCompletionTime = { "StudyCompletionTime", 0x00321051, {1, 1}, VRType::TM, false };
    const tag StudyComponentStatusID = { "StudyComponentStatusID", 0x00321055, {1, 1}, VRType::CS, false };
    const tag StudyDate = { "StudyDate", 0x00080020, {1, 1}, VRType::DA, false };
    const tag StudyDescription = { "StudyDescription", 0x00081030, {1, 1}, VRType::LO, false };
    const tag StudyID = { "StudyID", 0x00200010, {1, 1}, VRType::SH, false };
    const tag StudyIDIssuer = { "StudyIDIssuer", 0x00320012, {1, 1}, VRType::LO, false };
    const tag StudyInstanceUID = { "StudyInstanceUID", 0x0020000D, {1, 1}, VRType::UI, false };
    const tag StudyPriorityID = { "StudyPriorityID", 0x0032000C, {1, 1}, VRType::CS, false };
    const tag StudyReadDate = { "StudyReadDate", 0x00320034, {1, 1}, VRType::DA, false };
    const tag StudyReadTime = { "StudyReadTime", 0x00320035, {1, 1}, VRType::TM, false };
    const tag StudyStatusID = { "StudyStatusID", 0x0032000A, {1, 1}, VRType::CS, false };
    const tag StudyTime = { "StudyTime", 0x00080030, {1, 1}, VRType::TM, false };
    const tag StudyVerifiedDate = { "StudyVerifiedDate", 0x00320032, {1, 1}, VRType::DA, false };
    const tag StudyVerifiedTime = { "StudyVerifiedTime", 0x00320033, {1, 1}, VRType::TM, false };
    const tag SubjectiveRefractionLeftEyeSequence = { "SubjectiveRefractionLeftEyeSequence", 0x00460098, {1, 1}, VRType::SQ, false };
    const tag SubjectiveRefractionRightEyeSequence = { "SubjectiveRefractionRightEyeSequence", 0x00460097, {1, 1}, VRType::SQ, false };
    const tag SubjectRelativePositionInImage = { "SubjectRelativePositionInImage", 0x00100028, {3, 3}, VRType::US, false };
    const tag SubscriptionListStatus = { "SubscriptionListStatus", 0x00741244, {1, 1}, VRType::CS, false };
    const tag SubstanceAdministrationApproval = { "SubstanceAdministrationApproval", 0x00440002, {1, 1}, VRType::CS, false };
    const tag SubstanceAdministrationDateTime = { "SubstanceAdministrationDateTime", 0x00440010, {1, 1}, VRType::DT, false };
    const tag SubstanceAdministrationDeviceID = { "SubstanceAdministrationDeviceID", 0x00440012, {1, 1}, VRType::LO, false };
    const tag SubstanceAdministrationNotes = { "SubstanceAdministrationNotes", 0x00440011, {1, 1}, VRType::LO, false };
    const tag SubstanceAdministrationParameterSequence = { "SubstanceAdministrationParameterSequence", 0x00440019, {1, 1}, VRType::SQ, false };
    const tag SubtractionItemID = { "SubtractionItemID", 0x00289416, {1, 1}, VRType::US, false };
    const tag SupportedImageDisplayFormatsSequence = { "SupportedImageDisplayFormatsSequence", 0x200000A8, {1, 1}, VRType::SQ, false };
    const tag SurfaceAsymmetryIndex = { "SurfaceAsymmetryIndex", 0x00460232, {1, 1}, VRType::FL, false };
    const tag SurfaceComments = { "SurfaceComments", 0x00660004, {1, 1}, VRType::LT, false };
    const tag SurfaceCount = { "SurfaceCount", 0x0066002A, {1, 1}, VRType::UL, false };
    const tag SurfaceEntryPoint = { "SurfaceEntryPoint", 0x300A012E, {3, 3}, VRType::DS, false };
    const tag SurfaceMeshPrimitivesSequence = { "SurfaceMeshPrimitivesSequence", 0x00660013, {1, 1}, VRType::SQ, false };
    const tag SurfaceMeshZPixelOffset = { "SurfaceMeshZPixelOffset", 0x00221658, {1, 1}, VRType::UL, false };
    const tag SurfaceModelDescriptionSequence = { "SurfaceModelDescriptionSequence", 0x00686360, {1, 1}, VRType::SQ, false };
    const tag SurfaceModelLabel = { "SurfaceModelLabel", 0x00686380, {1, 1}, VRType::LO, false };
    const tag SurfaceModelScalingFactor = { "SurfaceModelScalingFactor", 0x00686390, {1, 1}, VRType::FD, false };
    const tag SurfaceNumber = { "SurfaceNumber", 0x00660003, {1, 1}, VRType::UL, false };
    const tag SurfacePointColorCIELabValueData = { "SurfacePointColorCIELabValueData", 0x00800007, {3, 3}, VRType::US, false };
    const tag SurfacePointPresentationValueData = { "SurfacePointPresentationValueData", 0x00800006, {1, 1}, VRType::US, false };
    const tag SurfacePointsNormalsSequence = { "SurfacePointsNormalsSequence", 0x00660012, {1, 1}, VRType::SQ, false };
    const tag SurfacePointsSequence = { "SurfacePointsSequence", 0x00660011, {1, 1}, VRType::SQ, false };
    const tag SurfaceProcessing = { "SurfaceProcessing", 0x00660009, {1, 1}, VRType::CS, false };
    const tag SurfaceProcessingAlgorithmIdentificationSequence = { "SurfaceProcessingAlgorithmIdentificationSequence", 0x00660035, {1, 1}, VRType::SQ, false };
    const tag SurfaceProcessingDescription = { "SurfaceProcessingDescription", 0x0066000B, {1, 1}, VRType::LO, false };
    const tag SurfaceProcessingRatio = { "SurfaceProcessingRatio", 0x0066000A, {1, 1}, VRType::FL, false };
    const tag SurfaceRegularityIndex = { "SurfaceRegularityIndex", 0x00460230, {1, 1}, VRType::FL, false };
    const tag SurfaceScanAcquisitionTypeCodeSequence = { "SurfaceScanAcquisitionTypeCodeSequence", 0x00800001, {1, 1}, VRType::SQ, false };
    const tag SurfaceScanModeCodeSequence = { "SurfaceScanModeCodeSequence", 0x00800002, {1, 1}, VRType::SQ, false };
    const tag SurfaceSequence = { "SurfaceSequence", 0x00660002, {1, 1}, VRType::SQ, false };
    const tag SurgicalTechnique = { "SurgicalTechnique", 0x00760030, {1, 1}, VRType::LO, false };
    const tag SUVType = { "SUVType", 0x00541006, {1, 1}, VRType::CS, false };
    const tag SwivelRange = { "SwivelRange", 0x00701A06, {1, 1}, VRType::FD, false };
    const tag SynchronizationChannel = { "SynchronizationChannel", 0x0018106C, {2, 2}, VRType::US, false };
    const tag SynchronizationFrameOfReferenceUID = { "SynchronizationFrameOfReferenceUID", 0x00200200, {1, 1}, VRType::UI, false };
    const tag SynchronizationTrigger = { "SynchronizationTrigger", 0x0018106A, {1, 1}, VRType::CS, false };
    const tag SynchronizedImageBoxList = { "SynchronizedImageBoxList", 0x00720432, {2, 2}, VRType::US, false };
    const tag SynchronizedScrollingSequence = { "SynchronizedScrollingSequence", 0x00720210, {1, 1}, VRType::SQ, false };
    const tag SyringeCounts = { "SyringeCounts", 0x00181045, {1, 1}, VRType::IS, false };
    const tag SystemStatus = { "SystemStatus", 0x00287006, {1, 1}, VRType::CS, false };
    const tag SystemStatusComment = { "SystemStatusComment", 0x00287007, {1, 1}, VRType::LO, false };
    const tag T2Preparation = { "T2Preparation", 0x00189021, {1, 1}, VRType::CS, false };
    const tag TableAngle = { "TableAngle", 0x00181138, {1, 1}, VRType::DS, false };
    const tag TableCradleTiltAngle = { "TableCradleTiltAngle", 0x00189471, {1, 1}, VRType::FL, false };
    const tag TableFeedPerRotation = { "TableFeedPerRotation", 0x00189310, {1, 1}, VRType::FD, false };
    const tag TableFrameOfReferenceUID = { "TableFrameOfReferenceUID", 0x00209313, {1, 1}, VRType::UI, false };
    const tag TableHeadTiltAngle = { "TableHeadTiltAngle", 0x00189470, {1, 1}, VRType::FL, false };
    const tag TableHeight = { "TableHeight", 0x00181130, {1, 1}, VRType::DS, false };
    const tag TableHorizontalRotationAngle = { "TableHorizontalRotationAngle", 0x00189469, {1, 1}, VRType::FL, false };
    const tag TableLateralIncrement = { "TableLateralIncrement", 0x00181136, {1, 1}, VRType::DS, false };
    const tag TableLongitudinalIncrement = { "TableLongitudinalIncrement", 0x00181137, {1, 1}, VRType::DS, false };
    const tag TableMotion = { "TableMotion", 0x00181134, {1, 1}, VRType::CS, false };
    const tag TableOfParameterValues = { "TableOfParameterValues", 0x0018605A, {1, 1}, VRType::FL, false };
    const tag TableOfPixelValues = { "TableOfPixelValues", 0x00186058, {1, 1}, VRType::UL, false };
    const tag TableOfXBreakPoints = { "TableOfXBreakPoints", 0x00186052, {1, 1}, VRType::UL, false };
    const tag TableOfYBreakPoints = { "TableOfYBreakPoints", 0x00186054, {1, 1}, VRType::FD, false };
    const tag TablePosition = { "TablePosition", 0x00189327, {1, 1}, VRType::FD, false };
    const tag TablePositionSequence = { "TablePositionSequence", 0x00189406, {1, 1}, VRType::SQ, false };
    const tag TableSpeed = { "TableSpeed", 0x00189309, {1, 1}, VRType::FD, false };
    const tag TableTopEccentricAdjustedAngle = { "TableTopEccentricAdjustedAngle", 0x0074102B, {1, 1}, VRType::FD, false };
    const tag TableTopEccentricAngle = { "TableTopEccentricAngle", 0x300A0125, {1, 1}, VRType::DS, false };
    const tag TableTopEccentricAngleTolerance = { "TableTopEccentricAngleTolerance", 0x300A004E, {1, 1}, VRType::DS, false };
    const tag TableTopEccentricAxisDistance = { "TableTopEccentricAxisDistance", 0x300A0124, {1, 1}, VRType::DS, false };
    const tag TableTopEccentricRotationDirection = { "TableTopEccentricRotationDirection", 0x300A0126, {1, 1}, VRType::CS, false };
    const tag TableTopLateralAdjustedPosition = { "TableTopLateralAdjustedPosition", 0x00741028, {1, 1}, VRType::FD, false };
    const tag TableTopLateralPosition = { "TableTopLateralPosition", 0x300A012A, {1, 1}, VRType::DS, false };
    const tag TableTopLateralPositionTolerance = { "TableTopLateralPositionTolerance", 0x300A0053, {1, 1}, VRType::DS, false };
    const tag TableTopLateralSetupDisplacement = { "TableTopLateralSetupDisplacement", 0x300A01D6, {1, 1}, VRType::DS, false };
    const tag TableTopLongitudinalAdjustedPosition = { "TableTopLongitudinalAdjustedPosition", 0x00741027, {1, 1}, VRType::FD, false };
    const tag TableTopLongitudinalPosition = { "TableTopLongitudinalPosition", 0x300A0129, {1, 1}, VRType::DS, false };
    const tag TableTopLongitudinalPositionTolerance = { "TableTopLongitudinalPositionTolerance", 0x300A0052, {1, 1}, VRType::DS, false };
    const tag TableTopLongitudinalSetupDisplacement = { "TableTopLongitudinalSetupDisplacement", 0x300A01D4, {1, 1}, VRType::DS, false };
    const tag TableTopPitchAdjustedAngle = { "TableTopPitchAdjustedAngle", 0x0074102C, {1, 1}, VRType::FD, false };
    const tag TableTopPitchAngle = { "TableTopPitchAngle", 0x300A0140, {1, 1}, VRType::FL, false };
    const tag TableTopPitchAngleTolerance = { "TableTopPitchAngleTolerance", 0x300A004F, {1, 1}, VRType::FL, false };
    const tag TableTopPitchRotationDirection = { "TableTopPitchRotationDirection", 0x300A0142, {1, 1}, VRType::CS, false };
    const tag TableTopRollAdjustedAngle = { "TableTopRollAdjustedAngle", 0x0074102D, {1, 1}, VRType::FD, false };
    const tag TableTopRollAngle = { "TableTopRollAngle", 0x300A0144, {1, 1}, VRType::FL, false };
    const tag TableTopRollAngleTolerance = { "TableTopRollAngleTolerance", 0x300A0050, {1, 1}, VRType::FL, false };
    const tag TableTopRollRotationDirection = { "TableTopRollRotationDirection", 0x300A0146, {1, 1}, VRType::CS, false };
    const tag TableTopVerticalAdjustedPosition = { "TableTopVerticalAdjustedPosition", 0x00741026, {1, 1}, VRType::FD, false };
    const tag TableTopVerticalPosition = { "TableTopVerticalPosition", 0x300A0128, {1, 1}, VRType::DS, false };
    const tag TableTopVerticalPositionTolerance = { "TableTopVerticalPositionTolerance", 0x300A0051, {1, 1}, VRType::DS, false };
    const tag TableTopVerticalSetupDisplacement = { "TableTopVerticalSetupDisplacement", 0x300A01D2, {1, 1}, VRType::DS, false };
    const tag TableTraverse = { "TableTraverse", 0x00181131, {1, 1}, VRType::DS, false };
    const tag TableType = { "TableType", 0x0018113A, {1, 1}, VRType::CS, false };
    const tag TableVerticalIncrement = { "TableVerticalIncrement", 0x00181135, {1, 1}, VRType::DS, false };
    const tag TableXPositionToIsocenter = { "TableXPositionToIsocenter", 0x00189466, {1, 1}, VRType::FL, false };
    const tag TableYPositionToIsocenter = { "TableYPositionToIsocenter", 0x00189467, {1, 1}, VRType::FL, false };
    const tag TableZPositionToIsocenter = { "TableZPositionToIsocenter", 0x00189468, {1, 1}, VRType::FL, false };
    const tag TagAngleFirstAxis = { "TagAngleFirstAxis", 0x00189019, {1, 1}, VRType::FD, false };
    const tag TagAngleSecondAxis = { "TagAngleSecondAxis", 0x00189219, {1, 1}, VRType::SS, false };
    const tag Tagging = { "Tagging", 0x00189028, {1, 1}, VRType::CS, false };
    const tag TaggingDelay = { "TaggingDelay", 0x00189184, {1, 1}, VRType::FD, false };
    const tag TagSpacingFirstDimension = { "TagSpacingFirstDimension", 0x00189030, {1, 1}, VRType::FD, false };
    const tag TagSpacingSecondDimension = { "TagSpacingSecondDimension", 0x00189218, {1, 1}, VRType::FD, false };
    const tag TagThickness = { "TagThickness", 0x00189035, {1, 1}, VRType::FD, false };
    const tag TangentialPower = { "TangentialPower", 0x00460250, {1, 1}, VRType::FL, false };
    const tag TargetExposureIndex = { "TargetExposureIndex", 0x00181412, {1, 1}, VRType::DS, false };
    const tag TargetFrameOfReferenceUID = { "TargetFrameOfReferenceUID", 0x0018991E, {1, 1}, VRType::UI, false };
    const tag TargetLabel = { "TargetLabel", 0x00182045, {1, 1}, VRType::SH, false };
    const tag TargetLuminanceCharacteristicsSequence = { "TargetLuminanceCharacteristicsSequence", 0x00287008, {1, 1}, VRType::SQ, false };
    const tag TargetMaterialSequence = { "TargetMaterialSequence", 0x40101072, {1, 1}, VRType::SQ, false };
    const tag TargetMaximumDose = { "TargetMaximumDose", 0x300A0027, {1, 1}, VRType::DS, false };
    const tag TargetMaximumLuminance = { "TargetMaximumLuminance", 0x0028701E, {1, 1}, VRType::FL, false };
    const tag TargetMinimumDose = { "TargetMinimumDose", 0x300A0025, {1, 1}, VRType::DS, false };
    const tag TargetMinimumLuminance = { "TargetMinimumLuminance", 0x0028701D, {1, 1}, VRType::FL, false };
    const tag TargetPositionReferenceIndicator = { "TargetPositionReferenceIndicator", 0x0020103F, {1, 1}, VRType::LO, false };
    const tag TargetPrescriptionDose = { "TargetPrescriptionDose", 0x300A0026, {1, 1}, VRType::DS, false };
    const tag TargetRefraction = { "TargetRefraction", 0x00221037, {1, 1}, VRType::FL, false };
    const tag TargetUID = { "TargetUID", 0x00182042, {1, 1}, VRType::UI, false };
    const tag TargetUnderdoseVolumeFraction = { "TargetUnderdoseVolumeFraction", 0x300A0028, {1, 1}, VRType::DS, false };
    const tag TDRType = { "TDRType", 0x40101027, {1, 1}, VRType::CS, false };
    const tag TelephoneNumberTrial = { "TelephoneNumberTrial", 0x0040A354, {1, 1}, VRType::LO, false };
    const tag TemplateExtensionCreatorUID = { "TemplateExtensionCreatorUID", 0x0040DB0D, {1, 1}, VRType::UI, false };
    const tag TemplateExtensionFlag = { "TemplateExtensionFlag", 0x0040DB0B, {1, 1}, VRType::CS, false };
    const tag TemplateExtensionOrganizationUID = { "TemplateExtensionOrganizationUID", 0x0040DB0C, {1, 1}, VRType::UI, false };
    const tag TemplateIdentifier = { "TemplateIdentifier", 0x0040DB00, {1, 1}, VRType::CS, false };
    const tag TemplateLocalVersion = { "TemplateLocalVersion", 0x0040DB07, {1, 1}, VRType::DT, false };
    const tag TemplateName = { "TemplateName", 0x300A0244, {1, 1}, VRType::LO, false };
    const tag TemplateNumber = { "TemplateNumber", 0x300A0240, {1, 1}, VRType::IS, false };
    const tag TemplateType = { "TemplateType", 0x300A0242, {1, 1}, VRType::SH, false };
    const tag TemplateVersion = { "TemplateVersion", 0x0040DB06, {1, 1}, VRType::DT, false };
    const tag TemporalPositionIdentifier = { "TemporalPositionIdentifier", 0x00200100, {1, 1}, VRType::IS, false };
    const tag TemporalPositionIndex = { "TemporalPositionIndex", 0x00209128, {1, 1}, VRType::UL, false };
    const tag TemporalPositionSequence = { "TemporalPositionSequence", 0x00209310, {1, 1}, VRType::SQ, false };
    const tag TemporalPositionTimeOffset = { "TemporalPositionTimeOffset", 0x0020930D, {1, 1}, VRType::FD, false };
    const tag TemporalRangeType = { "TemporalRangeType", 0x0040A130, {1, 1}, VRType::CS, false };
    const tag TemporalResolution = { "TemporalResolution", 0x00200110, {1, 1}, VRType::DS, false };
    const tag TerminationCardiacTriggerCountThreshold = { "TerminationCardiacTriggerCountThreshold", 0x00189723, {1, 1}, VRType::FD, false };
    const tag TerminationCountsThreshold = { "TerminationCountsThreshold", 0x00189719, {1, 1}, VRType::FD, false };
    const tag TerminationDensityThreshold = { "TerminationDensityThreshold", 0x00189720, {1, 1}, VRType::FD, false };
    const tag TerminationRelativeDensityThreshold = { "TerminationRelativeDensityThreshold", 0x00189721, {1, 1}, VRType::FD, false };
    const tag TerminationRespiratoryTriggerCountThreshold = { "TerminationRespiratoryTriggerCountThreshold", 0x00189724, {1, 1}, VRType::FD, false };
    const tag TerminationTimeThreshold = { "TerminationTimeThreshold", 0x00189722, {1, 1}, VRType::FD, false };
    const tag TestImageValidation = { "TestImageValidation", 0x0028702B, {1, 1}, VRType::CS, false };
    const tag TestPatternCodeSequence = { "TestPatternCodeSequence", 0x0028702C, {1, 1}, VRType::SQ, false };
    const tag TestPointNormalsDataFlag = { "TestPointNormalsDataFlag", 0x00240057, {1, 1}, VRType::CS, false };
    const tag TestPointNormalsSequence = { "TestPointNormalsSequence", 0x00240058, {1, 1}, VRType::SQ, false };
    const tag TestResult = { "TestResult", 0x00287029, {1, 1}, VRType::CS, false };
    const tag TestResultComment = { "TestResultComment", 0x0028702A, {1, 1}, VRType::LO, false };
    const tag TextColorCIELabValue = { "TextColorCIELabValue", 0x00700241, {3, 3}, VRType::US, false };
    const tag TextComments = { "TextComments", 0x40004000, {1, 1}, VRType::LT, false };
    const tag TextObjectSequence = { "TextObjectSequence", 0x00700008, {1, 1}, VRType::SQ, false };
    const tag TextString = { "TextString", 0x20300020, {1, 1}, VRType::LO, false };
    const tag TextStyleSequence = { "TextStyleSequence", 0x00700231, {1, 1}, VRType::SQ, false };
    const tag TextureLabel = { "TextureLabel", 0x00800009, {1, 1}, VRType::SH, false };
    const tag TextValue = { "TextValue", 0x0040A160, {1, 1}, VRType::UT, false };
    const tag TherapyDescription = { "TherapyDescription", 0x00180039, {1, 1}, VRType::CS, false };
    const tag TherapyType = { "TherapyType", 0x00180037, {1, 1}, VRType::CS, false };
    const tag ThreatCategory = { "ThreatCategory", 0x40101012, {1, 1}, VRType::CS, false };
    const tag ThreatCategoryDescription = { "ThreatCategoryDescription", 0x40101013, {1, 1}, VRType::LT, false };
    const tag ThreatDetectionAlgorithmandVersion = { "ThreatDetectionAlgorithmandVersion", 0x40101029, {1, 1}, VRType::LO, false };
    const tag ThreatROIBase = { "ThreatROIBase", 0x40101004, {3, 3}, VRType::FL, false };
    const tag ThreatROIBitmap = { "ThreatROIBitmap", 0x40101006, {1, 1}, VRType::OB, false };
    const tag ThreatROIExtents = { "ThreatROIExtents", 0x40101005, {3, 3}, VRType::FL, false };
    const tag ThreatROIVoxelSequence = { "ThreatROIVoxelSequence", 0x40101001, {1, 1}, VRType::SQ, false };
    const tag ThreatSequence = { "ThreatSequence", 0x40101011, {1, 1}, VRType::SQ, false };
    const tag ThreeDDegreeOfFreedomAxis = { "ThreeDDegreeOfFreedomAxis", 0x00686490, {3, 3}, VRType::FD, false };
    const tag ThreeDImplantTemplateGroupMemberMatchingAxes = { "ThreeDImplantTemplateGroupMemberMatchingAxes", 0x00780060, {9, 9}, VRType::FD, false };
    const tag ThreeDImplantTemplateGroupMemberMatchingPoint = { "ThreeDImplantTemplateGroupMemberMatchingPoint", 0x00780050, {3, 3}, VRType::FD, false };
    const tag ThreeDLineCoordinates = { "ThreeDLineCoordinates", 0x006865D0, {6, 6}, VRType::FD, false };
    const tag ThreeDMatingAxes = { "ThreeDMatingAxes", 0x006864D0, {9, 9}, VRType::FD, false };
    const tag ThreeDMatingPoint = { "ThreeDMatingPoint", 0x006864C0, {3, 3}, VRType::FD, false };
    const tag ThreeDPlaneNormal = { "ThreeDPlaneNormal", 0x00686620, {3, 3}, VRType::FD, false };
    const tag ThreeDPlaneOrigin = { "ThreeDPlaneOrigin", 0x00686610, {3, 3}, VRType::FD, false };
    const tag ThreeDPointCoordinates = { "ThreeDPointCoordinates", 0x00686590, {3, 3}, VRType::FD, false };
    const tag ThreeDRenderingType = { "ThreeDRenderingType", 0x00720520, {1, 1}, VRType::CS, false };
    const tag ThresholdDensity = { "ThresholdDensity", 0x20400100, {1, 1}, VRType::CS, false };
    const tag ThresholdSequence = { "ThresholdSequence", 0x00701B11, {1, 1}, VRType::SQ, false };
    const tag ThresholdType = { "ThresholdType", 0x00701B13, {1, 1}, VRType::CS, false };
    const tag ThresholdValue = { "ThresholdValue", 0x00701B14, {1, 1}, VRType::FD, false };
    const tag ThresholdValueSequence = { "ThresholdValueSequence", 0x00701B12, {1, 1}, VRType::SQ, false };
    const tag TickAlignment = { "TickAlignment", 0x00700274, {1, 1}, VRType::CS, false };
    const tag TickLabel = { "TickLabel", 0x00700289, {1, 1}, VRType::SH, false };
    const tag TickLabelAlignment = { "TickLabelAlignment", 0x00700279, {1, 1}, VRType::CS, false };
    const tag TickPosition = { "TickPosition", 0x00700288, {1, 1}, VRType::FL, false };
    const tag TIDOffset = { "TIDOffset", 0x00286120, {1, 1}, VRType::SS, false };
    const tag Time = { "Time", 0x0040A122, {1, 1}, VRType::TM, false };
    const tag TimeBasedImageSetsSequence = { "TimeBasedImageSetsSequence", 0x00720030, {1, 1}, VRType::SQ, false };
    const tag TimeDistributionProtocol = { "TimeDistributionProtocol", 0x00181802, {1, 1}, VRType::CS, false };
    const tag TimeDomainFiltering = { "TimeDomainFiltering", 0x00189065, {1, 2}, VRType::CS, false };
    const tag TimeOfDocumentCreationOrVerbalTransactionTrial = { "TimeOfDocumentCreationOrVerbalTransactionTrial", 0x0040A112, {1, 1}, VRType::TM, false };
    const tag TimeOfFlightContrast = { "TimeOfFlightContrast", 0x00189015, {1, 1}, VRType::CS, false };
    const tag TimeOfFlightInformationUsed = { "TimeOfFlightInformationUsed", 0x00189755, {1, 1}, VRType::CS, false };
    const tag TimeOfGainCalibration = { "TimeOfGainCalibration", 0x00143077, {1, 1}, VRType::TM, false };
    const tag TimeOfLastCalibration = { "TimeOfLastCalibration", 0x00181201, {1, 1}, VRType::TM, false };
    const tag TimeOfLastDetectorCalibration = { "TimeOfLastDetectorCalibration", 0x0018700E, {1, 1}, VRType::TM, false };
    const tag TimeOfSecondaryCapture = { "TimeOfSecondaryCapture", 0x00181014, {1, 1}, VRType::TM, false };
    const tag TimeRange = { "TimeRange", 0x00081163, {2, 2}, VRType::FD, false };
    const tag TimeSeriesBlending = { "TimeSeriesBlending", 0x00701B07, {1, 1}, VRType::CS, false };
    const tag TimeSliceVector = { "TimeSliceVector", 0x00540100, {1, 1}, VRType::US, false };
    const tag TimeSlotInformationSequence = { "TimeSlotInformationSequence", 0x00540072, {1, 1}, VRType::SQ, false };
    const tag TimeSlotNumber = { "TimeSlotNumber", 0x00200017, {1, 1}, VRType::IS, false };
    const tag TimeSlotTime = { "TimeSlotTime", 0x00540073, {1, 1}, VRType::DS, false };
    const tag TimeSlotVector = { "TimeSlotVector", 0x00540070, {1, 1}, VRType::US, false };
    const tag TimeSource = { "TimeSource", 0x00181801, {1, 1}, VRType::SH, false };
    const tag TimezoneOffsetFromUTC = { "TimezoneOffsetFromUTC", 0x00080201, {1, 1}, VRType::SH, false };
    const tag TIPType = { "TIPType", 0x40101039, {1, 1}, VRType::CS, false };
    const tag TissueHeterogeneityCorrection = { "TissueHeterogeneityCorrection", 0x30040014, {1, 3}, VRType::CS, false };
    const tag TMLinePositionX0 = { "TMLinePositionX0", 0x0018603D, {1, 1}, VRType::SL, false };
    const tag TMLinePositionX0Retired = { "TMLinePositionX0Retired", 0x0018603C, {1, 1}, VRType::UL, false };
    const tag TMLinePositionX1 = { "TMLinePositionX1", 0x00186041, {1, 1}, VRType::SL, false };
    const tag TMLinePositionX1Retired = { "TMLinePositionX1Retired", 0x00186040, {1, 1}, VRType::UL, false };
    const tag TMLinePositionY0 = { "TMLinePositionY0", 0x0018603F, {1, 1}, VRType::SL, false };
    const tag TMLinePositionY0Retired = { "TMLinePositionY0Retired", 0x0018603E, {1, 1}, VRType::UL, false };
    const tag TMLinePositionY1 = { "TMLinePositionY1", 0x00186043, {1, 1}, VRType::SL, false };
    const tag TMLinePositionY1Retired = { "TMLinePositionY1Retired", 0x00186042, {1, 1}, VRType::UL, false };
    const tag ToleranceTableLabel = { "ToleranceTableLabel", 0x300A0043, {1, 1}, VRType::SH, false };
    const tag ToleranceTableNumber = { "ToleranceTableNumber", 0x300A0042, {1, 1}, VRType::IS, false };
    const tag ToleranceTableSequence = { "ToleranceTableSequence", 0x300A0040, {1, 1}, VRType::SQ, false };
    const tag TomoAngle = { "TomoAngle", 0x00181470, {1, 1}, VRType::DS, false };
    const tag TomoClass = { "TomoClass", 0x00181491, {1, 1}, VRType::CS, false };
    const tag TomoLayerHeight = { "TomoLayerHeight", 0x00181460, {1, 1}, VRType::DS, false };
    const tag TomoTime = { "TomoTime", 0x00181480, {1, 1}, VRType::DS, false };
    const tag TomoType = { "TomoType", 0x00181490, {1, 1}, VRType::CS, false };
    const tag TopicAuthor = { "TopicAuthor", 0x00880910, {1, 1}, VRType::LO, false };
    const tag TopicKeywords = { "TopicKeywords", 0x00880912, {1, 32}, VRType::LO, false };
    const tag TopicSubject = { "TopicSubject", 0x00880906, {1, 1}, VRType::ST, false };
    const tag TopicTitle = { "TopicTitle", 0x00880904, {1, 1}, VRType::LO, false };
    const tag TopLeftHandCornerOfLocalizerArea = { "TopLeftHandCornerOfLocalizerArea", 0x00480201, {2, 2}, VRType::US, false };
    const tag TotalAperture = { "TotalAperture", 0x00145101, {1, 1}, VRType::DS, false };
    const tag TotalBlockTrayFactor = { "TotalBlockTrayFactor", 0x300A00F2, {1, 1}, VRType::DS, false };
    const tag TotalBlockTrayWaterEquivalentThickness = { "TotalBlockTrayWaterEquivalentThickness", 0x300A00F3, {1, 1}, VRType::FL, false };
    const tag TotalCollimationWidth = { "TotalCollimationWidth", 0x00189307, {1, 1}, VRType::FD, false };
    const tag TotalCompensatorTrayFactor = { "TotalCompensatorTrayFactor", 0x300A00E2, {1, 1}, VRType::DS, false };
    const tag TotalCompensatorTrayWaterEquivalentThickness = { "TotalCompensatorTrayWaterEquivalentThickness", 0x300A02E3, {1, 1}, VRType::FL, false };
    const tag TotalGain = { "TotalGain", 0x00185040, {1, 1}, VRType::DS, false };
    const tag TotalNumberOfExposures = { "TotalNumberOfExposures", 0x00400301, {1, 1}, VRType::US, false };
    const tag TotalNumberOfPiecesOfMediaCreated = { "TotalNumberOfPiecesOfMediaCreated", 0x2200000B, {1, 1}, VRType::US, false };
    const tag TotalPixelMatrixColumns = { "TotalPixelMatrixColumns", 0x00480006, {1, 1}, VRType::UL, false };
    const tag TotalPixelMatrixFocalPlanes = { "TotalPixelMatrixFocalPlanes", 0x00480303, {1, 1}, VRType::UL, false };
    const tag TotalPixelMatrixOriginSequence = { "TotalPixelMatrixOriginSequence", 0x00480008, {1, 1}, VRType::SQ, false };
    const tag TotalPixelMatrixRows = { "TotalPixelMatrixRows", 0x00480007, {1, 1}, VRType::UL, false };
    const tag TotalProcessingTime = { "TotalProcessingTime", 0x40101069, {1, 1}, VRType::FL, false };
    const tag TotalReferenceAirKerma = { "TotalReferenceAirKerma", 0x300A0250, {1, 1}, VRType::DS, false };
    const range_tag TotalTime = { "TotalTime", 0x5000200A, 0x50FF200A, 0x00010000, {1, 1}, VRType::UL, false };
    const tag TotalTimeOfFluoroscopy = { "TotalTimeOfFluoroscopy", 0x00400300, {1, 1}, VRType::US, false };
    const tag TotalWedgeTrayWaterEquivalentThickness = { "TotalWedgeTrayWaterEquivalentThickness", 0x300A00D7, {1, 1}, VRType::FL, false };
    const tag TrackingAlgorithmIdentificationSequence = { "TrackingAlgorithmIdentificationSequence", 0x00660104, {1, 1}, VRType::SQ, false };
    const tag TrackingID = { "TrackingID", 0x00620020, {1, 1}, VRType::UT, false };
    const tag TrackingUID = { "TrackingUID", 0x00620021, {1, 1}, VRType::UI, false };
    const tag TrackPointIndexList = { "TrackPointIndexList", 0x00660129, {1, 1}, VRType::OL, false };
    const tag TrackSequence = { "TrackSequence", 0x00660102, {1, 1}, VRType::SQ, false };
    const tag TrackSetAnatomicalTypeCodeSequence = { "TrackSetAnatomicalTypeCodeSequence", 0x00660108, {1, 1}, VRType::SQ, false };
    const tag TrackSetDescription = { "TrackSetDescription", 0x00660107, {1, 1}, VRType::UT, false };
    const tag TrackSetLabel = { "TrackSetLabel", 0x00660106, {1, 1}, VRType::LO, false };
    const tag TrackSetNumber = { "TrackSetNumber", 0x00660105, {1, 1}, VRType::UL, false };
    const tag TrackSetSequence = { "TrackSetSequence", 0x00660101, {1, 1}, VRType::SQ, false };
    const tag TrackSetStatisticsSequence = { "TrackSetStatisticsSequence", 0x00660124, {1, 1}, VRType::SQ, false };
    const tag TrackStatisticsSequence = { "TrackStatisticsSequence", 0x00660130, {1, 1}, VRType::SQ, false };
    const tag TransactionUID = { "TransactionUID", 0x00081195, {1, 1}, VRType::UI, false };
    const tag TransducerApplicationCodeSequence = { "TransducerApplicationCodeSequence", 0x0018980F, {1, 1}, VRType::SQ, false };
    const tag TransducerBeamSteeringCodeSequence = { "TransducerBeamSteeringCodeSequence", 0x0018980E, {1, 1}, VRType::SQ, false };
    const tag TransducerData = { "TransducerData", 0x00185010, {1, 1}, VRType::LO, false };
    const tag TransducerFrequency = { "TransducerFrequency", 0x00186030, {1, 1}, VRType::UL, false };
    const tag TransducerGeometryCodeSequence = { "TransducerGeometryCodeSequence", 0x0018980D, {1, 1}, VRType::SQ, false };
    const tag TransducerOrientation = { "TransducerOrientation", 0x00082204, {1, 1}, VRType::CS, false };
    const tag TransducerOrientationModifierSequence = { "TransducerOrientationModifierSequence", 0x00082246, {1, 1}, VRType::SQ, false };
    const tag TransducerOrientationSequence = { "TransducerOrientationSequence", 0x00082244, {1, 1}, VRType::SQ, false };
    const tag TransducerPosition = { "TransducerPosition", 0x00082200, {1, 1}, VRType::CS, false };
    const tag TransducerPositionModifierSequence = { "TransducerPositionModifierSequence", 0x00082242, {1, 1}, VRType::SQ, false };
    const tag TransducerPositionSequence = { "TransducerPositionSequence", 0x00082240, {1, 1}, VRType::SQ, false };
    const tag TransducerScanPatternCodeSequence = { "TransducerScanPatternCodeSequence", 0x00189809, {1, 1}, VRType::SQ, false };
    const tag TransducerType = { "TransducerType", 0x00186031, {1, 1}, VRType::CS, false };
    const tag TransferSyntaxUID = { "TransferSyntaxUID", 0x00020010, {1, 1}, VRType::UI, false };
    const tag TransferTubeLength = { "TransferTubeLength", 0x300A02A4, {1, 1}, VRType::DS, false };
    const tag TransferTubeNumber = { "TransferTubeNumber", 0x300A02A2, {1, 1}, VRType::IS, false };
    const tag TransformationAlgorithmSequence = { "TransformationAlgorithmSequence", 0x00221513, {1, 1}, VRType::SQ, false };
    const tag TransformationMethodCodeSequence = { "TransformationMethodCodeSequence", 0x00221512, {1, 1}, VRType::SQ, false };
    const tag TransformDescription = { "TransformDescription", 0x00142222, {1, 1}, VRType::ST, false };
    const tag TransformedAxisUnits = { "TransformedAxisUnits", 0x00142228, {1, 1}, VRType::CS, false };
    const tag TransformLabel = { "TransformLabel", 0x00280400, {1, 1}, VRType::LO, false };
    const tag TransformNumberOfAxes = { "TransformNumberOfAxes", 0x00142224, {1, 1}, VRType::IS, false };
    const tag TransformOrderOfAxes = { "TransformOrderOfAxes", 0x00142226, {1, 1}, VRType::IS, false };
    const tag TransformVersionNumber = { "TransformVersionNumber", 0x00280401, {1, 1}, VRType::LO, false };
    const tag TranslationRateX = { "TranslationRateX", 0x0014409C, {1, 1}, VRType::DS, false };
    const tag TranslationRateY = { "TranslationRateY", 0x0014409D, {1, 1}, VRType::DS, false };
    const tag TransmitCoilManufacturerName = { "TransmitCoilManufacturerName", 0x00189050, {1, 1}, VRType::LO, false };
    const tag TransmitCoilName = { "TransmitCoilName", 0x00181251, {1, 1}, VRType::SH, false };
    const tag TransmitCoilType = { "TransmitCoilType", 0x00189051, {1, 1}, VRType::CS, false };
    const tag TransmitterFrequency = { "TransmitterFrequency", 0x00189098, {1, 2}, VRType::FD, false };
    const tag TransmitTransducerSequence = { "TransmitTransducerSequence", 0x00144010, {1, 1}, VRType::SQ, false };
    const tag TransmitTransducerSettingsSequence = { "TransmitTransducerSettingsSequence", 0x00144050, {1, 1}, VRType::SQ, false };
    const tag TransportClassification = { "TransportClassification", 0x40101067, {1, 1}, VRType::CS, false };
    const tag TransverseDetectorSeparation = { "TransverseDetectorSeparation", 0x00189726, {1, 1}, VRType::FD, false };
    const tag TransverseMash = { "TransverseMash", 0x00541202, {1, 1}, VRType::IS, false };
    const tag TrayAccessoryCode = { "TrayAccessoryCode", 0x300A0355, {1, 1}, VRType::LO, false };
    const tag TreatmentControlPointDate = { "TreatmentControlPointDate", 0x30080024, {1, 1}, VRType::DA, false };
    const tag TreatmentControlPointTime = { "TreatmentControlPointTime", 0x30080025, {1, 1}, VRType::TM, false };
    const tag TreatmentDate = { "TreatmentDate", 0x30080250, {1, 1}, VRType::DA, false };
    const tag TreatmentDeliveryType = { "TreatmentDeliveryType", 0x300A00CE, {1, 1}, VRType::CS, false };
    const tag TreatmentMachineName = { "TreatmentMachineName", 0x300A00B2, {1, 1}, VRType::SH, false };
    const tag TreatmentMachineSequence = { "TreatmentMachineSequence", 0x300A0206, {1, 1}, VRType::SQ, false };
    const tag TreatmentProtocols = { "TreatmentProtocols", 0x300A0009, {1, 1}, VRType::LO, false };
    const tag TreatmentSessionApplicationSetupSequence = { "TreatmentSessionApplicationSetupSequence", 0x30080110, {1, 1}, VRType::SQ, false };
    const tag TreatmentSessionBeamSequence = { "TreatmentSessionBeamSequence", 0x30080020, {1, 1}, VRType::SQ, false };
    const tag TreatmentSessionIonBeamSequence = { "TreatmentSessionIonBeamSequence", 0x30080021, {1, 1}, VRType::SQ, false };
    const tag TreatmentSites = { "TreatmentSites", 0x300A000B, {1, 1}, VRType::LO, false };
    const tag TreatmentStatusComment = { "TreatmentStatusComment", 0x30080202, {1, 1}, VRType::ST, false };
    const tag TreatmentSummaryCalculatedDoseReferenceSequence = { "TreatmentSummaryCalculatedDoseReferenceSequence", 0x30080050, {1, 1}, VRType::SQ, false };
    const tag TreatmentSummaryMeasuredDoseReferenceSequence = { "TreatmentSummaryMeasuredDoseReferenceSequence", 0x300800E0, {1, 1}, VRType::SQ, false };
    const tag TreatmentTerminationCode = { "TreatmentTerminationCode", 0x3008002B, {1, 1}, VRType::SH, false };
    const tag TreatmentTerminationStatus = { "TreatmentTerminationStatus", 0x3008002A, {1, 1}, VRType::CS, false };
    const tag TreatmentTime = { "TreatmentTime", 0x30080251, {1, 1}, VRType::TM, false };
    const tag TreatmentVerificationStatus = { "TreatmentVerificationStatus", 0x3008002C, {1, 1}, VRType::CS, false };
    const tag TriangleFanSequence = { "TriangleFanSequence", 0x00660027, {1, 1}, VRType::SQ, false };
    const tag TrianglePointIndexList = { "TrianglePointIndexList", 0x00660023, {1, 1}, VRType::OW, false };
    const tag TriangleStripSequence = { "TriangleStripSequence", 0x00660026, {1, 1}, VRType::SQ, false };
    const tag TriggerSamplePosition = { "TriggerSamplePosition", 0x0018106E, {1, 1}, VRType::UL, false };
    const tag TriggerSourceOrType = { "TriggerSourceOrType", 0x00181061, {1, 1}, VRType::LO, false };
    const tag TriggerTime = { "TriggerTime", 0x00181060, {1, 1}, VRType::DS, false };
    const tag TriggerTimeOffset = { "TriggerTimeOffset", 0x00181069, {1, 1}, VRType::DS, false };
    const tag TriggerVector = { "TriggerVector", 0x00540210, {1, 1}, VRType::IS, false };
    const tag TriggerWindow = { "TriggerWindow", 0x00181094, {1, 1}, VRType::IS, false };
    const tag Trim = { "Trim", 0x20100140, {1, 1}, VRType::CS, false };
    const tag TubeAngle = { "TubeAngle", 0x00189303, {1, 1}, VRType::FD, false };
    const tag TwoDDegreeOfFreedomAxis = { "TwoDDegreeOfFreedomAxis", 0x006864F0, {3, 3}, VRType::FD, false };
    const tag TwoDDegreeOfFreedomSequence = { "TwoDDegreeOfFreedomSequence", 0x00686470, {1, 1}, VRType::SQ, false };
    const tag TwoDimensionalToThreeDimensionalMapData = { "TwoDimensionalToThreeDimensionalMapData", 0x00221531, {1, 1}, VRType::OF, false };
    const tag TwoDimensionalToThreeDimensionalMapSequence = { "TwoDimensionalToThreeDimensionalMapSequence", 0x00221518, {1, 1}, VRType::SQ, false };
    const tag TwoDImplantTemplateGroupMemberMatchingAxes = { "TwoDImplantTemplateGroupMemberMatchingAxes", 0x007800A0, {4, 4}, VRType::FD, false };
    const tag TwoDImplantTemplateGroupMemberMatchingPoint = { "TwoDImplantTemplateGroupMemberMatchingPoint", 0x00780090, {2, 2}, VRType::FD, false };
    const tag TwoDLineCoordinates = { "TwoDLineCoordinates", 0x006865B0, {4, 4}, VRType::FD, false };
    const tag TwoDLineCoordinatesSequence = { "TwoDLineCoordinatesSequence", 0x006865A0, {1, 1}, VRType::SQ, false };
    const tag TwoDMatingAxes = { "TwoDMatingAxes", 0x00686460, {4, 4}, VRType::FD, false };
    const tag TwoDMatingFeatureCoordinatesSequence = { "TwoDMatingFeatureCoordinatesSequence", 0x00686430, {1, 1}, VRType::SQ, false };
    const tag TwoDMatingPoint = { "TwoDMatingPoint", 0x00686450, {2, 2}, VRType::FD, false };
    const tag TwoDPlaneCoordinatesSequence = { "TwoDPlaneCoordinatesSequence", 0x006865E0, {1, 1}, VRType::SQ, false };
    const tag TwoDPlaneIntersection = { "TwoDPlaneIntersection", 0x006865F0, {4, 4}, VRType::FD, false };
    const tag TwoDPointCoordinates = { "TwoDPointCoordinates", 0x00686560, {2, 2}, VRType::FD, false };
    const tag TwoDPointCoordinatesSequence = { "TwoDPointCoordinatesSequence", 0x00686550, {1, 1}, VRType::SQ, false };
    const range_tag TypeOfData = { "TypeOfData", 0x50000020, 0x50FF0020, 0x00010000, {1, 1}, VRType::CS, false };
    const tag TypeOfDetectorMotion = { "TypeOfDetectorMotion", 0x00540202, {1, 1}, VRType::CS, false };
    const tag TypeOfFilters = { "TypeOfFilters", 0x00181161, {1, 1}, VRType::LO, false };
    const tag TypeOfInstances = { "TypeOfInstances", 0x0040E020, {1, 1}, VRType::CS, false };
    const tag TypeOfPatientID = { "TypeOfPatientID", 0x00100022, {1, 1}, VRType::CS, false };
    const tag TypeOfSynchronization = { "TypeOfSynchronization", 0x00720434, {1, 1}, VRType::CS, false };
    const tag UDISequence = { "UDISequence", 0x0018100A, {1, 1}, VRType::SQ, false };
    const tag UID = { "UID", 0x0040A124, {1, 1}, VRType::UI, false };
    const tag UltrasoundAcquisitionGeometry = { "UltrasoundAcquisitionGeometry", 0x00209307, {1, 1}, VRType::CS, false };
    const tag UltrasoundColorDataPresent = { "UltrasoundColorDataPresent", 0x00280014, {1, 1}, VRType::US, false };
    const tag UltrasoundOphthalmicAxialLengthMeasurementsSequence = { "UltrasoundOphthalmicAxialLengthMeasurementsSequence", 0x00221220, {1, 1}, VRType::SQ, false };
    const tag UltrasoundSelectedOphthalmicAxialLengthSequence = { "UltrasoundSelectedOphthalmicAxialLengthSequence", 0x00221230, {1, 1}, VRType::SQ, false };
    const tag UnassignedPerFrameConvertedAttributesSequence = { "UnassignedPerFrameConvertedAttributesSequence", 0x00209171, {1, 1}, VRType::SQ, false };
    const tag UnassignedSharedConvertedAttributesSequence = { "UnassignedSharedConvertedAttributesSequence", 0x00209170, {1, 1}, VRType::SQ, false };
    const tag Underlined = { "Underlined", 0x00700248, {1, 1}, VRType::CS, false };
    const tag UnformattedTextValue = { "UnformattedTextValue", 0x00700006, {1, 1}, VRType::ST, false };
    const tag UnifiedProcedureStepListStatus = { "UnifiedProcedureStepListStatus", 0x00741246, {1, 1}, VRType::CS, false };
    const tag UnifiedProcedureStepPerformedProcedureSequence = { "UnifiedProcedureStepPerformedProcedureSequence", 0x00741216, {1, 1}, VRType::SQ, false };
    const tag UniformResourceLocatorTrial = { "UniformResourceLocatorTrial", 0x0040A992, {1, 1}, VRType::ST, false };
    const tag UniqueDeviceIdentifier = { "UniqueDeviceIdentifier", 0x00181009, {1, 1}, VRType::UT, false };
    const tag Units = { "Units", 0x00541001, {1, 1}, VRType::CS, false };
    const tag UniversalEntityID = { "UniversalEntityID", 0x00400032, {1, 1}, VRType::UT, false };
    const tag UniversalEntityIDType = { "UniversalEntityIDType", 0x00400033, {1, 1}, VRType::CS, false };
    const tag UnspecifiedLateralityLensSequence = { "UnspecifiedLateralityLensSequence", 0x00460016, {1, 1}, VRType::SQ, false };
    const tag UpperLowerPixelValues = { "UpperLowerPixelValues", 0x00181240, {1, 1}, VRType::IS, false };
    const tag UrgencyOrPriorityAlertsTrial = { "UrgencyOrPriorityAlertsTrial", 0x0040A057, {1, 1}, VRType::CS, false };
    const tag URNCodeValue = { "URNCodeValue", 0x00080120, {1, 1}, VRType::UR, false };
    const tag UsedFiducialsSequence = { "UsedFiducialsSequence", 0x00700314, {1, 1}, VRType::SQ, false };
    const tag UsedSegmentsSequence = { "UsedSegmentsSequence", 0x00620012, {1, 1}, VRType::SQ, false };
    const tag UserSelectedGainY = { "UserSelectedGainY", 0x0014408B, {1, 1}, VRType::DS, false };
    const tag UserSelectedOffsetX = { "UserSelectedOffsetX", 0x0014408D, {1, 1}, VRType::DS, false };
    const tag UserSelectedOffsetY = { "UserSelectedOffsetY", 0x0014408E, {1, 1}, VRType::DS, false };
    const tag UserSelectedPhase = { "UserSelectedPhase", 0x0014408C, {1, 1}, VRType::DS, false };
    const tag USImageDescriptionSequence = { "USImageDescriptionSequence", 0x00189806, {1, 1}, VRType::SQ, false };
    const tag UValueData = { "UValueData", 0x00800010, {1, 1}, VRType::OF, false };
    const tag UVMappingSequence = { "UVMappingSequence", 0x00800008, {1, 1}, VRType::SQ, false };
    const tag ValueType = { "ValueType", 0x0040A040, {1, 1}, VRType::CS, false };
    const range_tag VariableCoefficientsSDDN = { "VariableCoefficientsSDDN", 0x7F000040, 0x7FFF0040, 0x00010000, {1, 1}, VRType::OW, false };
    const range_tag VariableCoefficientsSDHN = { "VariableCoefficientsSDHN", 0x7F000030, 0x7FFF0030, 0x00010000, {1, 1}, VRType::OW, false };
    const range_tag VariableCoefficientsSDVN = { "VariableCoefficientsSDVN", 0x7F000020, 0x7FFF0020, 0x00010000, {1, 1}, VRType::OW, false };
    const tag VariableFlipAngleFlag = { "VariableFlipAngleFlag", 0x00181315, {1, 1}, VRType::CS, false };
    const range_tag VariableNextDataGroup = { "VariableNextDataGroup", 0x7F000011, 0x7FFF0011, 0x00010000, {1, 1}, VRType::US, false };
    const range_tag VariablePixelData = { "VariablePixelData", 0x7F000010, 0x7FFF0010, 0x00010000, {1, 1}, VRType::OB, true };
    const tag VectorAccuracy = { "VectorAccuracy", 0x00660020, {1, 1}, VRType::FL, false };
    const tag VectorCoordinateData = { "VectorCoordinateData", 0x00660021, {1, 1}, VRType::OF, false };
    const tag VectorDimensionality = { "VectorDimensionality", 0x0066001F, {1, 1}, VRType::US, false };
    const tag VectorGridData = { "VectorGridData", 0x00640009, {1, 1}, VRType::OF, false };
    const tag VelocityEncodingAcquisitionSequence = { "VelocityEncodingAcquisitionSequence", 0x00189092, {1, 1}, VRType::SQ, false };
    const tag VelocityEncodingDirection = { "VelocityEncodingDirection", 0x00189090, {3, 3}, VRType::FD, false };
    const tag VelocityEncodingMaximumValue = { "VelocityEncodingMaximumValue", 0x00189217, {1, 1}, VRType::FD, false };
    const tag VelocityEncodingMinimumValue = { "VelocityEncodingMinimumValue", 0x00189091, {1, 1}, VRType::FD, false };
    const tag VelocityOfSound = { "VelocityOfSound", 0x00144064, {1, 1}, VRType::DS, false };
    const tag VerbalSourceIdentifierCodeSequenceTrial = { "VerbalSourceIdentifierCodeSequenceTrial", 0x0040A358, {1, 1}, VRType::SQ, false };
    const tag VerbalSourceTrial = { "VerbalSourceTrial", 0x0040A352, {1, 1}, VRType::PN, false };
    const tag VerificationDateTime = { "VerificationDateTime", 0x0040A030, {1, 1}, VRType::DT, false };
    const tag VerificationFlag = { "VerificationFlag", 0x0040A493, {1, 1}, VRType::CS, false };
    const tag VerificationImageTiming = { "VerificationImageTiming", 0x00741032, {1, 1}, VRType::CS, false };
    const tag VerifyingObserverIdentificationCodeSequence = { "VerifyingObserverIdentificationCodeSequence", 0x0040A088, {1, 1}, VRType::SQ, false };
    const tag VerifyingObserverName = { "VerifyingObserverName", 0x0040A075, {1, 1}, VRType::PN, false };
    const tag VerifyingObserverSequence = { "VerifyingObserverSequence", 0x0040A073, {1, 1}, VRType::SQ, false };
    const tag VerifyingOrganization = { "VerifyingOrganization", 0x0040A027, {1, 1}, VRType::LO, false };
    const tag VertexPointIndexList = { "VertexPointIndexList", 0x00660025, {1, 1}, VRType::OW, false };
    const tag VerticalAlignment = { "VerticalAlignment", 0x00700243, {1, 1}, VRType::CS, false };
    const tag VerticalOffsetOfSensor = { "VerticalOffsetOfSensor", 0x00143026, {1, 1}, VRType::DS, false };
    const tag VerticalPrismBase = { "VerticalPrismBase", 0x00460036, {1, 1}, VRType::CS, false };
    const tag VerticalPrismPower = { "VerticalPrismPower", 0x00460034, {1, 1}, VRType::FD, false };
    const tag VerticesOfTheOutlineOfPupil = { "VerticesOfTheOutlineOfPupil", 0x00460208, {2, 2}, VRType::IS, false };
    const tag VerticesOfThePolygonalCollimator = { "VerticesOfThePolygonalCollimator", 0x00181720, {2, 2}, VRType::IS, false };
    const tag VerticesOfThePolygonalExposureControlSensingRegion = { "VerticesOfThePolygonalExposureControlSensingRegion", 0x00189442, {2, 2}, VRType::SS, false };
    const tag VerticesOfThePolygonalShutter = { "VerticesOfThePolygonalShutter", 0x00181620, {2, 2}, VRType::IS, false };
    const tag VerticesOfTheRegion = { "VerticesOfTheRegion", 0x00289503, {2, 2}, VRType::SS, false };
    const tag VideoImageFormatAcquired = { "VideoImageFormatAcquired", 0x00181022, {1, 1}, VRType::SH, false };
    const tag ViewCodeSequence = { "ViewCodeSequence", 0x00540220, {1, 1}, VRType::SQ, false };
    const tag ViewingDistance = { "ViewingDistance", 0x00460106, {1, 1}, VRType::FD, false };
    const tag ViewingDistanceType = { "ViewingDistanceType", 0x00460125, {1, 1}, VRType::CS, false };
    const tag ViewModifierCodeSequence = { "ViewModifierCodeSequence", 0x00540222, {1, 1}, VRType::SQ, false };
    const tag ViewName = { "ViewName", 0x00082127, {1, 1}, VRType::SH, false };
    const tag ViewNumber = { "ViewNumber", 0x00082128, {1, 1}, VRType::IS, false };
    const tag ViewOrientationCodeSequence = { "ViewOrientationCodeSequence", 0x006862E0, {1, 1}, VRType::SQ, false };
    const tag ViewOrientationModifierCodeSequence = { "ViewOrientationModifierCodeSequence", 0x006862F0, {1, 1}, VRType::SQ, false };
    const tag ViewpointLookAtPoint = { "ViewpointLookAtPoint", 0x00701604, {3, 3}, VRType::FD, false };
    const tag ViewpointPosition = { "ViewpointPosition", 0x00701603, {3, 3}, VRType::FD, false };
    const tag ViewpointUpDirection = { "ViewpointUpDirection", 0x00701605, {3, 3}, VRType::FD, false };
    const tag ViewPosition = { "ViewPosition", 0x00185101, {1, 1}, VRType::CS, false };
    const tag VirtualSourceAxisDistances = { "VirtualSourceAxisDistances", 0x300A030A, {2, 2}, VRType::FL, false };
    const tag VisitComments = { "VisitComments", 0x00384000, {1, 1}, VRType::LT, false };
    const tag VisitStatusID = { "VisitStatusID", 0x00380008, {1, 1}, VRType::CS, false };
    const tag VisualAcuityBothEyesOpenSequence = { "VisualAcuityBothEyesOpenSequence", 0x00460124, {1, 1}, VRType::SQ, false };
    const tag VisualAcuityLeftEyeSequence = { "VisualAcuityLeftEyeSequence", 0x00460123, {1, 1}, VRType::SQ, false };
    const tag VisualAcuityMeasurementSequence = { "VisualAcuityMeasurementSequence", 0x00240110, {1, 1}, VRType::SQ, false };
    const tag VisualAcuityModifiers = { "VisualAcuityModifiers", 0x00460135, {2, 2}, VRType::SS, false };
    const tag VisualAcuityRightEyeSequence = { "VisualAcuityRightEyeSequence", 0x00460122, {1, 1}, VRType::SQ, false };
    const tag VisualAcuityTypeCodeSequence = { "VisualAcuityTypeCodeSequence", 0x00460121, {1, 1}, VRType::SQ, false };
    const tag VisualEvaluationMethodCodeSequence = { "VisualEvaluationMethodCodeSequence", 0x0028702E, {1, 1}, VRType::SQ, false };
    const tag VisualEvaluationResultSequence = { "VisualEvaluationResultSequence", 0x00287015, {1, 1}, VRType::SQ, false };
    const tag VisualEvaluationTestSequence = { "VisualEvaluationTestSequence", 0x00287028, {1, 1}, VRType::SQ, false };
    const tag VisualFieldCatchTrialSequence = { "VisualFieldCatchTrialSequence", 0x00240034, {1, 1}, VRType::SQ, false };
    const tag VisualFieldGlobalResultsIndexSequence = { "VisualFieldGlobalResultsIndexSequence", 0x00240320, {1, 1}, VRType::SQ, false };
    const tag VisualFieldHorizontalExtent = { "VisualFieldHorizontalExtent", 0x00240010, {1, 1}, VRType::FL, false };
    const tag VisualFieldMeanSensitivity = { "VisualFieldMeanSensitivity", 0x00240070, {1, 1}, VRType::FL, false };
    const tag VisualFieldShape = { "VisualFieldShape", 0x00240012, {1, 1}, VRType::CS, false };
    const tag VisualFieldTestDuration = { "VisualFieldTestDuration", 0x00240088, {1, 1}, VRType::FL, false };
    const tag VisualFieldTestNormalsFlag = { "VisualFieldTestNormalsFlag", 0x00240063, {1, 1}, VRType::CS, false };
    const tag VisualFieldTestPointNormalsSequence = { "VisualFieldTestPointNormalsSequence", 0x00240097, {1, 1}, VRType::SQ, false };
    const tag VisualFieldTestPointSequence = { "VisualFieldTestPointSequence", 0x00240089, {1, 1}, VRType::SQ, false };
    const tag VisualFieldTestPointXCoordinate = { "VisualFieldTestPointXCoordinate", 0x00240090, {1, 1}, VRType::FL, false };
    const tag VisualFieldTestPointYCoordinate = { "VisualFieldTestPointYCoordinate", 0x00240091, {1, 1}, VRType::FL, false };
    const tag VisualFieldTestReliabilityGlobalIndexSequence = { "VisualFieldTestReliabilityGlobalIndexSequence", 0x00240317, {1, 1}, VRType::SQ, false };
    const tag VisualFieldVerticalExtent = { "VisualFieldVerticalExtent", 0x00240011, {1, 1}, VRType::FL, false };
    const tag VitalStainCodeSequenceTrial = { "VitalStainCodeSequenceTrial", 0x004009F8, {1, 1}, VRType::SQ, false };
    const tag VitreousStatusCodeSequence = { "VitreousStatusCodeSequence", 0x00221025, {1, 1}, VRType::SQ, false };
    const tag VitreousStatusDescription = { "VitreousStatusDescription", 0x00221066, {1, 1}, VRType::LO, false };
    const tag VOILUTFunction = { "VOILUTFunction", 0x00281056, {1, 1}, VRType::CS, false };
    const tag VOILUTSequence = { "VOILUTSequence", 0x00283010, {1, 1}, VRType::SQ, false };
    const tag VOIType = { "VOIType", 0x00720702, {1, 1}, VRType::CS, false };
    const tag VolumeBasedCalculationTechnique = { "VolumeBasedCalculationTechnique", 0x00089207, {1, 1}, VRType::CS, false };
    const tag VolumeCroppingMethod = { "VolumeCroppingMethod", 0x00701302, {1, 1}, VRType::CS, false };
    const tag VolumeCroppingSequence = { "VolumeCroppingSequence", 0x00701301, {1, 1}, VRType::SQ, false };
    const tag VolumeFrameOfReferenceUID = { "VolumeFrameOfReferenceUID", 0x00209312, {1, 1}, VRType::UI, false };
    const tag VolumeLocalizationSequence = { "VolumeLocalizationSequence", 0x00189126, {1, 1}, VRType::SQ, false };
    const tag VolumeLocalizationTechnique = { "VolumeLocalizationTechnique", 0x00189054, {1, 1}, VRType::CS, false };
    const tag VolumeOfPTO = { "VolumeOfPTO", 0x40101023, {1, 1}, VRType::FL, false };
    const tag VolumeStreamSequence = { "VolumeStreamSequence", 0x00701A08, {1, 1}, VRType::SQ, false };
    const tag VolumeToTableMappingMatrix = { "VolumeToTableMappingMatrix", 0x0020930A, {16, 16}, VRType::FD, false };
    const tag VolumeToTransducerMappingMatrix = { "VolumeToTransducerMappingMatrix", 0x00209309, {16, 16}, VRType::FD, false };
    const tag VolumeToTransducerRelationship = { "VolumeToTransducerRelationship", 0x0020930B, {1, 1}, VRType::CS, false };
    const tag VolumetricAnnotationSequence = { "VolumetricAnnotationSequence", 0x00701901, {1, 1}, VRType::SQ, false };
    const tag VolumetricCurvePoints = { "VolumetricCurvePoints", 0x0070150D, {1, 1}, VRType::OD, false };
    const tag VolumetricCurveUpDirections = { "VolumetricCurveUpDirections", 0x00701A07, {1, 1}, VRType::OD, false };
    const tag VolumetricPresentationInputAnnotationSequence = { "VolumetricPresentationInputAnnotationSequence", 0x00701905, {1, 1}, VRType::SQ, false };
    const tag VolumetricPresentationInputIndex = { "VolumetricPresentationInputIndex", 0x00701804, {1, 1}, VRType::US, false };
    const tag VolumetricPresentationInputNumber = { "VolumetricPresentationInputNumber", 0x00701207, {1, 1}, VRType::US, false };
    const tag VolumetricPresentationInputSetSequence = { "VolumetricPresentationInputSetSequence", 0x0070120A, {1, 1}, VRType::SQ, false };
    const tag VolumetricPresentationInputSetUID = { "VolumetricPresentationInputSetUID", 0x00701209, {1, 1}, VRType::UI, false };
    const tag VolumetricPresentationStateInputSequence = { "VolumetricPresentationStateInputSequence", 0x00701201, {1, 1}, VRType::SQ, false };
    const tag VolumetricProperties = { "VolumetricProperties", 0x00089206, {1, 1}, VRType::CS, false };
    const tag VValueData = { "VValueData", 0x00800011, {1, 1}, VRType::OF, false };
    const tag WADORetrievalSequence = { "WADORetrievalSequence", 0x0040E023, {1, 1}, VRType::SQ, false };
    const tag WADORSRetrievalSequence = { "WADORSRetrievalSequence", 0x0040E025, {1, 1}, VRType::SQ, false };
    const tag WarningReason = { "WarningReason", 0x00081196, {1, 1}, VRType::US, false };
    const tag WaterEquivalentDiameter = { "WaterEquivalentDiameter", 0x00181271, {1, 1}, VRType::FD, false };
    const tag WaterEquivalentDiameterCalculationMethodCodeSequence = { "WaterEquivalentDiameterCalculationMethodCodeSequence", 0x00181272, {1, 1}, VRType::SQ, false };
    const tag WaterReferenceAcquisition = { "WaterReferenceAcquisition", 0x00189297, {1, 1}, VRType::CS, false };
    const tag WaterReferencedPhaseCorrection = { "WaterReferencedPhaseCorrection", 0x00189199, {1, 1}, VRType::CS, false };
    const tag WaveformAnnotationSequence = { "WaveformAnnotationSequence", 0x0040B020, {1, 1}, VRType::SQ, false };
    const tag WaveformBitsAllocated = { "WaveformBitsAllocated", 0x54001004, {1, 1}, VRType::US, false };
    const tag WaveformBitsStored = { "WaveformBitsStored", 0x003A021A, {1, 1}, VRType::US, false };
    const tag WaveformChannelNumber = { "WaveformChannelNumber", 0x003A0202, {1, 1}, VRType::IS, false };
    const tag WaveformData = { "WaveformData", 0x54001010, {1, 1}, VRType::OB, true };
    const tag WaveformDataDisplayScale = { "WaveformDataDisplayScale", 0x003A0230, {1, 1}, VRType::FL, false };
    const tag WaveformDisplayBackgroundCIELabValue = { "WaveformDisplayBackgroundCIELabValue", 0x003A0231, {3, 3}, VRType::US, false };
    const tag WaveformOriginality = { "WaveformOriginality", 0x003A0004, {1, 1}, VRType::CS, false };
    const tag WaveformPaddingValue = { "WaveformPaddingValue", 0x5400100A, {1, 1}, VRType::OB, true };
    const tag WaveformPresentationGroupSequence = { "WaveformPresentationGroupSequence", 0x003A0240, {1, 1}, VRType::SQ, false };
    const tag WaveformSampleInterpretation = { "WaveformSampleInterpretation", 0x54001006, {1, 1}, VRType::CS, false };
    const tag WaveformSequence = { "WaveformSequence", 0x54000100, {1, 1}, VRType::SQ, false };
    const tag WedgeAngle = { "WedgeAngle", 0x300A00D5, {1, 1}, VRType::IS, false };
    const tag WedgeAngleFloat = { "WedgeAngleFloat", 0x00145107, {1, 1}, VRType::DS, false };
    const tag WedgeChamferHeight = { "WedgeChamferHeight", 0x0014511D, {1, 1}, VRType::DS, false };
    const tag WedgeCurve = { "WedgeCurve", 0x0014511E, {1, 1}, VRType::CS, false };
    const tag WedgeDescription = { "WedgeDescription", 0x00145111, {1, 1}, VRType::LO, false };
    const tag WedgeElement1Position = { "WedgeElement1Position", 0x00145109, {1, 1}, VRType::CS, false };
    const tag WedgeFactor = { "WedgeFactor", 0x300A00D6, {1, 1}, VRType::DS, false };
    const tag WedgeFrontGap = { "WedgeFrontGap", 0x00145117, {1, 1}, VRType::DS, false };
    const tag WedgeFrontHeight = { "WedgeFrontHeight", 0x00145119, {1, 1}, VRType::DS, false };
    const tag WedgeID = { "WedgeID", 0x300A00D4, {1, 1}, VRType::SH, false };
    const tag WedgeInContactLength = { "WedgeInContactLength", 0x00145116, {1, 1}, VRType::DS, false };
    const tag WedgeInContactWidth = { "WedgeInContactWidth", 0x0014511C, {1, 1}, VRType::DS, false };
    const tag WedgeManufacturerName = { "WedgeManufacturerName", 0x00145110, {1, 1}, VRType::SH, false };
    const tag WedgeMaterial = { "WedgeMaterial", 0x0014510B, {1, 1}, VRType::SH, false };
    const tag WedgeMaterialVelocity = { "WedgeMaterialVelocity", 0x0014510A, {1, 1}, VRType::DS, false };
    const tag WedgeModelNumber = { "WedgeModelNumber", 0x00145106, {1, 1}, VRType::SH, false };
    const tag WedgeName = { "WedgeName", 0x0014510F, {1, 1}, VRType::SH, false };
    const tag WedgeNumber = { "WedgeNumber", 0x300A00D2, {1, 1}, VRType::IS, false };
    const tag WedgeOffsetX = { "WedgeOffsetX", 0x00145113, {1, 1}, VRType::DS, false };
    const tag WedgeOffsetY = { "WedgeOffsetY", 0x00145114, {1, 1}, VRType::DS, false };
    const tag WedgeOffsetZ = { "WedgeOffsetZ", 0x0014510C, {1, 1}, VRType::DS, false };
    const tag WedgeOrientation = { "WedgeOrientation", 0x300A00D8, {1, 1}, VRType::DS, false };
    const tag WedgeOriginOffsetX = { "WedgeOriginOffsetX", 0x0014510D, {1, 1}, VRType::DS, false };
    const tag WedgePosition = { "WedgePosition", 0x300A0118, {1, 1}, VRType::CS, false };
    const tag WedgePositionSequence = { "WedgePositionSequence", 0x300A0116, {1, 1}, VRType::SQ, false };
    const tag WedgeRearHeight = { "WedgeRearHeight", 0x0014511A, {1, 1}, VRType::DS, false };
    const tag WedgeRoofAngle = { "WedgeRoofAngle", 0x00145108, {1, 1}, VRType::DS, false };
    const tag WedgeSequence = { "WedgeSequence", 0x300A00D1, {1, 1}, VRType::SQ, false };
    const tag WedgeThinEdgePosition = { "WedgeThinEdgePosition", 0x300A00DB, {1, 1}, VRType::FL, false };
    const tag WedgeTimeDelay = { "WedgeTimeDelay", 0x0014510E, {1, 1}, VRType::DS, false };
    const tag WedgeTotalHeight = { "WedgeTotalHeight", 0x00145118, {1, 1}, VRType::DS, false };
    const tag WedgeTotalLength = { "WedgeTotalLength", 0x00145115, {1, 1}, VRType::DS, false };
    const tag WedgeTotalWidth = { "WedgeTotalWidth", 0x0014511B, {1, 1}, VRType::DS, false };
    const tag WedgeType = { "WedgeType", 0x300A00D3, {1, 1}, VRType::CS, false };
    const tag WeightingLookupTableData = { "WeightingLookupTableData", 0x00701808, {1, 1}, VRType::OB, false };
    const tag WeightingLookupTableDescriptor = { "WeightingLookupTableDescriptor", 0x00701807, {3, 3}, VRType::US, false };
    const tag WeightingTransferFunctionSequence = { "WeightingTransferFunctionSequence", 0x00701806, {1, 1}, VRType::SQ, false };
    const tag WhitePointFlag = { "WhitePointFlag", 0x00287021, {1, 1}, VRType::CS, false };
    const tag WholeBodyTechnique = { "WholeBodyTechnique", 0x00181301, {1, 1}, VRType::CS, false };
    const tag WholeSlideMicroscopyImageFrameTypeSequence = { "WholeSlideMicroscopyImageFrameTypeSequence", 0x00400710, {1, 1}, VRType::SQ, false };
    const tag WideFieldOphthalmicPhotographyQualityRatingSequence = { "WideFieldOphthalmicPhotographyQualityRatingSequence", 0x00221525, {1, 1}, VRType::SQ, false };
    const tag WideFieldOphthalmicPhotographyQualityThresholdSequence = { "WideFieldOphthalmicPhotographyQualityThresholdSequence", 0x00221526, {1, 1}, VRType::SQ, false };
    const tag WideFieldOphthalmicPhotographyThresholdQualityRating = { "WideFieldOphthalmicPhotographyThresholdQualityRating", 0x00221527, {1, 1}, VRType::FL, false };
    const tag WindowCenter = { "WindowCenter", 0x00281050, {1, 1}, VRType::DS, false };
    const tag WindowCenterWidthExplanation = { "WindowCenterWidthExplanation", 0x00281055, {1, 1}, VRType::LO, false };
    const tag WindowWidth = { "WindowWidth", 0x00281051, {1, 1}, VRType::DS, false };
    const tag WorklistLabel = { "WorklistLabel", 0x00741202, {1, 1}, VRType::LO, false };
    const tag XAXRFFrameCharacteristicsSequence = { "XAXRFFrameCharacteristicsSequence", 0x00189412, {1, 1}, VRType::SQ, false };
    const tag XCoordinatesCenterPixelViewAngle = { "XCoordinatesCenterPixelViewAngle", 0x00221528, {1, 1}, VRType::FL, false };
    const tag XDSRetrievalSequence = { "XDSRetrievalSequence", 0x0040E024, {1, 1}, VRType::SQ, false };
    const tag XDSStorageSequence = { "XDSStorageSequence", 0x00404074, {1, 1}, VRType::SQ, false };
    const tag XFocusCenter = { "XFocusCenter", 0x00181183, {1, 2}, VRType::DS, false };
    const tag XOffsetInSlideCoordinateSystem = { "XOffsetInSlideCoordinateSystem", 0x0040072A, {1, 1}, VRType::DS, false };
    const tag XRay3DAcquisitionSequence = { "XRay3DAcquisitionSequence", 0x00189507, {1, 1}, VRType::SQ, false };
    const tag XRay3DFrameTypeSequence = { "XRay3DFrameTypeSequence", 0x00189504, {1, 1}, VRType::SQ, false };
    const tag XRay3DReconstructionSequence = { "XRay3DReconstructionSequence", 0x00189530, {1, 1}, VRType::SQ, false };
    const tag XRayAcquisitionDoseSequence = { "XRayAcquisitionDoseSequence", 0x00189542, {1, 1}, VRType::SQ, false };
    const tag XRayFilterSequence = { "XRayFilterSequence", 0x00189556, {1, 1}, VRType::SQ, false };
    const tag XRayGeometrySequence = { "XRayGeometrySequence", 0x00189476, {1, 1}, VRType::SQ, false };
    const tag XRayGridSequence = { "XRayGridSequence", 0x00189555, {1, 1}, VRType::SQ, false };
    const tag XRayImageReceptorAngle = { "XRayImageReceptorAngle", 0x3002000E, {1, 1}, VRType::DS, false };
    const tag XRayImageReceptorTranslation = { "XRayImageReceptorTranslation", 0x3002000D, {3, 3}, VRType::DS, false };
    const tag XRayOutput = { "XRayOutput", 0x00400312, {1, 1}, VRType::DS, false };
    const tag XRayReceptorType = { "XRayReceptorType", 0x00189420, {1, 1}, VRType::CS, false };
    const tag XRaySourceIsocenterPrimaryAngle = { "XRaySourceIsocenterPrimaryAngle", 0x00189543, {1, 1}, VRType::FD, false };
    const tag XRaySourceIsocenterSecondaryAngle = { "XRaySourceIsocenterSecondaryAngle", 0x00189544, {1, 1}, VRType::FD, false };
    const tag XRayTubeCurrent = { "XRayTubeCurrent", 0x00181151, {1, 1}, VRType::IS, false };
    const tag XRayTubeCurrentInmA = { "XRayTubeCurrentInmA", 0x00189330, {1, 1}, VRType::FD, false };
    const tag XRayTubeCurrentInuA = { "XRayTubeCurrentInuA", 0x00188151, {1, 1}, VRType::DS, false };
    const tag YCoordinatesCenterPixelViewAngle = { "YCoordinatesCenterPixelViewAngle", 0x00221529, {1, 1}, VRType::FL, false };
    const tag YFocusCenter = { "YFocusCenter", 0x00181184, {1, 2}, VRType::DS, false };
    const tag YOffsetInSlideCoordinateSystem = { "YOffsetInSlideCoordinateSystem", 0x0040073A, {1, 1}, VRType::DS, false };
    const tag ZEffective = { "ZEffective", 0x40101019, {1, 1}, VRType::FL, false };
    const tag ZeroVelocityPixelValue = { "ZeroVelocityPixelValue", 0x00189810, {1, 1}, VRType::US, true };
    const tag ZOffsetInSlideCoordinateSystem = { "ZOffsetInSlideCoordinateSystem", 0x0040074A, {1, 1}, VRType::DS, false };
    const range_tag ZonalMap = { "ZonalMap", 0x10100000, 0x1010FFFF, 0x00000001, {1, 1}, VRType::US, false };
    const tag ZonalMapFormat = { "ZonalMapFormat", 0x00280722, {1, 1}, VRType::US, false };
    const tag ZonalMapLocation = { "ZonalMapLocation", 0x00280721, {1, 1}, VRType::AT, false };
    const tag ZonalMapNumberFormat = { "ZonalMapNumberFormat", 0x00280720, {1, 1}, VRType::US, false };
    const tag ZoomCenter = { "ZoomCenter", 0x00280032, {2, 2}, VRType::DS, false };
    const tag ZoomFactor = { "ZoomFactor", 0x00280031, {2, 2}, VRType::DS, false };
    void populate_data_dictionary(const DataDictionaryPtr& data_dictionary) {
        data_dictionary->Add(&tags::AbortFlag);
        data_dictionary->Add(&tags::AbortReason);
        data_dictionary->Add(&tags::AbsoluteChannelDisplayScale);
        data_dictionary->Add(&tags::AbstractPriorCodeSequence);
        data_dictionary->Add(&tags::AbstractPriorValue);
        data_dictionary->Add(&tags::AccessionNumber);
        data_dictionary->Add(&tags::AccessoryCode);
        data_dictionary->Add(&tags::AcquiredImageAreaDoseProduct);
        data_dictionary->Add(&tags::AcquiredSoundpathLength);
        data_dictionary->Add(&tags::AcquisitionComments);
        data_dictionary->Add(&tags::AcquisitionCompressionType);
        data_dictionary->Add(&tags::AcquisitionContextDescription);
        data_dictionary->Add(&tags::AcquisitionContextSequence);
        data_dictionary->Add(&tags::AcquisitionContrast);
        data_dictionary->Add(&tags::AcquisitionDate);
        data_dictionary->Add(&tags::AcquisitionDateTime);
        data_dictionary->Add(&tags::AcquisitionDeviceProcessingCode);
        data_dictionary->Add(&tags::AcquisitionDeviceProcessingDescription);
        data_dictionary->Add(&tags::AcquisitionDeviceTypeCodeSequence);
        data_dictionary->Add(&tags::AcquisitionDuration);
        data_dictionary->Add(&tags::AcquisitionEndLocationSequence);
        data_dictionary->Add(&tags::AcquisitionIndex);
        data_dictionary->Add(&tags::AcquisitionMatrix);
        data_dictionary->Add(&tags::AcquisitionMethodAlgorithmSequence);
        data_dictionary->Add(&tags::AcquisitionMethodCodeSequence);
        data_dictionary->Add(&tags::AcquisitionMotion);
        data_dictionary->Add(&tags::AcquisitionNumber);
        data_dictionary->Add(&tags::AcquisitionProtocolDescription);
        data_dictionary->Add(&tags::AcquisitionProtocolElementSequence);
        data_dictionary->Add(&tags::AcquisitionProtocolElementSpecificationSequence);
        data_dictionary->Add(&tags::AcquisitionProtocolName);
        data_dictionary->Add(&tags::AcquisitionSampleSize);
        data_dictionary->Add(&tags::AcquisitionsInSeries);
        data_dictionary->Add(&tags::AcquisitionsInStudy);
        data_dictionary->Add(&tags::AcquisitionStartCondition);
        data_dictionary->Add(&tags::AcquisitionStartConditionData);
        data_dictionary->Add(&tags::AcquisitionStartLocationSequence);
        data_dictionary->Add(&tags::AcquisitionStatus);
        data_dictionary->Add(&tags::AcquisitionTerminationCondition);
        data_dictionary->Add(&tags::AcquisitionTerminationConditionData);
        data_dictionary->Add(&tags::AcquisitionTime);
        data_dictionary->Add(&tags::AcquisitionTimeSynchronized);
        data_dictionary->Add(&tags::AcquisitionType);
        data_dictionary->Add(&tags::AcrossScanSpatialResolution);
        data_dictionary->Add(&tags::ActiveAperture);
        data_dictionary->Add(&tags::ActiveSourceDiameter);
        data_dictionary->Add(&tags::ActiveSourceLength);
        data_dictionary->Add(&tags::ActualCardiacTriggerDelayTime);
        data_dictionary->Add(&tags::ActualCardiacTriggerTimePriorToRPeak);
        data_dictionary->Add(&tags::ActualEnvironmentalConditions);
        data_dictionary->Add(&tags::ActualFrameDuration);
        data_dictionary->Add(&tags::ActualHumanPerformersSequence);
        data_dictionary->Add(&tags::ActualRespiratoryTriggerDelayTime);
        data_dictionary->Add(&tags::AdaptiveMapFormat);
        data_dictionary->Add(&tags::AddIntermediateSequence);
        data_dictionary->Add(&tags::AdditionalDrugSequence);
        data_dictionary->Add(&tags::AdditionalInspectionMethodSequence);
        data_dictionary->Add(&tags::AdditionalInspectionSelectionCriteria);
        data_dictionary->Add(&tags::AdditionalPatientHistory);
        data_dictionary->Add(&tags::AdditionalRTROIIdentificationCodeSequence);
        data_dictionary->Add(&tags::AdditionalScreeningPerformed);
        data_dictionary->Add(&tags::AddNearSequence);
        data_dictionary->Add(&tags::AddOtherSequence);
        data_dictionary->Add(&tags::AddPower);
        data_dictionary->Add(&tags::AddressTrial);
        data_dictionary->Add(&tags::AdministrationRouteCodeSequence);
        data_dictionary->Add(&tags::AdmissionID);
        data_dictionary->Add(&tags::AdmittingDate);
        data_dictionary->Add(&tags::AdmittingDiagnosesCodeSequence);
        data_dictionary->Add(&tags::AdmittingDiagnosesDescription);
        data_dictionary->Add(&tags::AdmittingTime);
        data_dictionary->Add(&tags::AdvancedBlendingSequence);
        data_dictionary->Add(&tags::AfterloaderChannelID);
        data_dictionary->Add(&tags::AgeCorrectedSensitivityDeviationAlgorithmSequence);
        data_dictionary->Add(&tags::AgeCorrectedSensitivityDeviationProbabilityValue);
        data_dictionary->Add(&tags::AgeCorrectedSensitivityDeviationValue);
        data_dictionary->Add(&tags::AirCounts);
        data_dictionary->Add(&tags::AITDeviceType);
        data_dictionary->Add(&tags::AlarmDecision);
        data_dictionary->Add(&tags::AlarmDecisionTime);
        data_dictionary->Add(&tags::AlgorithmCodeSequenceTrial);
        data_dictionary->Add(&tags::AlgorithmDescription);
        data_dictionary->Add(&tags::AlgorithmDescriptionTrial);
        data_dictionary->Add(&tags::AlgorithmFamilyCodeSequence);
        data_dictionary->Add(&tags::AlgorithmName);
        data_dictionary->Add(&tags::AlgorithmNameCodeSequence);
        data_dictionary->Add(&tags::AlgorithmParameters);
        data_dictionary->Add(&tags::AlgorithmRoutingCodeSequence);
        data_dictionary->Add(&tags::AlgorithmSource);
        data_dictionary->Add(&tags::AlgorithmType);
        data_dictionary->Add(&tags::AlgorithmVersion);
        data_dictionary->Add(&tags::AliasedDataType);
        data_dictionary->Add(&tags::ALinePixelSpacing);
        data_dictionary->Add(&tags::ALineRate);
        data_dictionary->Add(&tags::ALinesPerFrame);
        data_dictionary->Add(&tags::Allergies);
        data_dictionary->Add(&tags::AllowLossyCompression);
        data_dictionary->Add(&tags::AllowMediaSplitting);
        data_dictionary->Add(&tags::AlongScanSpatialResolution);
        data_dictionary->Add(&tags::AlphaLUTTransferFunction);
        data_dictionary->Add(&tags::AlphaPaletteColorLookupTableData);
        data_dictionary->Add(&tags::AlphaPaletteColorLookupTableDescriptor);
        data_dictionary->Add(&tags::AlternateBeamDose);
        data_dictionary->Add(&tags::AlternateBeamDoseType);
        data_dictionary->Add(&tags::AlternateContainerIdentifierSequence);
        data_dictionary->Add(&tags::AlternateContentDescriptionSequence);
        data_dictionary->Add(&tags::AlternateRepresentationSequence);
        data_dictionary->Add(&tags::AmbientLightValueSource);
        data_dictionary->Add(&tags::AmbientReflectionIntensity);
        data_dictionary->Add(&tags::AmplifierType);
        data_dictionary->Add(&tags::AnalyzedArea);
        data_dictionary->Add(&tags::AnatomicalOrientationType);
        data_dictionary->Add(&tags::AnatomicApproachDirectionCodeSequenceTrial);
        data_dictionary->Add(&tags::AnatomicLocationOfExaminingInstrumentCodeSequenceTrial);
        data_dictionary->Add(&tags::AnatomicLocationOfExaminingInstrumentDescriptionTrial);
        data_dictionary->Add(&tags::AnatomicPerspectiveCodeSequenceTrial);
        data_dictionary->Add(&tags::AnatomicPerspectiveDescriptionTrial);
        data_dictionary->Add(&tags::AnatomicPortalOfEntranceCodeSequenceTrial);
        data_dictionary->Add(&tags::AnatomicRegionModifierSequence);
        data_dictionary->Add(&tags::AnatomicRegionSequence);
        data_dictionary->Add(&tags::AnatomicRegionsInStudyCodeSequence);
        data_dictionary->Add(&tags::AnatomicStructure);
        data_dictionary->Add(&tags::AnatomicStructureReferencePoint);
        data_dictionary->Add(&tags::AnatomicStructureSpaceOrRegionCodeSequenceTrial);
        data_dictionary->Add(&tags::AnatomicStructureSpaceOrRegionModifierCodeSequenceTrial);
        data_dictionary->Add(&tags::AnatomicStructureSpaceOrRegionSequence);
        data_dictionary->Add(&tags::AnchorPoint);
        data_dictionary->Add(&tags::AnchorPointAnnotationUnits);
        data_dictionary->Add(&tags::AnchorPointVisibility);
        data_dictionary->Add(&tags::AngioFlag);
        data_dictionary->Add(&tags::AngleNumber);
        data_dictionary->Add(&tags::AngularPosition);
        data_dictionary->Add(&tags::AngularStep);
        data_dictionary->Add(&tags::AngularViewVector);
        data_dictionary->Add(&tags::AnimationCurveSequence);
        data_dictionary->Add(&tags::AnimationStepSize);
        data_dictionary->Add(&tags::AnnotationClipping);
        data_dictionary->Add(&tags::AnnotationContentSequence);
        data_dictionary->Add(&tags::AnnotationDisplayFormatID);
        data_dictionary->Add(&tags::AnnotationFlag);
        data_dictionary->Add(&tags::AnnotationGroupNumber);
        data_dictionary->Add(&tags::AnnotationPosition);
        data_dictionary->Add(&tags::AnodeTargetMaterial);
        data_dictionary->Add(&tags::AnomalyLocatorIndicator);
        data_dictionary->Add(&tags::AnomalyLocatorIndicatorSequence);
        data_dictionary->Add(&tags::AnteriorChamberDepth);
        data_dictionary->Add(&tags::AnteriorChamberDepthDefinitionCodeSequence);
        data_dictionary->Add(&tags::AnteriorChamberDepthSequence);
        data_dictionary->Add(&tags::ApertureElevation);
        data_dictionary->Add(&tags::ApexPosition);
        data_dictionary->Add(&tags::ApplicableFrameRange);
        data_dictionary->Add(&tags::ApplicableSafetyStandardAgency);
        data_dictionary->Add(&tags::ApplicableSafetyStandardDescription);
        data_dictionary->Add(&tags::ApplicationManufacturer);
        data_dictionary->Add(&tags::ApplicationMaximumRepaintTime);
        data_dictionary->Add(&tags::ApplicationName);
        data_dictionary->Add(&tags::ApplicationSetupCheck);
        data_dictionary->Add(&tags::ApplicationSetupManufacturer);
        data_dictionary->Add(&tags::ApplicationSetupName);
        data_dictionary->Add(&tags::ApplicationSetupNumber);
        data_dictionary->Add(&tags::ApplicationSetupSequence);
        data_dictionary->Add(&tags::ApplicationSetupType);
        data_dictionary->Add(&tags::ApplicationVersion);
        data_dictionary->Add(&tags::ApplicatorApertureShape);
        data_dictionary->Add(&tags::ApplicatorDescription);
        data_dictionary->Add(&tags::ApplicatorGeometrySequence);
        data_dictionary->Add(&tags::ApplicatorID);
        data_dictionary->Add(&tags::ApplicatorOpening);
        data_dictionary->Add(&tags::ApplicatorOpeningX);
        data_dictionary->Add(&tags::ApplicatorOpeningY);
        data_dictionary->Add(&tags::ApplicatorSequence);
        data_dictionary->Add(&tags::ApplicatorType);
        data_dictionary->Add(&tags::ApprovalSequence);
        data_dictionary->Add(&tags::ApprovalStatus);
        data_dictionary->Add(&tags::ApprovalStatusDateTime);
        data_dictionary->Add(&tags::ApprovalStatusFurtherDescription);
        data_dictionary->Add(&tags::ApprovalSubjectSequence);
        data_dictionary->Add(&tags::Arbitrary);
        data_dictionary->Add(&tags::ArchiveRequested);
        data_dictionary->Add(&tags::ArterialSpinLabelingContrast);
        data_dictionary->Add(&tags::AscanRate);
        data_dictionary->Add(&tags::ASLBolusCutoffDelayTime);
        data_dictionary->Add(&tags::ASLBolusCutoffFlag);
        data_dictionary->Add(&tags::ASLBolusCutoffTechnique);
        data_dictionary->Add(&tags::ASLBolusCutoffTimingSequence);
        data_dictionary->Add(&tags::ASLContext);
        data_dictionary->Add(&tags::ASLCrusherDescription);
        data_dictionary->Add(&tags::ASLCrusherFlag);
        data_dictionary->Add(&tags::ASLCrusherFlowLimit);
        data_dictionary->Add(&tags::ASLMidSlabPosition);
        data_dictionary->Add(&tags::ASLPulseTrainDuration);
        data_dictionary->Add(&tags::ASLSlabNumber);
        data_dictionary->Add(&tags::ASLSlabOrientation);
        data_dictionary->Add(&tags::ASLSlabSequence);
        data_dictionary->Add(&tags::ASLSlabThickness);
        data_dictionary->Add(&tags::ASLTechniqueDescription);
        data_dictionary->Add(&tags::AsserterIdentificationSequence);
        data_dictionary->Add(&tags::AssertionCodeSequence);
        data_dictionary->Add(&tags::AssertionComments);
        data_dictionary->Add(&tags::AssertionDateTime);
        data_dictionary->Add(&tags::AssertionExpirationDateTime);
        data_dictionary->Add(&tags::AssertionUID);
        data_dictionary->Add(&tags::AssessedAttributeValueSequence);
        data_dictionary->Add(&tags::AssessedSOPInstanceSequence);
        data_dictionary->Add(&tags::AssessmentLabel);
        data_dictionary->Add(&tags::AssessmentObservationsSequence);
        data_dictionary->Add(&tags::AssessmentRequesterSequence);
        data_dictionary->Add(&tags::AssessmentSetID);
        data_dictionary->Add(&tags::AssessmentSummary);
        data_dictionary->Add(&tags::AssessmentSummaryDescription);
        data_dictionary->Add(&tags::AssessmentTypeCodeSequence);
        data_dictionary->Add(&tags::AssignedLocation);
        data_dictionary->Add(&tags::AssigningAgencyOrDepartmentCodeSequence);
        data_dictionary->Add(&tags::AssigningFacilitySequence);
        data_dictionary->Add(&tags::AssigningJurisdictionCodeSequence);
        data_dictionary->Add(&tags::ATDAbilityAssessment);
        data_dictionary->Add(&tags::ATDAssessmentFlag);
        data_dictionary->Add(&tags::ATDAssessmentProbability);
        data_dictionary->Add(&tags::ATDAssessmentSequence);
        data_dictionary->Add(&tags::AttachedContours);
        data_dictionary->Add(&tags::AttenuationCorrected);
        data_dictionary->Add(&tags::AttenuationCorrectionMethod);
        data_dictionary->Add(&tags::AttenuationCorrectionSource);
        data_dictionary->Add(&tags::AttenuationCorrectionTemporalRelationship);
        data_dictionary->Add(&tags::AttributeItemSelector);
        data_dictionary->Add(&tags::AttributeModificationDateTime);
        data_dictionary->Add(&tags::AttributeOccurrencePointer);
        data_dictionary->Add(&tags::AttributeOccurrencePrivateCreator);
        data_dictionary->Add(&tags::AttributeOccurrenceSequence);
        data_dictionary->Add(&tags::AudioComments);
        data_dictionary->Add(&tags::AudioSampleData);
        data_dictionary->Add(&tags::AudioSampleFormat);
        data_dictionary->Add(&tags::AudioType);
        data_dictionary->Add(&tags::AuthorizationEquipmentCertificationNumber);
        data_dictionary->Add(&tags::AuthorObserverSequence);
        data_dictionary->Add(&tags::AutoKVPLowerBound);
        data_dictionary->Add(&tags::AutoKVPSelectionType);
        data_dictionary->Add(&tags::AutoKVPUpperBound);
        data_dictionary->Add(&tags::AutorefractionLeftEyeSequence);
        data_dictionary->Add(&tags::AutorefractionRightEyeSequence);
        data_dictionary->Add(&tags::AutosequenceFlag);
        data_dictionary->Add(&tags::AverageBeamDosePointDepth);
        data_dictionary->Add(&tags::AverageBeamDosePointEquivalentDepth);
        data_dictionary->Add(&tags::AverageBeamDosePointSourceToExternalContourDistance);
        data_dictionary->Add(&tags::AverageBeamDosePointSSD);
        data_dictionary->Add(&tags::AverageCornealPower);
        data_dictionary->Add(&tags::AveragePulseWidth);
        data_dictionary->Add(&tags::AxialAcceptance);
        data_dictionary->Add(&tags::AxialDetectorDimension);
        data_dictionary->Add(&tags::AxialLengthOfTheEye);
        data_dictionary->Add(&tags::AxialMash);
        data_dictionary->Add(&tags::AxialPower);
        data_dictionary->Add(&tags::AxialResolution);
        data_dictionary->Add(&tags::AxisLabels);
        data_dictionary->Add(&tags::AxisOfRotation);
        data_dictionary->Add(&tags::AxisUnits);
        data_dictionary->Add(&tags::B1rms);
        data_dictionary->Add(&tags::BackgroundColor);
        data_dictionary->Add(&tags::BackgroundIlluminationColorCodeSequence);
        data_dictionary->Add(&tags::BackgroundLuminance);
        data_dictionary->Add(&tags::BadPixelImage);
        data_dictionary->Add(&tags::BarcodeSymbology);
        data_dictionary->Add(&tags::BarcodeValue);
        data_dictionary->Add(&tags::BaselineCorrection);
        data_dictionary->Add(&tags::BasicColorImageSequence);
        data_dictionary->Add(&tags::BasicGrayscaleImageSequence);
        data_dictionary->Add(&tags::BasisMaterialsCodeSequence);
        data_dictionary->Add(&tags::BeamAngle);
        data_dictionary->Add(&tags::BeamCurrentModulationID);
        data_dictionary->Add(&tags::BeamDeliveryDurationLimit);
        data_dictionary->Add(&tags::BeamDescription);
        data_dictionary->Add(&tags::BeamDose);
        data_dictionary->Add(&tags::BeamDoseMeaning);
        data_dictionary->Add(&tags::BeamDosePointDepth);
        data_dictionary->Add(&tags::BeamDosePointEquivalentDepth);
        data_dictionary->Add(&tags::BeamDosePointSSD);
        data_dictionary->Add(&tags::BeamDoseSpecificationPoint);
        data_dictionary->Add(&tags::BeamDoseType);
        data_dictionary->Add(&tags::BeamDoseVerificationControlPointSequence);
        data_dictionary->Add(&tags::BeamLimitingDeviceAngle);
        data_dictionary->Add(&tags::BeamLimitingDeviceAngleTolerance);
        data_dictionary->Add(&tags::BeamLimitingDeviceLeafPairsSequence);
        data_dictionary->Add(&tags::BeamLimitingDevicePositionSequence);
        data_dictionary->Add(&tags::BeamLimitingDevicePositionTolerance);
        data_dictionary->Add(&tags::BeamLimitingDeviceRotationDirection);
        data_dictionary->Add(&tags::BeamLimitingDeviceSequence);
        data_dictionary->Add(&tags::BeamLimitingDeviceToleranceSequence);
        data_dictionary->Add(&tags::BeamMeterset);
        data_dictionary->Add(&tags::BeamName);
        data_dictionary->Add(&tags::BeamNumber);
        data_dictionary->Add(&tags::BeamOrderIndex);
        data_dictionary->Add(&tags::BeamOrderIndexTrial);
        data_dictionary->Add(&tags::BeamSequence);
        data_dictionary->Add(&tags::BeamSpotSize);
        data_dictionary->Add(&tags::BeamStopperPosition);
        data_dictionary->Add(&tags::BeamTaskSequence);
        data_dictionary->Add(&tags::BeamTaskType);
        data_dictionary->Add(&tags::BeamType);
        data_dictionary->Add(&tags::BeatRejectionFlag);
        data_dictionary->Add(&tags::BeltHeight);
        data_dictionary->Add(&tags::BibliographicCitationTrial);
        data_dictionary->Add(&tags::BillingItemSequence);
        data_dictionary->Add(&tags::BillingProcedureStepSequence);
        data_dictionary->Add(&tags::BillingSuppliesAndDevicesSequence);
        data_dictionary->Add(&tags::BiopsyTargetSequence);
        data_dictionary->Add(&tags::BiPlaneAcquisitionSequence);
        data_dictionary->Add(&tags::BitsAllocated);
        data_dictionary->Add(&tags::BitsForCodeWord);
        data_dictionary->Add(&tags::BitsGrouped);
        data_dictionary->Add(&tags::BitsMappedToColorLookupTable);
        data_dictionary->Add(&tags::BitsStored);
        data_dictionary->Add(&tags::BlendingDisplayInputSequence);
        data_dictionary->Add(&tags::BlendingDisplaySequence);
        data_dictionary->Add(&tags::BlendingInputNumber);
        data_dictionary->Add(&tags::BlendingLookupTableData);
        data_dictionary->Add(&tags::BlendingLookupTableDescriptor);
        data_dictionary->Add(&tags::BlendingLUT1Sequence);
        data_dictionary->Add(&tags::BlendingLUT1TransferFunction);
        data_dictionary->Add(&tags::BlendingLUT2Sequence);
        data_dictionary->Add(&tags::BlendingLUT2TransferFunction);
        data_dictionary->Add(&tags::BlendingMode);
        data_dictionary->Add(&tags::BlendingOperationType);
        data_dictionary->Add(&tags::BlendingPosition);
        data_dictionary->Add(&tags::BlendingSequence);
        data_dictionary->Add(&tags::BlendingWeightConstant);
        data_dictionary->Add(&tags::BlindSpotLocalized);
        data_dictionary->Add(&tags::BlindSpotXCoordinate);
        data_dictionary->Add(&tags::BlindSpotYCoordinate);
        data_dictionary->Add(&tags::BlockColumns);
        data_dictionary->Add(&tags::BlockData);
        data_dictionary->Add(&tags::BlockDivergence);
        data_dictionary->Add(&tags::BlockedPixels);
        data_dictionary->Add(&tags::BlockIdentifyingInformationStatus);
        data_dictionary->Add(&tags::BlockMountingPosition);
        data_dictionary->Add(&tags::BlockName);
        data_dictionary->Add(&tags::BlockNumber);
        data_dictionary->Add(&tags::BlockNumberOfPoints);
        data_dictionary->Add(&tags::BlockRows);
        data_dictionary->Add(&tags::BlockSequence);
        data_dictionary->Add(&tags::BlockSlabNumber);
        data_dictionary->Add(&tags::BlockSlabSequence);
        data_dictionary->Add(&tags::BlockSlabThickness);
        data_dictionary->Add(&tags::BlockThickness);
        data_dictionary->Add(&tags::BlockTransmission);
        data_dictionary->Add(&tags::BlockTrayID);
        data_dictionary->Add(&tags::BlockType);
        data_dictionary->Add(&tags::BloodSignalNulling);
        data_dictionary->Add(&tags::BluePaletteColorLookupTableData);
        data_dictionary->Add(&tags::BluePaletteColorLookupTableDescriptor);
        data_dictionary->Add(&tags::BoardingPassID);
        data_dictionary->Add(&tags::BodyPartExamined);
        data_dictionary->Add(&tags::BodyPartThickness);
        data_dictionary->Add(&tags::Bold);
        data_dictionary->Add(&tags::BolusDescription);
        data_dictionary->Add(&tags::BolusID);
        data_dictionary->Add(&tags::BoneThermalIndex);
        data_dictionary->Add(&tags::BorderDensity);
        data_dictionary->Add(&tags::BottomRightHandCornerOfLocalizerArea);
        data_dictionary->Add(&tags::BoundingBoxAnnotationUnits);
        data_dictionary->Add(&tags::BoundingBoxBottomRightHandCorner);
        data_dictionary->Add(&tags::BoundingBoxCrop);
        data_dictionary->Add(&tags::BoundingBoxTextHorizontalJustification);
        data_dictionary->Add(&tags::BoundingBoxTopLeftHandCorner);
        data_dictionary->Add(&tags::BoundingPolygon);
        data_dictionary->Add(&tags::BoundingRectangle);
        data_dictionary->Add(&tags::BrachyAccessoryDeviceID);
        data_dictionary->Add(&tags::BrachyAccessoryDeviceName);
        data_dictionary->Add(&tags::BrachyAccessoryDeviceNominalThickness);
        data_dictionary->Add(&tags::BrachyAccessoryDeviceNominalTransmission);
        data_dictionary->Add(&tags::BrachyAccessoryDeviceNumber);
        data_dictionary->Add(&tags::BrachyAccessoryDeviceSequence);
        data_dictionary->Add(&tags::BrachyAccessoryDeviceType);
        data_dictionary->Add(&tags::BrachyApplicationSetupDose);
        data_dictionary->Add(&tags::BrachyApplicationSetupDoseSpecificationPoint);
        data_dictionary->Add(&tags::BrachyControlPointDeliveredSequence);
        data_dictionary->Add(&tags::BrachyControlPointSequence);
        data_dictionary->Add(&tags::BrachyPulseControlPointDeliveredSequence);
        data_dictionary->Add(&tags::BrachyReferencedDoseReferenceSequence);
        data_dictionary->Add(&tags::BrachyTaskSequence);
        data_dictionary->Add(&tags::BrachyTreatmentTechnique);
        data_dictionary->Add(&tags::BrachyTreatmentType);
        data_dictionary->Add(&tags::BranchOfService);
        data_dictionary->Add(&tags::BreastImplantPresent);
        data_dictionary->Add(&tags::BreastSupportIsocenterPrimaryAngle);
        data_dictionary->Add(&tags::BreastSupportIsocenterSecondaryAngle);
        data_dictionary->Add(&tags::BreastSupportXPositionToIsocenter);
        data_dictionary->Add(&tags::BreastSupportYPositionToIsocenter);
        data_dictionary->Add(&tags::BreastSupportZPositionToIsocenter);
        data_dictionary->Add(&tags::BreedRegistrationNumber);
        data_dictionary->Add(&tags::BreedRegistrationSequence);
        data_dictionary->Add(&tags::BreedRegistryCodeSequence);
        data_dictionary->Add(&tags::BridgeResistors);
        data_dictionary->Add(&tags::BscanCycleTime);
        data_dictionary->Add(&tags::BscanCycleTimeVector);
        data_dictionary->Add(&tags::BscanRate);
        data_dictionary->Add(&tags::BscanSlabThickness);
        data_dictionary->Add(&tags::BulkMotionCompensationTechnique);
        data_dictionary->Add(&tags::BulkMotionSignalSource);
        data_dictionary->Add(&tags::BulkMotionStatus);
        data_dictionary->Add(&tags::BurnedInAnnotation);
        data_dictionary->Add(&tags::CADFileFormat);
        data_dictionary->Add(&tags::CalciumScoringMassFactorDevice);
        data_dictionary->Add(&tags::CalciumScoringMassFactorPatient);
        data_dictionary->Add(&tags::CalculatedAnatomyThickness);
        data_dictionary->Add(&tags::CalculatedDoseReferenceDescription);
        data_dictionary->Add(&tags::CalculatedDoseReferenceDoseValue);
        data_dictionary->Add(&tags::CalculatedDoseReferenceNumber);
        data_dictionary->Add(&tags::CalculatedDoseReferenceSequence);
        data_dictionary->Add(&tags::CalculatedFrameList);
        data_dictionary->Add(&tags::CalculatedTargetPosition);
        data_dictionary->Add(&tags::CalibrationDataSequence);
        data_dictionary->Add(&tags::CalibrationDate);
        data_dictionary->Add(&tags::CalibrationImage);
        data_dictionary->Add(&tags::CalibrationNotes);
        data_dictionary->Add(&tags::CalibrationProcedure);
        data_dictionary->Add(&tags::CalibrationSequence);
        data_dictionary->Add(&tags::CalibrationSettingsSequence);
        data_dictionary->Add(&tags::CalibrationTime);
        data_dictionary->Add(&tags::CameraAngleOfView);
        data_dictionary->Add(&tags::CardiacBeatRejectionTechnique);
        data_dictionary->Add(&tags::CardiacCyclePosition);
        data_dictionary->Add(&tags::CardiacFramingType);
        data_dictionary->Add(&tags::CardiacNumberOfImages);
        data_dictionary->Add(&tags::CardiacRRIntervalSpecified);
        data_dictionary->Add(&tags::CardiacSignalSource);
        data_dictionary->Add(&tags::CardiacSynchronizationSequence);
        data_dictionary->Add(&tags::CardiacSynchronizationTechnique);
        data_dictionary->Add(&tags::CArmPositionerTabletopRelationship);
        data_dictionary->Add(&tags::CarrierID);
        data_dictionary->Add(&tags::CarrierIDAssigningAuthority);
        data_dictionary->Add(&tags::CassetteID);
        data_dictionary->Add(&tags::CassetteOrientation);
        data_dictionary->Add(&tags::CassetteSize);
        data_dictionary->Add(&tags::CatchTrialsDataFlag);
        data_dictionary->Add(&tags::CatheterDirectionOfRotation);
        data_dictionary->Add(&tags::CatheterRotationalRate);
        data_dictionary->Add(&tags::CenterOfCircularCollimator);
        data_dictionary->Add(&tags::CenterOfCircularExposureControlSensingRegion);
        data_dictionary->Add(&tags::CenterOfCircularShutter);
        data_dictionary->Add(&tags::CenterOfMass);
        data_dictionary->Add(&tags::CenterOfPTO);
        data_dictionary->Add(&tags::CenterOfRotation);
        data_dictionary->Add(&tags::CenterOfRotationOffset);
        data_dictionary->Add(&tags::CertificateOfSigner);
        data_dictionary->Add(&tags::CertificateType);
        data_dictionary->Add(&tags::CertifiedTimestamp);
        data_dictionary->Add(&tags::CertifiedTimestampType);
        data_dictionary->Add(&tags::ChairHeadFramePosition);
        data_dictionary->Add(&tags::ChairHeadFramePositionTolerance);
        data_dictionary->Add(&tags::ChannelBaseline);
        data_dictionary->Add(&tags::ChannelDefinitionSequence);
        data_dictionary->Add(&tags::ChannelDeliveryContinuationSequence);
        data_dictionary->Add(&tags::ChannelDeliveryOrderIndex);
        data_dictionary->Add(&tags::ChannelDeliveryOrderSequence);
        data_dictionary->Add(&tags::ChannelDerivationDescription);
        data_dictionary->Add(&tags::ChannelDescriptionCodeSequence);
        data_dictionary->Add(&tags::ChannelDisplaySequence);
        data_dictionary->Add(&tags::ChannelEffectiveLength);
        data_dictionary->Add(&tags::ChannelIdentificationCode);
        data_dictionary->Add(&tags::ChannelInnerLength);
        data_dictionary->Add(&tags::ChannelLabel);
        data_dictionary->Add(&tags::ChannelLength);
        data_dictionary->Add(&tags::ChannelMaximumValue);
        data_dictionary->Add(&tags::ChannelMinimumValue);
        data_dictionary->Add(&tags::ChannelMode);
        data_dictionary->Add(&tags::ChannelNumber);
        data_dictionary->Add(&tags::ChannelOffset);
        data_dictionary->Add(&tags::ChannelOverlap);
        data_dictionary->Add(&tags::ChannelPosition);
        data_dictionary->Add(&tags::ChannelRecommendedDisplayCIELabValue);
        data_dictionary->Add(&tags::ChannelSampleSkew);
        data_dictionary->Add(&tags::ChannelSensitivity);
        data_dictionary->Add(&tags::ChannelSensitivityCorrectionFactor);
        data_dictionary->Add(&tags::ChannelSensitivityUnitsSequence);
        data_dictionary->Add(&tags::ChannelSequence);
        data_dictionary->Add(&tags::ChannelSettingsSequence);
        data_dictionary->Add(&tags::ChannelShieldID);
        data_dictionary->Add(&tags::ChannelShieldName);
        data_dictionary->Add(&tags::ChannelShieldNominalThickness);
        data_dictionary->Add(&tags::ChannelShieldNominalTransmission);
        data_dictionary->Add(&tags::ChannelShieldNumber);
        data_dictionary->Add(&tags::ChannelShieldSequence);
        data_dictionary->Add(&tags::ChannelSourceModifiersSequence);
        data_dictionary->Add(&tags::ChannelSourceSequence);
        data_dictionary->Add(&tags::ChannelStatus);
        data_dictionary->Add(&tags::ChannelThreshold);
        data_dictionary->Add(&tags::ChannelTimeSkew);
        data_dictionary->Add(&tags::ChannelTotalTime);
        data_dictionary->Add(&tags::ChannelWidth);
        data_dictionary->Add(&tags::ChemicalShiftMaximumIntegrationLimitInHz);
        data_dictionary->Add(&tags::ChemicalShiftMaximumIntegrationLimitInppm);
        data_dictionary->Add(&tags::ChemicalShiftMinimumIntegrationLimitInHz);
        data_dictionary->Add(&tags::ChemicalShiftMinimumIntegrationLimitInppm);
        data_dictionary->Add(&tags::ChemicalShiftReference);
        data_dictionary->Add(&tags::ChemicalShiftSequence);
        data_dictionary->Add(&tags::CIExyWhitePoint);
        data_dictionary->Add(&tags::CineRate);
        data_dictionary->Add(&tags::CineRelativeToRealTime);
        data_dictionary->Add(&tags::ClinicalTrialCoordinatingCenterName);
        data_dictionary->Add(&tags::ClinicalTrialProtocolEthicsCommitteeApprovalNumber);
        data_dictionary->Add(&tags::ClinicalTrialProtocolEthicsCommitteeName);
        data_dictionary->Add(&tags::ClinicalTrialProtocolID);
        data_dictionary->Add(&tags::ClinicalTrialProtocolName);
        data_dictionary->Add(&tags::ClinicalTrialSeriesDescription);
        data_dictionary->Add(&tags::ClinicalTrialSeriesID);
        data_dictionary->Add(&tags::ClinicalTrialSiteID);
        data_dictionary->Add(&tags::ClinicalTrialSiteName);
        data_dictionary->Add(&tags::ClinicalTrialSponsorName);
        data_dictionary->Add(&tags::ClinicalTrialSubjectID);
        data_dictionary->Add(&tags::ClinicalTrialSubjectReadingID);
        data_dictionary->Add(&tags::ClinicalTrialTimePointDescription);
        data_dictionary->Add(&tags::ClinicalTrialTimePointID);
        data_dictionary->Add(&tags::CoatingMaterialsCodeSequence);
        data_dictionary->Add(&tags::CodeLabel);
        data_dictionary->Add(&tags::CodeMeaning);
        data_dictionary->Add(&tags::CodeNumberFormat);
        data_dictionary->Add(&tags::CodeTableLocation);
        data_dictionary->Add(&tags::CodeValue);
        data_dictionary->Add(&tags::CodingSchemeDesignator);
        data_dictionary->Add(&tags::CodingSchemeExternalID);
        data_dictionary->Add(&tags::CodingSchemeIdentificationSequence);
        data_dictionary->Add(&tags::CodingSchemeName);
        data_dictionary->Add(&tags::CodingSchemeRegistry);
        data_dictionary->Add(&tags::CodingSchemeResourcesSequence);
        data_dictionary->Add(&tags::CodingSchemeResponsibleOrganization);
        data_dictionary->Add(&tags::CodingSchemeUID);
        data_dictionary->Add(&tags::CodingSchemeURL);
        data_dictionary->Add(&tags::CodingSchemeURLType);
        data_dictionary->Add(&tags::CodingSchemeVersion);
        data_dictionary->Add(&tags::CoefficientCoding);
        data_dictionary->Add(&tags::CoefficientCodingPointers);
        data_dictionary->Add(&tags::CoefficientsSDDN);
        data_dictionary->Add(&tags::CoefficientsSDHN);
        data_dictionary->Add(&tags::CoefficientsSDVN);
        data_dictionary->Add(&tags::CoincidenceWindowWidth);
        data_dictionary->Add(&tags::CollationFlag);
        data_dictionary->Add(&tags::CollimatorGridName);
        data_dictionary->Add(&tags::CollimatorLeftVerticalEdge);
        data_dictionary->Add(&tags::CollimatorLowerHorizontalEdge);
        data_dictionary->Add(&tags::CollimatorRightVerticalEdge);
        data_dictionary->Add(&tags::CollimatorShape);
        data_dictionary->Add(&tags::CollimatorShapeSequence);
        data_dictionary->Add(&tags::CollimatorType);
        data_dictionary->Add(&tags::CollimatorUpperHorizontalEdge);
        data_dictionary->Add(&tags::ColorImagePrintingFlag);
        data_dictionary->Add(&tags::ColorSpace);
        data_dictionary->Add(&tags::ColumnAngulation);
        data_dictionary->Add(&tags::ColumnAngulationPatient);
        data_dictionary->Add(&tags::ColumnOverlap);
        data_dictionary->Add(&tags::ColumnPositionInTotalImagePixelMatrix);
        data_dictionary->Add(&tags::Columns);
        data_dictionary->Add(&tags::ColumnsForNthOrderCoefficients);
        data_dictionary->Add(&tags::CommentsOnPatientPerformanceOfVisualField);
        data_dictionary->Add(&tags::CommentsOnRadiationDose);
        data_dictionary->Add(&tags::CommentsOnThePerformedProcedureStep);
        data_dictionary->Add(&tags::CommentsOnTheScheduledProcedureStep);
        data_dictionary->Add(&tags::CompensatorColumnOffset);
        data_dictionary->Add(&tags::CompensatorColumns);
        data_dictionary->Add(&tags::CompensatorDescription);
        data_dictionary->Add(&tags::CompensatorDivergence);
        data_dictionary->Add(&tags::CompensatorID);
        data_dictionary->Add(&tags::CompensatorMillingToolDiameter);
        data_dictionary->Add(&tags::CompensatorMountingPosition);
        data_dictionary->Add(&tags::CompensatorNumber);
        data_dictionary->Add(&tags::CompensatorPixelSpacing);
        data_dictionary->Add(&tags::CompensatorPosition);
        data_dictionary->Add(&tags::CompensatorRelativeStoppingPowerRatio);
        data_dictionary->Add(&tags::CompensatorRows);
        data_dictionary->Add(&tags::CompensatorSequence);
        data_dictionary->Add(&tags::CompensatorThicknessData);
        data_dictionary->Add(&tags::CompensatorTransmissionData);
        data_dictionary->Add(&tags::CompensatorTrayID);
        data_dictionary->Add(&tags::CompensatorType);
        data_dictionary->Add(&tags::CompletionFlag);
        data_dictionary->Add(&tags::CompletionFlagDescription);
        data_dictionary->Add(&tags::ComplexImageComponent);
        data_dictionary->Add(&tags::Component1ReferencedID);
        data_dictionary->Add(&tags::Component1ReferencedMatingFeatureID);
        data_dictionary->Add(&tags::Component1ReferencedMatingFeatureSetID);
        data_dictionary->Add(&tags::Component2ReferencedID);
        data_dictionary->Add(&tags::Component2ReferencedMatingFeatureID);
        data_dictionary->Add(&tags::Component2ReferencedMatingFeatureSetID);
        data_dictionary->Add(&tags::ComponentAssemblySequence);
        data_dictionary->Add(&tags::ComponentID);
        data_dictionary->Add(&tags::ComponentInputSequence);
        data_dictionary->Add(&tags::ComponentManufacturer);
        data_dictionary->Add(&tags::ComponentManufacturingProcedure);
        data_dictionary->Add(&tags::ComponentReferenceSystem);
        data_dictionary->Add(&tags::ComponentSequence);
        data_dictionary->Add(&tags::ComponentShape);
        data_dictionary->Add(&tags::ComponentType);
        data_dictionary->Add(&tags::ComponentTypeCodeSequence);
        data_dictionary->Add(&tags::ComponentTypesSequence);
        data_dictionary->Add(&tags::ComponentWelderIDs);
        data_dictionary->Add(&tags::CompositingMethod);
        data_dictionary->Add(&tags::CompoundGraphicInstanceID);
        data_dictionary->Add(&tags::CompoundGraphicSequence);
        data_dictionary->Add(&tags::CompoundGraphicType);
        data_dictionary->Add(&tags::CompoundGraphicUnits);
        data_dictionary->Add(&tags::CompressionCode);
        data_dictionary->Add(&tags::CompressionContactArea);
        data_dictionary->Add(&tags::CompressionDescription);
        data_dictionary->Add(&tags::CompressionForce);
        data_dictionary->Add(&tags::CompressionLabel);
        data_dictionary->Add(&tags::CompressionOriginator);
        data_dictionary->Add(&tags::CompressionPressure);
        data_dictionary->Add(&tags::CompressionRecognitionCode);
        data_dictionary->Add(&tags::CompressionSequence);
        data_dictionary->Add(&tags::CompressionStepPointers);
        data_dictionary->Add(&tags::ConcatenationFrameOffsetNumber);
        data_dictionary->Add(&tags::ConcatenationUID);
        data_dictionary->Add(&tags::ConceptCodeSequence);
        data_dictionary->Add(&tags::ConceptNameCodeSequence);
        data_dictionary->Add(&tags::CondenserLensPower);
        data_dictionary->Add(&tags::ConfidentialityCode);
        data_dictionary->Add(&tags::ConfidentialityConstraintOnPatientDataDescription);
        data_dictionary->Add(&tags::ConfigurationDescription);
        data_dictionary->Add(&tags::ConfigurationID);
        data_dictionary->Add(&tags::ConfigurationInformation);
        data_dictionary->Add(&tags::ConfigurationInformationDescription);
        data_dictionary->Add(&tags::ConfigurationName);
        data_dictionary->Add(&tags::ConfigurationQAResultsSequence);
        data_dictionary->Add(&tags::ConnectorType);
        data_dictionary->Add(&tags::ConsentForClinicalTrialUseSequence);
        data_dictionary->Add(&tags::ConsentForDistributionFlag);
        data_dictionary->Add(&tags::ConstantVolumeFlag);
        data_dictionary->Add(&tags::ConstraintType);
        data_dictionary->Add(&tags::ConstraintValueSequence);
        data_dictionary->Add(&tags::ConstraintViolationCondition);
        data_dictionary->Add(&tags::ConstraintViolationSignificance);
        data_dictionary->Add(&tags::ConstraintWeight);
        data_dictionary->Add(&tags::ConsultingPhysicianIdentificationSequence);
        data_dictionary->Add(&tags::ConsultingPhysicianName);
        data_dictionary->Add(&tags::ContactDisplayName);
        data_dictionary->Add(&tags::ContactURI);
        data_dictionary->Add(&tags::ContainerComponentDescription);
        data_dictionary->Add(&tags::ContainerComponentDiameter);
        data_dictionary->Add(&tags::ContainerComponentID);
        data_dictionary->Add(&tags::ContainerComponentLength);
        data_dictionary->Add(&tags::ContainerComponentMaterial);
        data_dictionary->Add(&tags::ContainerComponentSequence);
        data_dictionary->Add(&tags::ContainerComponentThickness);
        data_dictionary->Add(&tags::ContainerComponentTypeCodeSequence);
        data_dictionary->Add(&tags::ContainerComponentWidth);
        data_dictionary->Add(&tags::ContainerDescription);
        data_dictionary->Add(&tags::ContainerIdentifier);
        data_dictionary->Add(&tags::ContainerTypeCodeSequence);
        data_dictionary->Add(&tags::ContentCreatorIdentificationCodeSequence);
        data_dictionary->Add(&tags::ContentCreatorName);
        data_dictionary->Add(&tags::ContentDate);
        data_dictionary->Add(&tags::ContentDescription);
        data_dictionary->Add(&tags::ContentItemModifierSequence);
        data_dictionary->Add(&tags::ContentLabel);
        data_dictionary->Add(&tags::ContentQualification);
        data_dictionary->Add(&tags::ContentSequence);
        data_dictionary->Add(&tags::ContentTemplateSequence);
        data_dictionary->Add(&tags::ContentTime);
        data_dictionary->Add(&tags::ContextGroupExtensionCreatorUID);
        data_dictionary->Add(&tags::ContextGroupExtensionFlag);
        data_dictionary->Add(&tags::ContextGroupIdentificationSequence);
        data_dictionary->Add(&tags::ContextGroupLocalVersion);
        data_dictionary->Add(&tags::ContextGroupVersion);
        data_dictionary->Add(&tags::ContextIdentifier);
        data_dictionary->Add(&tags::ContextUID);
        data_dictionary->Add(&tags::ContinuationEndMeterset);
        data_dictionary->Add(&tags::ContinuationEndTotalReferenceAirKerma);
        data_dictionary->Add(&tags::ContinuationPulseNumber);
        data_dictionary->Add(&tags::ContinuationStartMeterset);
        data_dictionary->Add(&tags::ContinuationStartTotalReferenceAirKerma);
        data_dictionary->Add(&tags::ContinuityOfContent);
        data_dictionary->Add(&tags::ContourData);
        data_dictionary->Add(&tags::ContourGeometricType);
        data_dictionary->Add(&tags::ContourImageSequence);
        data_dictionary->Add(&tags::ContourNumber);
        data_dictionary->Add(&tags::ContourOffsetVector);
        data_dictionary->Add(&tags::ContourSequence);
        data_dictionary->Add(&tags::ContourSlabThickness);
        data_dictionary->Add(&tags::ContourUncertaintyRadius);
        data_dictionary->Add(&tags::ContraindicationsCodeSequence);
        data_dictionary->Add(&tags::ContrastAdministrationProfileSequence);
        data_dictionary->Add(&tags::ContrastBolusAdministrationRouteSequence);
        data_dictionary->Add(&tags::ContrastBolusAgent);
        data_dictionary->Add(&tags::ContrastBolusAgentAdministered);
        data_dictionary->Add(&tags::ContrastBolusAgentDetected);
        data_dictionary->Add(&tags::ContrastBolusAgentNumber);
        data_dictionary->Add(&tags::ContrastBolusAgentPhase);
        data_dictionary->Add(&tags::ContrastBolusAgentSequence);
        data_dictionary->Add(&tags::ContrastBolusIngredient);
        data_dictionary->Add(&tags::ContrastBolusIngredientCodeSequence);
        data_dictionary->Add(&tags::ContrastBolusIngredientConcentration);
        data_dictionary->Add(&tags::ContrastBolusIngredientOpaque);
        data_dictionary->Add(&tags::ContrastBolusIngredientPercentByVolume);
        data_dictionary->Add(&tags::ContrastBolusRoute);
        data_dictionary->Add(&tags::ContrastBolusStartTime);
        data_dictionary->Add(&tags::ContrastBolusStopTime);
        data_dictionary->Add(&tags::ContrastBolusT1Relaxivity);
        data_dictionary->Add(&tags::ContrastBolusTotalDose);
        data_dictionary->Add(&tags::ContrastBolusUsageSequence);
        data_dictionary->Add(&tags::ContrastBolusVolume);
        data_dictionary->Add(&tags::ContrastFlowDuration);
        data_dictionary->Add(&tags::ContrastFlowRate);
        data_dictionary->Add(&tags::ContrastFrameAveraging);
        data_dictionary->Add(&tags::ContributingEquipmentSequence);
        data_dictionary->Add(&tags::ContributingSOPInstancesReferenceSequence);
        data_dictionary->Add(&tags::ContributingSourcesSequence);
        data_dictionary->Add(&tags::ContributionDateTime);
        data_dictionary->Add(&tags::ContributionDescription);
        data_dictionary->Add(&tags::ControlPoint3DPosition);
        data_dictionary->Add(&tags::ControlPointDeliverySequence);
        data_dictionary->Add(&tags::ControlPointIndex);
        data_dictionary->Add(&tags::ControlPointOrientation);
        data_dictionary->Add(&tags::ControlPointRelativePosition);
        data_dictionary->Add(&tags::ControlPointSequence);
        data_dictionary->Add(&tags::ConventionalControlPointVerificationSequence);
        data_dictionary->Add(&tags::ConventionalMachineVerificationSequence);
        data_dictionary->Add(&tags::ConversionSourceAttributesSequence);
        data_dictionary->Add(&tags::ConversionType);
        data_dictionary->Add(&tags::ConvolutionKernel);
        data_dictionary->Add(&tags::ConvolutionKernelGroup);
        data_dictionary->Add(&tags::CoordinatesSetGeometricTypeTrial);
        data_dictionary->Add(&tags::CoordinateStartValue);
        data_dictionary->Add(&tags::CoordinateStepValue);
        data_dictionary->Add(&tags::CoordinateSystemAxesSequence);
        data_dictionary->Add(&tags::CoordinateSystemAxisCodeSequence);
        data_dictionary->Add(&tags::CoordinateSystemAxisDescription);
        data_dictionary->Add(&tags::CoordinateSystemAxisNumber);
        data_dictionary->Add(&tags::CoordinateSystemAxisType);
        data_dictionary->Add(&tags::CoordinateSystemAxisUnits);
        data_dictionary->Add(&tags::CoordinateSystemAxisValues);
        data_dictionary->Add(&tags::CoordinateSystemDataSetMapping);
        data_dictionary->Add(&tags::CoordinateSystemNumberOfAxes);
        data_dictionary->Add(&tags::CoordinateSystemTransformRotationAndScaleMatrix);
        data_dictionary->Add(&tags::CoordinateSystemTransformSequence);
        data_dictionary->Add(&tags::CoordinateSystemTransformTranslationMatrix);
        data_dictionary->Add(&tags::CornealEccentricityIndex);
        data_dictionary->Add(&tags::CornealISValue);
        data_dictionary->Add(&tags::CornealPointEstimated);
        data_dictionary->Add(&tags::CornealPointLocation);
        data_dictionary->Add(&tags::CornealSize);
        data_dictionary->Add(&tags::CornealTopographyMappingNormalsSequence);
        data_dictionary->Add(&tags::CornealTopographyMapQualityEvaluation);
        data_dictionary->Add(&tags::CornealTopographyMapTypeCodeSequence);
        data_dictionary->Add(&tags::CornealTopographySurface);
        data_dictionary->Add(&tags::CornealVertexLocation);
        data_dictionary->Add(&tags::CornealWavefront);
        data_dictionary->Add(&tags::CorrectedImage);
        data_dictionary->Add(&tags::CorrectedLocalizedDeviationFromNormal);
        data_dictionary->Add(&tags::CorrectedLocalizedDeviationFromNormalCalculated);
        data_dictionary->Add(&tags::CorrectedLocalizedDeviationFromNormalProbability);
        data_dictionary->Add(&tags::CorrectedLocalizedDeviationFromNormalProbabilityCalculated);
        data_dictionary->Add(&tags::CorrectedParameterSequence);
        data_dictionary->Add(&tags::CorrectionValue);
        data_dictionary->Add(&tags::CountLossNormalizationCorrected);
        data_dictionary->Add(&tags::CountRate);
        data_dictionary->Add(&tags::CountryOfResidence);
        data_dictionary->Add(&tags::CountsAccumulated);
        data_dictionary->Add(&tags::CountsIncluded);
        data_dictionary->Add(&tags::CountsSource);
        data_dictionary->Add(&tags::CouplingMedium);
        data_dictionary->Add(&tags::CouplingTechnique);
        data_dictionary->Add(&tags::CouplingVelocity);
        data_dictionary->Add(&tags::CoverageOfKSpace);
        data_dictionary->Add(&tags::CranialThermalIndex);
        data_dictionary->Add(&tags::CreationDate);
        data_dictionary->Add(&tags::CreationTime);
        data_dictionary->Add(&tags::CreatorVersionUID);
        data_dictionary->Add(&tags::Crop);
        data_dictionary->Add(&tags::CroppingSpecificationIndex);
        data_dictionary->Add(&tags::CroppingSpecificationNumber);
        data_dictionary->Add(&tags::CSSFontName);
        data_dictionary->Add(&tags::CTAcquisitionDetailsSequence);
        data_dictionary->Add(&tags::CTAcquisitionTypeSequence);
        data_dictionary->Add(&tags::CTAdditionalXRaySourceSequence);
        data_dictionary->Add(&tags::CTDIPhantomTypeCodeSequence);
        data_dictionary->Add(&tags::CTDIvol);
        data_dictionary->Add(&tags::CTDIvolNotificationTrigger);
        data_dictionary->Add(&tags::CTExposureSequence);
        data_dictionary->Add(&tags::CTGeometrySequence);
        data_dictionary->Add(&tags::CTImageFrameTypeSequence);
        data_dictionary->Add(&tags::CTPositionSequence);
        data_dictionary->Add(&tags::CTReconstructionSequence);
        data_dictionary->Add(&tags::CTTableDynamicsSequence);
        data_dictionary->Add(&tags::CTXRayDetailsSequence);
        data_dictionary->Add(&tags::CumulativeDoseReferenceCoefficient);
        data_dictionary->Add(&tags::CumulativeDoseToDoseReference);
        data_dictionary->Add(&tags::CumulativeMetersetWeight);
        data_dictionary->Add(&tags::CumulativeTimeWeight);
        data_dictionary->Add(&tags::CurrentConfigurationID);
        data_dictionary->Add(&tags::CurrentFractionNumber);
        data_dictionary->Add(&tags::CurrentObserverTrial);
        data_dictionary->Add(&tags::CurrentPatientLocation);
        data_dictionary->Add(&tags::CurrentRequestedProcedureEvidenceSequence);
        data_dictionary->Add(&tags::CurrentTreatmentStatus);
        data_dictionary->Add(&tags::CurvatureType);
        data_dictionary->Add(&tags::CurveActivationLayer);
        data_dictionary->Add(&tags::CurveData);
        data_dictionary->Add(&tags::CurveDataDescriptor);
        data_dictionary->Add(&tags::CurveDate);
        data_dictionary->Add(&tags::CurveDescription);
        data_dictionary->Add(&tags::CurveDimensions);
        data_dictionary->Add(&tags::CurveLabel);
        data_dictionary->Add(&tags::CurveNumber);
        data_dictionary->Add(&tags::CurveRange);
        data_dictionary->Add(&tags::CurveReferencedOverlayGroup);
        data_dictionary->Add(&tags::CurveReferencedOverlaySequence);
        data_dictionary->Add(&tags::CurveTime);
        data_dictionary->Add(&tags::CustodialOrganizationSequence);
        data_dictionary->Add(&tags::CylinderAxis);
        data_dictionary->Add(&tags::CylinderLensPower);
        data_dictionary->Add(&tags::CylinderPower);
        data_dictionary->Add(&tags::CylinderSequence);
        data_dictionary->Add(&tags::DACAmplitude);
        data_dictionary->Add(&tags::DACGainPoints);
        data_dictionary->Add(&tags::DACSequence);
        data_dictionary->Add(&tags::DACTimePoints);
        data_dictionary->Add(&tags::DACType);
        data_dictionary->Add(&tags::Damping);
        data_dictionary->Add(&tags::DarkCurrentCounts);
        data_dictionary->Add(&tags::DarkCurrentSequence);
        data_dictionary->Add(&tags::DataBlock);
        data_dictionary->Add(&tags::DataBlockDescription);
        data_dictionary->Add(&tags::DataCollectionCenterPatient);
        data_dictionary->Add(&tags::DataCollectionDiameter);
        data_dictionary->Add(&tags::DataElementsSigned);
        data_dictionary->Add(&tags::DataFrameAssignmentSequence);
        data_dictionary->Add(&tags::DataInformationSequence);
        data_dictionary->Add(&tags::DataObservationSequence);
        data_dictionary->Add(&tags::DataPathAssignment);
        data_dictionary->Add(&tags::DataPathID);
        data_dictionary->Add(&tags::DataPointColumns);
        data_dictionary->Add(&tags::DataPointRows);
        data_dictionary->Add(&tags::DataRepresentation);
        data_dictionary->Add(&tags::DataSetDescription);
        data_dictionary->Add(&tags::DataSetName);
        data_dictionary->Add(&tags::DataSetSource);
        data_dictionary->Add(&tags::DataSetSubtype);
        data_dictionary->Add(&tags::DataSetTrailingPadding);
        data_dictionary->Add(&tags::DataSetType);
        data_dictionary->Add(&tags::DataSetVersion);
        data_dictionary->Add(&tags::DataType);
        data_dictionary->Add(&tags::DataValueRepresentation);
        data_dictionary->Add(&tags::Date);
        data_dictionary->Add(&tags::DateOfDocumentOrVerbalTransactionTrial);
        data_dictionary->Add(&tags::DateOfGainCalibration);
        data_dictionary->Add(&tags::DateOfLastCalibration);
        data_dictionary->Add(&tags::DateOfLastDetectorCalibration);
        data_dictionary->Add(&tags::DateOfSecondaryCapture);
        data_dictionary->Add(&tags::DateTime);
        data_dictionary->Add(&tags::DateTimeOfLastCalibration);
        data_dictionary->Add(&tags::dBdt);
        data_dictionary->Add(&tags::DCTLabel);
        data_dictionary->Add(&tags::DDLValue);
        data_dictionary->Add(&tags::DeadTimeCorrected);
        data_dictionary->Add(&tags::DeadTimeCorrectionFlag);
        data_dictionary->Add(&tags::DeadTimeFactor);
        data_dictionary->Add(&tags::DecayCorrected);
        data_dictionary->Add(&tags::DecayCorrection);
        data_dictionary->Add(&tags::DecayCorrectionDateTime);
        data_dictionary->Add(&tags::DecayFactor);
        data_dictionary->Add(&tags::DecimalPotentialVisualAcuity);
        data_dictionary->Add(&tags::DecimalVisualAcuity);
        data_dictionary->Add(&tags::DecimateCropResult);
        data_dictionary->Add(&tags::DecoupledNucleus);
        data_dictionary->Add(&tags::Decoupling);
        data_dictionary->Add(&tags::DecouplingChemicalShiftReference);
        data_dictionary->Add(&tags::DecouplingFrequency);
        data_dictionary->Add(&tags::DecouplingMethod);
        data_dictionary->Add(&tags::DefaultMagnificationType);
        data_dictionary->Add(&tags::DefaultPrinterResolutionID);
        data_dictionary->Add(&tags::DefaultSmoothingType);
        data_dictionary->Add(&tags::DefinitionSourceSequence);
        data_dictionary->Add(&tags::DeformableRegistrationGridSequence);
        data_dictionary->Add(&tags::DeformableRegistrationSequence);
        data_dictionary->Add(&tags::DegreeOfDilation);
        data_dictionary->Add(&tags::DegreeOfFreedomID);
        data_dictionary->Add(&tags::DegreeOfFreedomType);
        data_dictionary->Add(&tags::DeidentificationAction);
        data_dictionary->Add(&tags::DeidentificationActionSequence);
        data_dictionary->Add(&tags::DeidentificationMethod);
        data_dictionary->Add(&tags::DeidentificationMethodCodeSequence);
        data_dictionary->Add(&tags::DelayLawIdentifier);
        data_dictionary->Add(&tags::DeletionLock);
        data_dictionary->Add(&tags::DeliveredChannelTotalTime);
        data_dictionary->Add(&tags::DeliveredDepthDoseParametersSequence);
        data_dictionary->Add(&tags::DeliveredDistalDepth);
        data_dictionary->Add(&tags::DeliveredDistalDepthFraction);
        data_dictionary->Add(&tags::DeliveredMeterset);
        data_dictionary->Add(&tags::DeliveredNominalRangeModulatedRegionDepths);
        data_dictionary->Add(&tags::DeliveredNominalRangeModulationFractions);
        data_dictionary->Add(&tags::DeliveredNumberOfPulses);
        data_dictionary->Add(&tags::DeliveredPrimaryMeterset);
        data_dictionary->Add(&tags::DeliveredPulseRepetitionInterval);
        data_dictionary->Add(&tags::DeliveredReferenceDoseDefinition);
        data_dictionary->Add(&tags::DeliveredSecondaryMeterset);
        data_dictionary->Add(&tags::DeliveredTreatmentTime);
        data_dictionary->Add(&tags::DeliveryMaximumDose);
        data_dictionary->Add(&tags::DeliveryVerificationImageSequence);
        data_dictionary->Add(&tags::DeliveryWarningDose);
        data_dictionary->Add(&tags::Density);
        data_dictionary->Add(&tags::DepthDoseParametersSequence);
        data_dictionary->Add(&tags::DepthOfScanField);
        data_dictionary->Add(&tags::DepthOfTransverseImage);
        data_dictionary->Add(&tags::DepthsOfFocus);
        data_dictionary->Add(&tags::DepthSpatialResolution);
        data_dictionary->Add(&tags::DepthValueAveragingFlag);
        data_dictionary->Add(&tags::DerivationAlgorithmSequence);
        data_dictionary->Add(&tags::DerivationCodeSequence);
        data_dictionary->Add(&tags::DerivationDescription);
        data_dictionary->Add(&tags::DerivationImageSequence);
        data_dictionary->Add(&tags::DerivationImplantAssemblyTemplateSequence);
        data_dictionary->Add(&tags::DerivationImplantTemplateSequence);
        data_dictionary->Add(&tags::DestinationAE);
        data_dictionary->Add(&tags::DetailsOfCoefficients);
        data_dictionary->Add(&tags::DetectorActivationOffsetFromExposure);
        data_dictionary->Add(&tags::DetectorActiveAreaOrientation);
        data_dictionary->Add(&tags::DetectorActiveAreaTLHCPosition);
        data_dictionary->Add(&tags::DetectorActiveDimensions);
        data_dictionary->Add(&tags::DetectorActiveOrigin);
        data_dictionary->Add(&tags::DetectorActiveShape);
        data_dictionary->Add(&tags::DetectorActiveTime);
        data_dictionary->Add(&tags::DetectorBinning);
        data_dictionary->Add(&tags::DetectorCalibrationData);
        data_dictionary->Add(&tags::DetectorConditionsNominalFlag);
        data_dictionary->Add(&tags::DetectorConfiguration);
        data_dictionary->Add(&tags::DetectorDescription);
        data_dictionary->Add(&tags::DetectorElementPhysicalSize);
        data_dictionary->Add(&tags::DetectorElementSize);
        data_dictionary->Add(&tags::DetectorElementSpacing);
        data_dictionary->Add(&tags::DetectorGeometry);
        data_dictionary->Add(&tags::DetectorGeometrySequence);
        data_dictionary->Add(&tags::DetectorID);
        data_dictionary->Add(&tags::DetectorInformationSequence);
        data_dictionary->Add(&tags::DetectorIsocenterPrimaryAngle);
        data_dictionary->Add(&tags::DetectorIsocenterSecondaryAngle);
        data_dictionary->Add(&tags::DetectorLinesOfResponseUsed);
        data_dictionary->Add(&tags::DetectorManufacturerModelName);
        data_dictionary->Add(&tags::DetectorManufacturerName);
        data_dictionary->Add(&tags::DetectorMode);
        data_dictionary->Add(&tags::DetectorNormalizationCorrection);
        data_dictionary->Add(&tags::DetectorPositionSequence);
        data_dictionary->Add(&tags::DetectorPrimaryAngle);
        data_dictionary->Add(&tags::DetectorSecondaryAngle);
        data_dictionary->Add(&tags::DetectorTemperature);
        data_dictionary->Add(&tags::DetectorTemperatureSequence);
        data_dictionary->Add(&tags::DetectorTimeSinceLastExposure);
        data_dictionary->Add(&tags::DetectorType);
        data_dictionary->Add(&tags::DetectorVector);
        data_dictionary->Add(&tags::DetectorXPositionToIsocenter);
        data_dictionary->Add(&tags::DetectorYPositionToIsocenter);
        data_dictionary->Add(&tags::DetectorZPositionToIsocenter);
        data_dictionary->Add(&tags::DeviationIndex);
        data_dictionary->Add(&tags::DeviceDescription);
        data_dictionary->Add(&tags::DeviceDiameter);
        data_dictionary->Add(&tags::DeviceDiameterUnits);
        data_dictionary->Add(&tags::DeviceID);
        data_dictionary->Add(&tags::DeviceLength);
        data_dictionary->Add(&tags::DeviceMotionControlSequence);
        data_dictionary->Add(&tags::DeviceMotionExecutionMode);
        data_dictionary->Add(&tags::DeviceMotionObservationMode);
        data_dictionary->Add(&tags::DeviceMotionParameterCodeSequence);
        data_dictionary->Add(&tags::DeviceSequence);
        data_dictionary->Add(&tags::DeviceSerialNumber);
        data_dictionary->Add(&tags::DeviceUID);
        data_dictionary->Add(&tags::DeviceVolume);
        data_dictionary->Add(&tags::DiameterOfVisibility);
        data_dictionary->Add(&tags::DiaphragmPosition);
        data_dictionary->Add(&tags::DICOMMediaRetrievalSequence);
        data_dictionary->Add(&tags::DICOMRetrievalSequence);
        data_dictionary->Add(&tags::DICOMStorageSequence);
        data_dictionary->Add(&tags::DICOSVersion);
        data_dictionary->Add(&tags::DiffuseReflectionIntensity);
        data_dictionary->Add(&tags::DiffusionAcquisitionCodeSequence);
        data_dictionary->Add(&tags::DiffusionAnisotropyType);
        data_dictionary->Add(&tags::DiffusionBMatrixSequence);
        data_dictionary->Add(&tags::DiffusionBValue);
        data_dictionary->Add(&tags::DiffusionBValueXX);
        data_dictionary->Add(&tags::DiffusionBValueXY);
        data_dictionary->Add(&tags::DiffusionBValueXZ);
        data_dictionary->Add(&tags::DiffusionBValueYY);
        data_dictionary->Add(&tags::DiffusionBValueYZ);
        data_dictionary->Add(&tags::DiffusionBValueZZ);
        data_dictionary->Add(&tags::DiffusionDirectionality);
        data_dictionary->Add(&tags::DiffusionGradientDirectionSequence);
        data_dictionary->Add(&tags::DiffusionGradientOrientation);
        data_dictionary->Add(&tags::DiffusionModelCodeSequence);
        data_dictionary->Add(&tags::DigitalImageFormatAcquired);
        data_dictionary->Add(&tags::DigitalSignatureDateTime);
        data_dictionary->Add(&tags::DigitalSignaturePurposeCodeSequence);
        data_dictionary->Add(&tags::DigitalSignaturesSequence);
        data_dictionary->Add(&tags::DigitalSignatureUID);
        data_dictionary->Add(&tags::DigitizingDeviceTransportDirection);
        data_dictionary->Add(&tags::DimensionDescriptionLabel);
        data_dictionary->Add(&tags::DimensionIndexPointer);
        data_dictionary->Add(&tags::DimensionIndexPrivateCreator);
        data_dictionary->Add(&tags::DimensionIndexSequence);
        data_dictionary->Add(&tags::DimensionIndexValues);
        data_dictionary->Add(&tags::DimensionOrganizationSequence);
        data_dictionary->Add(&tags::DimensionOrganizationType);
        data_dictionary->Add(&tags::DimensionOrganizationUID);
        data_dictionary->Add(&tags::DirectoryRecordSequence);
        data_dictionary->Add(&tags::DirectoryRecordType);
        data_dictionary->Add(&tags::DischargeDate);
        data_dictionary->Add(&tags::DischargeDiagnosisCodeSequence);
        data_dictionary->Add(&tags::DischargeDiagnosisDescription);
        data_dictionary->Add(&tags::DischargeTime);
        data_dictionary->Add(&tags::DisplayCalibrationResultSequence);
        data_dictionary->Add(&tags::DisplayDeviceTypeCodeSequence);
        data_dictionary->Add(&tags::DisplayedAreaBottomRightHandCorner);
        data_dictionary->Add(&tags::DisplayedAreaBottomRightHandCornerTrial);
        data_dictionary->Add(&tags::DisplayedAreaSelectionSequence);
        data_dictionary->Add(&tags::DisplayedAreaTopLeftHandCorner);
        data_dictionary->Add(&tags::DisplayedAreaTopLeftHandCornerTrial);
        data_dictionary->Add(&tags::DisplayedZValue);
        data_dictionary->Add(&tags::DisplayEnvironmentSpatialPosition);
        data_dictionary->Add(&tags::DisplayFilterPercentage);
        data_dictionary->Add(&tags::DisplayFunctionType);
        data_dictionary->Add(&tags::DisplaySetHorizontalJustification);
        data_dictionary->Add(&tags::DisplaySetLabel);
        data_dictionary->Add(&tags::DisplaySetNumber);
        data_dictionary->Add(&tags::DisplaySetPatientOrientation);
        data_dictionary->Add(&tags::DisplaySetPresentationGroup);
        data_dictionary->Add(&tags::DisplaySetPresentationGroupDescription);
        data_dictionary->Add(&tags::DisplaySetScrollingGroup);
        data_dictionary->Add(&tags::DisplaySetsSequence);
        data_dictionary->Add(&tags::DisplaySetVerticalJustification);
        data_dictionary->Add(&tags::DisplayShadingFlag);
        data_dictionary->Add(&tags::DisplaySubsystemConfigurationSequence);
        data_dictionary->Add(&tags::DisplaySubsystemDescription);
        data_dictionary->Add(&tags::DisplaySubsystemID);
        data_dictionary->Add(&tags::DisplaySubsystemName);
        data_dictionary->Add(&tags::DisplaySubsystemQAResultsSequence);
        data_dictionary->Add(&tags::DisplaySubsystemSequence);
        data_dictionary->Add(&tags::DisplayWindowLabelVector);
        data_dictionary->Add(&tags::DistalDepth);
        data_dictionary->Add(&tags::DistalDepthFraction);
        data_dictionary->Add(&tags::DistanceBetweenBscanSlabs);
        data_dictionary->Add(&tags::DistanceBetweenFocalPlanes);
        data_dictionary->Add(&tags::DistanceObjectToTableTop);
        data_dictionary->Add(&tags::DistancePupillaryDistance);
        data_dictionary->Add(&tags::DistanceReceptorPlaneToDetectorHousing);
        data_dictionary->Add(&tags::DistanceSourceToDataCollectionCenter);
        data_dictionary->Add(&tags::DistanceSourceToDetector);
        data_dictionary->Add(&tags::DistanceSourceToEntrance);
        data_dictionary->Add(&tags::DistanceSourceToIsocenter);
        data_dictionary->Add(&tags::DistanceSourceToPatient);
        data_dictionary->Add(&tags::DistanceSourceToSupport);
        data_dictionary->Add(&tags::DistributionAddress);
        data_dictionary->Add(&tags::DistributionName);
        data_dictionary->Add(&tags::DistributionType);
        data_dictionary->Add(&tags::DLPNotificationTrigger);
        data_dictionary->Add(&tags::DocumentAuthorIdentifierCodeSequenceTrial);
        data_dictionary->Add(&tags::DocumentAuthorTrial);
        data_dictionary->Add(&tags::DocumentClassCodeSequence);
        data_dictionary->Add(&tags::DocumentIdentifierCodeSequenceTrial);
        data_dictionary->Add(&tags::DocumentingObserverIdentifierCodeSequenceTrial);
        data_dictionary->Add(&tags::DocumentingOrganizationIdentifierCodeSequenceTrial);
        data_dictionary->Add(&tags::DocumentTitle);
        data_dictionary->Add(&tags::DopplerCorrectionAngle);
        data_dictionary->Add(&tags::DopplerSampleVolumeXPosition);
        data_dictionary->Add(&tags::DopplerSampleVolumeXPositionRetired);
        data_dictionary->Add(&tags::DopplerSampleVolumeYPosition);
        data_dictionary->Add(&tags::DopplerSampleVolumeYPositionRetired);
        data_dictionary->Add(&tags::DoseCalibrationFactor);
        data_dictionary->Add(&tags::DoseComment);
        data_dictionary->Add(&tags::DoseGridScaling);
        data_dictionary->Add(&tags::DoseRateDelivered);
        data_dictionary->Add(&tags::DoseRateSet);
        data_dictionary->Add(&tags::DoseReferenceDescription);
        data_dictionary->Add(&tags::DoseReferenceNumber);
        data_dictionary->Add(&tags::DoseReferencePointCoordinates);
        data_dictionary->Add(&tags::DoseReferenceSequence);
        data_dictionary->Add(&tags::DoseReferenceStructureType);
        data_dictionary->Add(&tags::DoseReferenceType);
        data_dictionary->Add(&tags::DoseReferenceUID);
        data_dictionary->Add(&tags::DoseSummationType);
        data_dictionary->Add(&tags::DoseType);
        data_dictionary->Add(&tags::DoseUnits);
        data_dictionary->Add(&tags::DoseValue);
        data_dictionary->Add(&tags::DoubleExposureFieldDelta);
        data_dictionary->Add(&tags::DoubleExposureFieldDeltaTrial);
        data_dictionary->Add(&tags::DoubleExposureFlag);
        data_dictionary->Add(&tags::DoubleExposureMeterset);
        data_dictionary->Add(&tags::DoubleExposureMetersetTrial);
        data_dictionary->Add(&tags::DoubleExposureOrdering);
        data_dictionary->Add(&tags::DoubleFloatPixelData);
        data_dictionary->Add(&tags::DoubleFloatPixelPaddingRangeLimit);
        data_dictionary->Add(&tags::DoubleFloatPixelPaddingValue);
        data_dictionary->Add(&tags::DoubleFloatRealWorldValueFirstValueMapped);
        data_dictionary->Add(&tags::DoubleFloatRealWorldValueLastValueMapped);
        data_dictionary->Add(&tags::DriveProbeSequence);
        data_dictionary->Add(&tags::DriveType);
        data_dictionary->Add(&tags::DVHData);
        data_dictionary->Add(&tags::DVHDoseScaling);
        data_dictionary->Add(&tags::DVHMaximumDose);
        data_dictionary->Add(&tags::DVHMeanDose);
        data_dictionary->Add(&tags::DVHMinimumDose);
        data_dictionary->Add(&tags::DVHNormalizationDoseValue);
        data_dictionary->Add(&tags::DVHNormalizationPoint);
        data_dictionary->Add(&tags::DVHNumberOfBins);
        data_dictionary->Add(&tags::DVHReferencedROISequence);
        data_dictionary->Add(&tags::DVHROIContributionType);
        data_dictionary->Add(&tags::DVHSequence);
        data_dictionary->Add(&tags::DVHType);
        data_dictionary->Add(&tags::DVHVolumeUnits);
        data_dictionary->Add(&tags::DynamicRange);
        data_dictionary->Add(&tags::EchoNumbers);
        data_dictionary->Add(&tags::EchoPeakPosition);
        data_dictionary->Add(&tags::EchoPlanarPulseSequence);
        data_dictionary->Add(&tags::EchoPulseSequence);
        data_dictionary->Add(&tags::EchoTime);
        data_dictionary->Add(&tags::EchoTrainLength);
        data_dictionary->Add(&tags::EdgePointIndexList);
        data_dictionary->Add(&tags::EffectiveDateTime);
        data_dictionary->Add(&tags::EffectiveDuration);
        data_dictionary->Add(&tags::EffectiveEchoTime);
        data_dictionary->Add(&tags::EffectiveRefractiveIndex);
        data_dictionary->Add(&tags::EffectiveWedgeAngle);
        data_dictionary->Add(&tags::ElementDimensionA);
        data_dictionary->Add(&tags::ElementDimensionB);
        data_dictionary->Add(&tags::ElementPitchA);
        data_dictionary->Add(&tags::ElementPitchB);
        data_dictionary->Add(&tags::ElementShape);
        data_dictionary->Add(&tags::EmmetropicMagnification);
        data_dictionary->Add(&tags::EmptyImageBoxCIELabValue);
        data_dictionary->Add(&tags::EmptyImageDensity);
        data_dictionary->Add(&tags::EncapsulatedDocument);
        data_dictionary->Add(&tags::EncryptedAttributesSequence);
        data_dictionary->Add(&tags::EncryptedContent);
        data_dictionary->Add(&tags::EncryptedContentTransferSyntaxUID);
        data_dictionary->Add(&tags::EndAcquisitionDateTime);
        data_dictionary->Add(&tags::EndCumulativeMetersetWeight);
        data_dictionary->Add(&tags::EndCumulativeTimeWeight);
        data_dictionary->Add(&tags::EndingRespiratoryAmplitude);
        data_dictionary->Add(&tags::EndingRespiratoryPhase);
        data_dictionary->Add(&tags::EndMeterset);
        data_dictionary->Add(&tags::EnergyWeightingFactor);
        data_dictionary->Add(&tags::EnergyWindowCenterline);
        data_dictionary->Add(&tags::EnergyWindowInformationSequence);
        data_dictionary->Add(&tags::EnergyWindowLowerLimit);
        data_dictionary->Add(&tags::EnergyWindowName);
        data_dictionary->Add(&tags::EnergyWindowNumber);
        data_dictionary->Add(&tags::EnergyWindowRangeSequence);
        data_dictionary->Add(&tags::EnergyWindowTotalWidth);
        data_dictionary->Add(&tags::EnergyWindowUpperLimit);
        data_dictionary->Add(&tags::EnergyWindowVector);
        data_dictionary->Add(&tags::EnhancedPaletteColorLookupTableSequence);
        data_dictionary->Add(&tags::EntranceDose);
        data_dictionary->Add(&tags::EntranceDoseDerivation);
        data_dictionary->Add(&tags::EntranceDoseInmGy);
        data_dictionary->Add(&tags::EnvironmentalConditions);
        data_dictionary->Add(&tags::EquipmentAdministratorSequence);
        data_dictionary->Add(&tags::EquipmentCoordinateSystemIdentification);
        data_dictionary->Add(&tags::EquipmentModality);
        data_dictionary->Add(&tags::EquivalentCDADocumentSequence);
        data_dictionary->Add(&tags::EquivalentCodeSequence);
        data_dictionary->Add(&tags::EquivalentPupilRadius);
        data_dictionary->Add(&tags::EscapeTriplet);
        data_dictionary->Add(&tags::EstimatedDoseSaving);
        data_dictionary->Add(&tags::EstimatedRadiographicMagnificationFactor);
        data_dictionary->Add(&tags::EthicsCommitteeApprovalEffectivenessEndDate);
        data_dictionary->Add(&tags::EthicsCommitteeApprovalEffectivenessStartDate);
        data_dictionary->Add(&tags::EthnicGroup);
        data_dictionary->Add(&tags::EvaluationAttempt);
        data_dictionary->Add(&tags::EvaluatorName);
        data_dictionary->Add(&tags::EvaluatorNumber);
        data_dictionary->Add(&tags::EvaluatorSequence);
        data_dictionary->Add(&tags::EventCodeSequence);
        data_dictionary->Add(&tags::EventElapsedTimes);
        data_dictionary->Add(&tags::EventTimeOffset);
        data_dictionary->Add(&tags::EventTimerNames);
        data_dictionary->Add(&tags::EventTimerSequence);
        data_dictionary->Add(&tags::ExaminedBodyThickness);
        data_dictionary->Add(&tags::ExcessiveFalseNegatives);
        data_dictionary->Add(&tags::ExcessiveFalseNegativesDataFlag);
        data_dictionary->Add(&tags::ExcessiveFalsePositives);
        data_dictionary->Add(&tags::ExcessiveFalsePositivesDataFlag);
        data_dictionary->Add(&tags::ExcessiveFixationLosses);
        data_dictionary->Add(&tags::ExcessiveFixationLossesDataFlag);
        data_dictionary->Add(&tags::ExcitationFrequency);
        data_dictionary->Add(&tags::ExcludedIntervalsSequence);
        data_dictionary->Add(&tags::ExclusionDuration);
        data_dictionary->Add(&tags::ExclusionStartDateTime);
        data_dictionary->Add(&tags::ExclusiveComponentType);
        data_dictionary->Add(&tags::ExecutionStatus);
        data_dictionary->Add(&tags::ExecutionStatusInfo);
        data_dictionary->Add(&tags::ExpectedCompletionDateTime);
        data_dictionary->Add(&tags::ExpiryDate);
        data_dictionary->Add(&tags::ExposedArea);
        data_dictionary->Add(&tags::Exposure);
        data_dictionary->Add(&tags::ExposureControlMode);
        data_dictionary->Add(&tags::ExposureControlModeDescription);
        data_dictionary->Add(&tags::ExposureControlSensingRegionLeftVerticalEdge);
        data_dictionary->Add(&tags::ExposureControlSensingRegionLowerHorizontalEdge);
        data_dictionary->Add(&tags::ExposureControlSensingRegionRightVerticalEdge);
        data_dictionary->Add(&tags::ExposureControlSensingRegionShape);
        data_dictionary->Add(&tags::ExposureControlSensingRegionsSequence);
        data_dictionary->Add(&tags::ExposureControlSensingRegionUpperHorizontalEdge);
        data_dictionary->Add(&tags::ExposureDoseSequence);
        data_dictionary->Add(&tags::ExposureIndex);
        data_dictionary->Add(&tags::ExposureInmAs);
        data_dictionary->Add(&tags::ExposureInuAs);
        data_dictionary->Add(&tags::ExposureModulationType);
        data_dictionary->Add(&tags::ExposureSequence);
        data_dictionary->Add(&tags::ExposuresOnDetectorSinceLastCalibration);
        data_dictionary->Add(&tags::ExposuresOnDetectorSinceManufactured);
        data_dictionary->Add(&tags::ExposuresOnPlate);
        data_dictionary->Add(&tags::ExposureStatus);
        data_dictionary->Add(&tags::ExposureTime);
        data_dictionary->Add(&tags::ExposureTimeInms);
        data_dictionary->Add(&tags::ExposureTimeInuS);
        data_dictionary->Add(&tags::ExtendedCodeMeaning);
        data_dictionary->Add(&tags::ExtendedCodeValue);
        data_dictionary->Add(&tags::ExtendedDepthOfField);
        data_dictionary->Add(&tags::ExternalContourEntryPoint);
        data_dictionary->Add(&tags::FacetSequence);
        data_dictionary->Add(&tags::FailedAttributesSequence);
        data_dictionary->Add(&tags::FailedSOPInstanceUIDList);
        data_dictionary->Add(&tags::FailedSOPSequence);
        data_dictionary->Add(&tags::FailureAttributes);
        data_dictionary->Add(&tags::FailureReason);
        data_dictionary->Add(&tags::FalseNegativesEstimate);
        data_dictionary->Add(&tags::FalseNegativesEstimateFlag);
        data_dictionary->Add(&tags::FalseNegativesQuantity);
        data_dictionary->Add(&tags::FalsePositivesEstimate);
        data_dictionary->Add(&tags::FalsePositivesEstimateFlag);
        data_dictionary->Add(&tags::FalsePositivesQuantity);
        data_dictionary->Add(&tags::FiducialDescription);
        data_dictionary->Add(&tags::FiducialIdentifier);
        data_dictionary->Add(&tags::FiducialIdentifierCodeSequence);
        data_dictionary->Add(&tags::FiducialSequence);
        data_dictionary->Add(&tags::FiducialSetSequence);
        data_dictionary->Add(&tags::FiducialsPropertyCategoryCodeSequence);
        data_dictionary->Add(&tags::FiducialUID);
        data_dictionary->Add(&tags::FieldOfViewDescription);
        data_dictionary->Add(&tags::FieldOfViewDimensions);
        data_dictionary->Add(&tags::FieldOfViewDimensionsInFloat);
        data_dictionary->Add(&tags::FieldOfViewHorizontalFlip);
        data_dictionary->Add(&tags::FieldOfViewOrigin);
        data_dictionary->Add(&tags::FieldOfViewRotation);
        data_dictionary->Add(&tags::FieldOfViewSequence);
        data_dictionary->Add(&tags::FieldOfViewShape);
        data_dictionary->Add(&tags::FileMetaInformationGroupLength);
        data_dictionary->Add(&tags::FileMetaInformationVersion);
        data_dictionary->Add(&tags::FileSetConsistencyFlag);
        data_dictionary->Add(&tags::FileSetDescriptorFileID);
        data_dictionary->Add(&tags::FileSetID);
        data_dictionary->Add(&tags::FillerOrderNumberImagingServiceRequest);
        data_dictionary->Add(&tags::FillerOrderNumberImagingServiceRequestRetired);
        data_dictionary->Add(&tags::FillerOrderNumberProcedure);
        data_dictionary->Add(&tags::FillMode);
        data_dictionary->Add(&tags::FillPattern);
        data_dictionary->Add(&tags::FillStyleSequence);
        data_dictionary->Add(&tags::FilmBoxContentSequence);
        data_dictionary->Add(&tags::FilmConsumptionSequence);
        data_dictionary->Add(&tags::FilmDestination);
        data_dictionary->Add(&tags::FilmOrientation);
        data_dictionary->Add(&tags::FilmSessionLabel);
        data_dictionary->Add(&tags::FilmSizeID);
        data_dictionary->Add(&tags::FilterBeamPathLengthMaximum);
        data_dictionary->Add(&tags::FilterBeamPathLengthMinimum);
        data_dictionary->Add(&tags::FilterByAttributePresence);
        data_dictionary->Add(&tags::FilterByCategory);
        data_dictionary->Add(&tags::FilterByOperator);
        data_dictionary->Add(&tags::FilterHighFrequency);
        data_dictionary->Add(&tags::FilterLowFrequency);
        data_dictionary->Add(&tags::FilterMaterial);
        data_dictionary->Add(&tags::FilterMaterialUsedInGainCalibration);
        data_dictionary->Add(&tags::FilterOperationsSequence);
        data_dictionary->Add(&tags::FilterThicknessMaximum);
        data_dictionary->Add(&tags::FilterThicknessMinimum);
        data_dictionary->Add(&tags::FilterThicknessUsedInGainCalibration);
        data_dictionary->Add(&tags::FilterType);
        data_dictionary->Add(&tags::FinalCumulativeMetersetWeight);
        data_dictionary->Add(&tags::FinalCumulativeTimeWeight);
        data_dictionary->Add(&tags::FindingsFlagTrial);
        data_dictionary->Add(&tags::FindingsGroupRecordingDateTrial);
        data_dictionary->Add(&tags::FindingsGroupRecordingTimeTrial);
        data_dictionary->Add(&tags::FindingsGroupUIDTrial);
        data_dictionary->Add(&tags::FindingsSequenceTrial);
        data_dictionary->Add(&tags::FindingsSourceCategoryCodeSequenceTrial);
        data_dictionary->Add(&tags::FiniteVolume);
        data_dictionary->Add(&tags::FirstALineLocation);
        data_dictionary->Add(&tags::FirstOrderPhaseCorrection);
        data_dictionary->Add(&tags::FirstOrderPhaseCorrectionAngle);
        data_dictionary->Add(&tags::FirstTreatmentDate);
        data_dictionary->Add(&tags::FixationCheckedQuantity);
        data_dictionary->Add(&tags::FixationDeviceDescription);
        data_dictionary->Add(&tags::FixationDeviceLabel);
        data_dictionary->Add(&tags::FixationDevicePitchAngle);
        data_dictionary->Add(&tags::FixationDevicePosition);
        data_dictionary->Add(&tags::FixationDeviceRollAngle);
        data_dictionary->Add(&tags::FixationDeviceSequence);
        data_dictionary->Add(&tags::FixationDeviceType);
        data_dictionary->Add(&tags::FixationEye);
        data_dictionary->Add(&tags::FixationLightAzimuthalAngle);
        data_dictionary->Add(&tags::FixationLightAzimuthalAngleTolerance);
        data_dictionary->Add(&tags::FixationLightPolarAngle);
        data_dictionary->Add(&tags::FixationLightPolarAngleTolerance);
        data_dictionary->Add(&tags::FixationMethodCodeSequence);
        data_dictionary->Add(&tags::FixationMonitoringCodeSequence);
        data_dictionary->Add(&tags::FixationSequence);
        data_dictionary->Add(&tags::FlatKeratometricAxisSequence);
        data_dictionary->Add(&tags::FlipAngle);
        data_dictionary->Add(&tags::FloatingPointValue);
        data_dictionary->Add(&tags::FloatingPointValues);
        data_dictionary->Add(&tags::FloatPixelData);
        data_dictionary->Add(&tags::FloatPixelPaddingRangeLimit);
        data_dictionary->Add(&tags::FloatPixelPaddingValue);
        data_dictionary->Add(&tags::FlowCompensation);
        data_dictionary->Add(&tags::FlowCompensationDirection);
        data_dictionary->Add(&tags::FluenceDataScale);
        data_dictionary->Add(&tags::FluenceDataSource);
        data_dictionary->Add(&tags::FluenceMapSequence);
        data_dictionary->Add(&tags::FluenceMode);
        data_dictionary->Add(&tags::FluenceModeID);
        data_dictionary->Add(&tags::FluoroscopyFlag);
        data_dictionary->Add(&tags::FocalDistance);
        data_dictionary->Add(&tags::FocalSpots);
        data_dictionary->Add(&tags::FocusDepth);
        data_dictionary->Add(&tags::FocusMethod);
        data_dictionary->Add(&tags::FontName);
        data_dictionary->Add(&tags::FontNameType);
        data_dictionary->Add(&tags::FovealPointNormativeDataFlag);
        data_dictionary->Add(&tags::FovealPointProbabilityValue);
        data_dictionary->Add(&tags::FovealSensitivity);
        data_dictionary->Add(&tags::FovealSensitivityMeasured);
        data_dictionary->Add(&tags::FractionalChannelDisplayScale);
        data_dictionary->Add(&tags::FractionGroupDescription);
        data_dictionary->Add(&tags::FractionGroupNumber);
        data_dictionary->Add(&tags::FractionGroupSequence);
        data_dictionary->Add(&tags::FractionGroupSummarySequence);
        data_dictionary->Add(&tags::FractionGroupType);
        data_dictionary->Add(&tags::FractionNumber);
        data_dictionary->Add(&tags::FractionPattern);
        data_dictionary->Add(&tags::FractionStatusSummarySequence);
        data_dictionary->Add(&tags::FrameAcquisitionDateTime);
        data_dictionary->Add(&tags::FrameAcquisitionDuration);
        data_dictionary->Add(&tags::FrameAcquisitionNumber);
        data_dictionary->Add(&tags::FrameAcquisitionSequence);
        data_dictionary->Add(&tags::FrameAnatomySequence);
        data_dictionary->Add(&tags::FrameComments);
        data_dictionary->Add(&tags::FrameContentSequence);
        data_dictionary->Add(&tags::FrameDelay);
        data_dictionary->Add(&tags::FrameDetectorParametersSequence);
        data_dictionary->Add(&tags::FrameDimensionPointer);
        data_dictionary->Add(&tags::FrameDisplaySequence);
        data_dictionary->Add(&tags::FrameDisplayShutterSequence);
        data_dictionary->Add(&tags::FrameExtractionSequence);
        data_dictionary->Add(&tags::FrameIncrementPointer);
        data_dictionary->Add(&tags::FrameLabel);
        data_dictionary->Add(&tags::FrameLabelVector);
        data_dictionary->Add(&tags::FrameLaterality);
        data_dictionary->Add(&tags::FrameNumbersOfInterest);
        data_dictionary->Add(&tags::FrameOfInterestDescription);
        data_dictionary->Add(&tags::FrameOfInterestType);
        data_dictionary->Add(&tags::FrameOfReferenceRelationshipSequence);
        data_dictionary->Add(&tags::FrameOfReferenceToDisplayedCoordinateSystemTransformationMatrix);
        data_dictionary->Add(&tags::FrameOfReferenceTransformationComment);
        data_dictionary->Add(&tags::FrameOfReferenceTransformationMatrix);
        data_dictionary->Add(&tags::FrameOfReferenceTransformationMatrixType);
        data_dictionary->Add(&tags::FrameOfReferenceTransformationType);
        data_dictionary->Add(&tags::FrameOfReferenceUID);
        data_dictionary->Add(&tags::FramePixelDataPropertiesSequence);
        data_dictionary->Add(&tags::FramePixelShiftSequence);
        data_dictionary->Add(&tags::FramePrimaryAngleVector);
        data_dictionary->Add(&tags::FrameReferenceDateTime);
        data_dictionary->Add(&tags::FrameReferenceTime);
        data_dictionary->Add(&tags::FrameSecondaryAngleVector);
        data_dictionary->Add(&tags::FrameTime);
        data_dictionary->Add(&tags::FrameTimeVector);
        data_dictionary->Add(&tags::FrameType);
        data_dictionary->Add(&tags::FrameVOILUTSequence);
        data_dictionary->Add(&tags::FrequencyCorrection);
        data_dictionary->Add(&tags::FunctionalGroupPointer);
        data_dictionary->Add(&tags::FunctionalGroupPrivateCreator);
        data_dictionary->Add(&tags::FunctionalMRSequence);
        data_dictionary->Add(&tags::FunctionalSettlingPhaseFramesPresent);
        data_dictionary->Add(&tags::FunctionalSyncPulse);
        data_dictionary->Add(&tags::GainCorrectionReferenceSequence);
        data_dictionary->Add(&tags::GammaValue);
        data_dictionary->Add(&tags::GantryAngle);
        data_dictionary->Add(&tags::GantryAngleTolerance);
        data_dictionary->Add(&tags::GantryDetectorSlew);
        data_dictionary->Add(&tags::GantryDetectorTilt);
        data_dictionary->Add(&tags::GantryID);
        data_dictionary->Add(&tags::GantryMotionCorrected);
        data_dictionary->Add(&tags::GantryPitchAngle);
        data_dictionary->Add(&tags::GantryPitchAngleTolerance);
        data_dictionary->Add(&tags::GantryPitchRotationDirection);
        data_dictionary->Add(&tags::GantryRotationDirection);
        data_dictionary->Add(&tags::GantryType);
        data_dictionary->Add(&tags::GapLength);
        data_dictionary->Add(&tags::GatedInformationSequence);
        data_dictionary->Add(&tags::GateSettingsSequence);
        data_dictionary->Add(&tags::GateThreshold);
        data_dictionary->Add(&tags::GeneralAccessoryDescription);
        data_dictionary->Add(&tags::GeneralAccessoryID);
        data_dictionary->Add(&tags::GeneralAccessoryNumber);
        data_dictionary->Add(&tags::GeneralAccessorySequence);
        data_dictionary->Add(&tags::GeneralAccessoryType);
        data_dictionary->Add(&tags::GeneralizedDefectCorrectedSensitivityDeviationFlag);
        data_dictionary->Add(&tags::GeneralizedDefectCorrectedSensitivityDeviationProbabilityValue);
        data_dictionary->Add(&tags::GeneralizedDefectCorrectedSensitivityDeviationValue);
        data_dictionary->Add(&tags::GeneralizedDefectSensitivityDeviationAlgorithmSequence);
        data_dictionary->Add(&tags::GeneralMachineVerificationSequence);
        data_dictionary->Add(&tags::GeneralPurposePerformedProcedureStepStatus);
        data_dictionary->Add(&tags::GeneralPurposeScheduledProcedureStepPriority);
        data_dictionary->Add(&tags::GeneralPurposeScheduledProcedureStepStatus);
        data_dictionary->Add(&tags::GeneratorID);
        data_dictionary->Add(&tags::GeneratorPower);
        data_dictionary->Add(&tags::GeneticModificationsCodeSequence);
        data_dictionary->Add(&tags::GeneticModificationsDescription);
        data_dictionary->Add(&tags::GeneticModificationsNomenclature);
        data_dictionary->Add(&tags::GeneticModificationsSequence);
        data_dictionary->Add(&tags::GeometricalProperties);
        data_dictionary->Add(&tags::GeometricMaximumDistortion);
        data_dictionary->Add(&tags::GeometryForDisplay);
        data_dictionary->Add(&tags::GeometryOfKSpaceTraversal);
        data_dictionary->Add(&tags::GlobalCrop);
        data_dictionary->Add(&tags::GlobalCroppingSpecificationIndex);
        data_dictionary->Add(&tags::GlobalDeviationFromNormal);
        data_dictionary->Add(&tags::GlobalDeviationProbability);
        data_dictionary->Add(&tags::GlobalDeviationProbabilityNormalsFlag);
        data_dictionary->Add(&tags::GlobalDeviationProbabilitySequence);
        data_dictionary->Add(&tags::GradientEchoTrainLength);
        data_dictionary->Add(&tags::GradientOutput);
        data_dictionary->Add(&tags::GradientOutputType);
        data_dictionary->Add(&tags::GraphicAnnotationSequence);
        data_dictionary->Add(&tags::GraphicAnnotationUnits);
        data_dictionary->Add(&tags::GraphicCoordinatesDataSequence);
        data_dictionary->Add(&tags::GraphicData);
        data_dictionary->Add(&tags::GraphicDimensions);
        data_dictionary->Add(&tags::GraphicFilled);
        data_dictionary->Add(&tags::GraphicGroupDescription);
        data_dictionary->Add(&tags::GraphicGroupID);
        data_dictionary->Add(&tags::GraphicGroupLabel);
        data_dictionary->Add(&tags::GraphicGroupSequence);
        data_dictionary->Add(&tags::GraphicLayer);
        data_dictionary->Add(&tags::GraphicLayerDescription);
        data_dictionary->Add(&tags::GraphicLayerOrder);
        data_dictionary->Add(&tags::GraphicLayerRecommendedDisplayCIELabValue);
        data_dictionary->Add(&tags::GraphicLayerRecommendedDisplayGrayscaleValue);
        data_dictionary->Add(&tags::GraphicLayerRecommendedDisplayRGBValue);
        data_dictionary->Add(&tags::GraphicLayerSequence);
        data_dictionary->Add(&tags::GraphicObjectSequence);
        data_dictionary->Add(&tags::GraphicType);
        data_dictionary->Add(&tags::GrayLookupTableData);
        data_dictionary->Add(&tags::GrayLookupTableDescriptor);
        data_dictionary->Add(&tags::GrayScale);
        data_dictionary->Add(&tags::GreenPaletteColorLookupTableData);
        data_dictionary->Add(&tags::GreenPaletteColorLookupTableDescriptor);
        data_dictionary->Add(&tags::Grid);
        data_dictionary->Add(&tags::GridAbsorbingMaterial);
        data_dictionary->Add(&tags::GridAspectRatio);
        data_dictionary->Add(&tags::GridDimensions);
        data_dictionary->Add(&tags::GridFocalDistance);
        data_dictionary->Add(&tags::GridFrameOffsetVector);
        data_dictionary->Add(&tags::GridID);
        data_dictionary->Add(&tags::GridPeriod);
        data_dictionary->Add(&tags::GridPitch);
        data_dictionary->Add(&tags::GridResolution);
        data_dictionary->Add(&tags::GridSpacingMaterial);
        data_dictionary->Add(&tags::GridThickness);
        data_dictionary->Add(&tags::GroupOfPatientsIdentificationSequence);
        data_dictionary->Add(&tags::HalfValueLayer);
        data_dictionary->Add(&tags::HangingProtocolCreationDateTime);
        data_dictionary->Add(&tags::HangingProtocolCreator);
        data_dictionary->Add(&tags::HangingProtocolDefinitionSequence);
        data_dictionary->Add(&tags::HangingProtocolDescription);
        data_dictionary->Add(&tags::HangingProtocolLevel);
        data_dictionary->Add(&tags::HangingProtocolName);
        data_dictionary->Add(&tags::HangingProtocolUserGroupName);
        data_dictionary->Add(&tags::HangingProtocolUserIdentificationCodeSequence);
        data_dictionary->Add(&tags::HardcopyCreationDeviceID);
        data_dictionary->Add(&tags::HardcopyDeviceManufacturer);
        data_dictionary->Add(&tags::HardcopyDeviceManufacturerModelName);
        data_dictionary->Add(&tags::HardcopyDeviceSoftwareVersion);
        data_dictionary->Add(&tags::HeadFixationAngle);
        data_dictionary->Add(&tags::HeadFixationAngleTolerance);
        data_dictionary->Add(&tags::HeartRate);
        data_dictionary->Add(&tags::HighBit);
        data_dictionary->Add(&tags::HighDoseTechniqueType);
        data_dictionary->Add(&tags::HighEnergyDetectors);
        data_dictionary->Add(&tags::HighRRValue);
        data_dictionary->Add(&tags::HistogramBinWidth);
        data_dictionary->Add(&tags::HistogramData);
        data_dictionary->Add(&tags::HistogramExplanation);
        data_dictionary->Add(&tags::HistogramFirstBinValue);
        data_dictionary->Add(&tags::HistogramLastBinValue);
        data_dictionary->Add(&tags::HistogramNumberOfBins);
        data_dictionary->Add(&tags::HistogramSequence);
        data_dictionary->Add(&tags::HL7DocumentEffectiveTime);
        data_dictionary->Add(&tags::HL7DocumentTypeCodeSequence);
        data_dictionary->Add(&tags::HL7InstanceIdentifier);
        data_dictionary->Add(&tags::HL7StructuredDocumentReferenceSequence);
        data_dictionary->Add(&tags::HomeCommunityID);
        data_dictionary->Add(&tags::HorizontalAlignment);
        data_dictionary->Add(&tags::HorizontalFieldOfView);
        data_dictionary->Add(&tags::HorizontalOffsetOfSensor);
        data_dictionary->Add(&tags::HorizontalPrismBase);
        data_dictionary->Add(&tags::HorizontalPrismPower);
        data_dictionary->Add(&tags::HPGLContourPenNumber);
        data_dictionary->Add(&tags::HPGLDocument);
        data_dictionary->Add(&tags::HPGLDocumentID);
        data_dictionary->Add(&tags::HPGLDocumentLabel);
        data_dictionary->Add(&tags::HPGLDocumentScaling);
        data_dictionary->Add(&tags::HPGLDocumentSequence);
        data_dictionary->Add(&tags::HPGLPenDescription);
        data_dictionary->Add(&tags::HPGLPenLabel);
        data_dictionary->Add(&tags::HPGLPenNumber);
        data_dictionary->Add(&tags::HPGLPenSequence);
        data_dictionary->Add(&tags::HuffmanTableSize);
        data_dictionary->Add(&tags::HuffmanTableTriplet);
        data_dictionary->Add(&tags::HumanPerformerCodeSequence);
        data_dictionary->Add(&tags::HumanPerformerName);
        data_dictionary->Add(&tags::HumanPerformerOrganization);
        data_dictionary->Add(&tags::ICCProfile);
        data_dictionary->Add(&tags::IconImageSequence);
        data_dictionary->Add(&tags::IdenticalDocumentsSequence);
        data_dictionary->Add(&tags::IdentificationDescriptionTrial);
        data_dictionary->Add(&tags::IdentifierCodeSequenceTrial);
        data_dictionary->Add(&tags::IdentifierTypeCode);
        data_dictionary->Add(&tags::IdentifyingComments);
        data_dictionary->Add(&tags::IdentifyingPrivateElements);
        data_dictionary->Add(&tags::Illumination);
        data_dictionary->Add(&tags::IlluminationBandwidth);
        data_dictionary->Add(&tags::IlluminationColorCodeSequence);
        data_dictionary->Add(&tags::IlluminationPower);
        data_dictionary->Add(&tags::IlluminationTypeCodeSequence);
        data_dictionary->Add(&tags::IlluminationWaveLength);
        data_dictionary->Add(&tags::IlluminatorTypeCodeSequence);
        data_dictionary->Add(&tags::ImageAndFluoroscopyAreaDoseProduct);
        data_dictionary->Add(&tags::ImageBoxContentSequence);
        data_dictionary->Add(&tags::ImageBoxesSequence);
        data_dictionary->Add(&tags::ImageBoxLargeScrollAmount);
        data_dictionary->Add(&tags::ImageBoxLargeScrollType);
        data_dictionary->Add(&tags::ImageBoxLayoutType);
        data_dictionary->Add(&tags::ImageBoxNumber);
        data_dictionary->Add(&tags::ImageBoxOverlapPriority);
        data_dictionary->Add(&tags::ImageBoxPosition);
        data_dictionary->Add(&tags::ImageBoxPresentationLUTFlag);
        data_dictionary->Add(&tags::ImageBoxScrollDirection);
        data_dictionary->Add(&tags::ImageBoxSmallScrollAmount);
        data_dictionary->Add(&tags::ImageBoxSmallScrollType);
        data_dictionary->Add(&tags::ImageBoxSynchronizationSequence);
        data_dictionary->Add(&tags::ImageBoxTileHorizontalDimension);
        data_dictionary->Add(&tags::ImageBoxTileVerticalDimension);
        data_dictionary->Add(&tags::ImageCenterPointCoordinatesSequence);
        data_dictionary->Add(&tags::ImageComments);
        data_dictionary->Add(&tags::ImageDataLocation);
        data_dictionary->Add(&tags::ImageDataTypeSequence);
        data_dictionary->Add(&tags::ImageDimensions);
        data_dictionary->Add(&tags::ImageDisplayFormat);
        data_dictionary->Add(&tags::ImagedNucleus);
        data_dictionary->Add(&tags::ImagedVolumeDepth);
        data_dictionary->Add(&tags::ImagedVolumeHeight);
        data_dictionary->Add(&tags::ImagedVolumeWidth);
        data_dictionary->Add(&tags::ImageFilter);
        data_dictionary->Add(&tags::ImageFilterDescription);
        data_dictionary->Add(&tags::ImageFormat);
        data_dictionary->Add(&tags::ImageFrameOrigin);
        data_dictionary->Add(&tags::ImageGeometryType);
        data_dictionary->Add(&tags::ImageHorizontalFlip);
        data_dictionary->Add(&tags::ImageID);
        data_dictionary->Add(&tags::ImageIndex);
        data_dictionary->Add(&tags::ImageLaterality);
        data_dictionary->Add(&tags::ImageLocation);
        data_dictionary->Add(&tags::ImageOrientation);
        data_dictionary->Add(&tags::ImageOrientationPatient);
        data_dictionary->Add(&tags::ImageOrientationSlide);
        data_dictionary->Add(&tags::ImageOrientationVolume);
        data_dictionary->Add(&tags::ImageOverlayBoxContentSequence);
        data_dictionary->Add(&tags::ImageOverlayFlag);
        data_dictionary->Add(&tags::ImagePathFilterPassBand);
        data_dictionary->Add(&tags::ImagePathFilterPassThroughWavelength);
        data_dictionary->Add(&tags::ImagePathFilterTypeStackCodeSequence);
        data_dictionary->Add(&tags::ImagePlanePixelSpacing);
        data_dictionary->Add(&tags::ImagePosition);
        data_dictionary->Add(&tags::ImagePositionPatient);
        data_dictionary->Add(&tags::ImagePositionVolume);
        data_dictionary->Add(&tags::ImagePresentationComments);
        data_dictionary->Add(&tags::ImageProcessingApplied);
        data_dictionary->Add(&tags::ImageQualityIndicatorMaterial);
        data_dictionary->Add(&tags::ImageQualityIndicatorSize);
        data_dictionary->Add(&tags::ImageQualityIndicatorType);
        data_dictionary->Add(&tags::ImageRotation);
        data_dictionary->Add(&tags::ImageRotationRetired);
        data_dictionary->Add(&tags::ImagerPixelSpacing);
        data_dictionary->Add(&tags::ImageScaleRepresentation);
        data_dictionary->Add(&tags::ImageSetLabel);
        data_dictionary->Add(&tags::ImageSetNumber);
        data_dictionary->Add(&tags::ImageSetSelectorCategory);
        data_dictionary->Add(&tags::ImageSetSelectorSequence);
        data_dictionary->Add(&tags::ImageSetSelectorUsageFlag);
        data_dictionary->Add(&tags::ImageSetsSequence);
        data_dictionary->Add(&tags::ImagesInAcquisition);
        data_dictionary->Add(&tags::ImagesInSeries);
        data_dictionary->Add(&tags::ImagesInStudy);
        data_dictionary->Add(&tags::ImageToEquipmentMappingMatrix);
        data_dictionary->Add(&tags::ImageTransformationMatrix);
        data_dictionary->Add(&tags::ImageTranslationVector);
        data_dictionary->Add(&tags::ImageTriggerDelay);
        data_dictionary->Add(&tags::ImageType);
        data_dictionary->Add(&tags::ImageVolumeGeometry);
        data_dictionary->Add(&tags::ImagingDeviceSpecificAcquisitionParameters);
        data_dictionary->Add(&tags::ImagingFrequency);
        data_dictionary->Add(&tags::ImagingServiceRequestComments);
        data_dictionary->Add(&tags::ImplantAssemblyTemplateIssuer);
        data_dictionary->Add(&tags::ImplantAssemblyTemplateName);
        data_dictionary->Add(&tags::ImplantAssemblyTemplateTargetAnatomySequence);
        data_dictionary->Add(&tags::ImplantAssemblyTemplateType);
        data_dictionary->Add(&tags::ImplantAssemblyTemplateVersion);
        data_dictionary->Add(&tags::ImplantName);
        data_dictionary->Add(&tags::ImplantPartNumber);
        data_dictionary->Add(&tags::ImplantRegulatoryDisapprovalCodeSequence);
        data_dictionary->Add(&tags::ImplantSize);
        data_dictionary->Add(&tags::ImplantTargetAnatomySequence);
        data_dictionary->Add(&tags::ImplantTemplate3DModelSurfaceNumber);
        data_dictionary->Add(&tags::ImplantTemplateGroupDescription);
        data_dictionary->Add(&tags::ImplantTemplateGroupIssuer);
        data_dictionary->Add(&tags::ImplantTemplateGroupMemberID);
        data_dictionary->Add(&tags::ImplantTemplateGroupMemberMatching2DCoordinatesSequence);
        data_dictionary->Add(&tags::ImplantTemplateGroupMembersSequence);
        data_dictionary->Add(&tags::ImplantTemplateGroupName);
        data_dictionary->Add(&tags::ImplantTemplateGroupTargetAnatomySequence);
        data_dictionary->Add(&tags::ImplantTemplateGroupVariationDimensionName);
        data_dictionary->Add(&tags::ImplantTemplateGroupVariationDimensionRank);
        data_dictionary->Add(&tags::ImplantTemplateGroupVariationDimensionRankSequence);
        data_dictionary->Add(&tags::ImplantTemplateGroupVariationDimensionSequence);
        data_dictionary->Add(&tags::ImplantTemplateGroupVersion);
        data_dictionary->Add(&tags::ImplantTemplateVersion);
        data_dictionary->Add(&tags::ImplantType);
        data_dictionary->Add(&tags::ImplantTypeCodeSequence);
        data_dictionary->Add(&tags::ImplementationClassUID);
        data_dictionary->Add(&tags::ImplementationVersionName);
        data_dictionary->Add(&tags::Impressions);
        data_dictionary->Add(&tags::InboundArrivalType);
        data_dictionary->Add(&tags::IncidentAngle);
        data_dictionary->Add(&tags::IncludeDisplayApplication);
        data_dictionary->Add(&tags::IncludeNonDICOMObjects);
        data_dictionary->Add(&tags::InConcatenationNumber);
        data_dictionary->Add(&tags::InConcatenationTotalNumber);
        data_dictionary->Add(&tags::IndexNormalsFlag);
        data_dictionary->Add(&tags::IndexProbability);
        data_dictionary->Add(&tags::IndexProbabilitySequence);
        data_dictionary->Add(&tags::IndicationDescription);
        data_dictionary->Add(&tags::IndicationDisposition);
        data_dictionary->Add(&tags::IndicationLabel);
        data_dictionary->Add(&tags::IndicationNumber);
        data_dictionary->Add(&tags::IndicationPhysicalPropertySequence);
        data_dictionary->Add(&tags::IndicationROISequence);
        data_dictionary->Add(&tags::IndicationSequence);
        data_dictionary->Add(&tags::IndicationType);
        data_dictionary->Add(&tags::InformationFromManufacturerSequence);
        data_dictionary->Add(&tags::InformationIssueDateTime);
        data_dictionary->Add(&tags::InformationSummary);
        data_dictionary->Add(&tags::InitialCineRunState);
        data_dictionary->Add(&tags::InnerDiameter);
        data_dictionary->Add(&tags::InPlanePhaseEncodingDirection);
        data_dictionary->Add(&tags::InputAvailabilityFlag);
        data_dictionary->Add(&tags::InputInformationSequence);
        data_dictionary->Add(&tags::InputReadinessState);
        data_dictionary->Add(&tags::InputSequencePositionIndex);
        data_dictionary->Add(&tags::InspectionSelectionCriteria);
        data_dictionary->Add(&tags::InStackPositionNumber);
        data_dictionary->Add(&tags::InstanceAvailability);
        data_dictionary->Add(&tags::InstanceCoercionDateTime);
        data_dictionary->Add(&tags::InstanceCreationDate);
        data_dictionary->Add(&tags::InstanceCreationTime);
        data_dictionary->Add(&tags::InstanceCreatorUID);
        data_dictionary->Add(&tags::InstanceNumber);
        data_dictionary->Add(&tags::InstitutionAddress);
        data_dictionary->Add(&tags::InstitutionalDepartmentName);
        data_dictionary->Add(&tags::InstitutionCodeSequence);
        data_dictionary->Add(&tags::InstitutionName);
        data_dictionary->Add(&tags::InstructionDescription);
        data_dictionary->Add(&tags::InstructionIndex);
        data_dictionary->Add(&tags::InstructionPerformanceComment);
        data_dictionary->Add(&tags::InstructionPerformedDateTime);
        data_dictionary->Add(&tags::InstructionPerformedFlag);
        data_dictionary->Add(&tags::InstructionSequence);
        data_dictionary->Add(&tags::InstructionText);
        data_dictionary->Add(&tags::InsurancePlanIdentification);
        data_dictionary->Add(&tags::IntendedRecipientsOfResultsIdentificationSequence);
        data_dictionary->Add(&tags::IntensifierActiveDimensions);
        data_dictionary->Add(&tags::IntensifierActiveShape);
        data_dictionary->Add(&tags::IntensifierSize);
        data_dictionary->Add(&tags::InterMarkerDistance);
        data_dictionary->Add(&tags::IntermediatePupillaryDistance);
        data_dictionary->Add(&tags::InternalDetectorFrameTime);
        data_dictionary->Add(&tags::InternationalRouteSegment);
        data_dictionary->Add(&tags::InterpolationType);
        data_dictionary->Add(&tags::InterpretationApprovalDate);
        data_dictionary->Add(&tags::InterpretationApprovalTime);
        data_dictionary->Add(&tags::InterpretationApproverSequence);
        data_dictionary->Add(&tags::InterpretationAuthor);
        data_dictionary->Add(&tags::InterpretationDiagnosisCodeSequence);
        data_dictionary->Add(&tags::InterpretationDiagnosisDescription);
        data_dictionary->Add(&tags::InterpretationID);
        data_dictionary->Add(&tags::InterpretationIDIssuer);
        data_dictionary->Add(&tags::InterpretationRecordedDate);
        data_dictionary->Add(&tags::InterpretationRecordedTime);
        data_dictionary->Add(&tags::InterpretationRecorder);
        data_dictionary->Add(&tags::InterpretationStatusID);
        data_dictionary->Add(&tags::InterpretationText);
        data_dictionary->Add(&tags::InterpretationTranscriber);
        data_dictionary->Add(&tags::InterpretationTranscriptionDate);
        data_dictionary->Add(&tags::InterpretationTranscriptionTime);
        data_dictionary->Add(&tags::InterpretationTypeID);
        data_dictionary->Add(&tags::IntervalNumber);
        data_dictionary->Add(&tags::IntervalsAcquired);
        data_dictionary->Add(&tags::IntervalsRejected);
        data_dictionary->Add(&tags::InterventionDescription);
        data_dictionary->Add(&tags::InterventionDrugCodeSequence);
        data_dictionary->Add(&tags::InterventionDrugDose);
        data_dictionary->Add(&tags::InterventionDrugInformationSequence);
        data_dictionary->Add(&tags::InterventionDrugName);
        data_dictionary->Add(&tags::InterventionDrugStartTime);
        data_dictionary->Add(&tags::InterventionDrugStopTime);
        data_dictionary->Add(&tags::InterventionSequence);
        data_dictionary->Add(&tags::InterventionStatus);
        data_dictionary->Add(&tags::IntraocularLensCalculationsLeftEyeSequence);
        data_dictionary->Add(&tags::IntraocularLensCalculationsRightEyeSequence);
        data_dictionary->Add(&tags::IntraOcularPressure);
        data_dictionary->Add(&tags::IntravascularFrameContentSequence);
        data_dictionary->Add(&tags::IntravascularLongitudinalDistance);
        data_dictionary->Add(&tags::IntravascularOCTFrameContentSequence);
        data_dictionary->Add(&tags::IntravascularOCTFrameTypeSequence);
        data_dictionary->Add(&tags::InversionRecovery);
        data_dictionary->Add(&tags::InversionTime);
        data_dictionary->Add(&tags::InversionTimes);
        data_dictionary->Add(&tags::IOLFormulaCodeSequence);
        data_dictionary->Add(&tags::IOLFormulaDetail);
        data_dictionary->Add(&tags::IOLManufacturer);
        data_dictionary->Add(&tags::IOLPower);
        data_dictionary->Add(&tags::IOLPowerForExactEmmetropia);
        data_dictionary->Add(&tags::IOLPowerForExactTargetRefraction);
        data_dictionary->Add(&tags::IOLPowerSequence);
        data_dictionary->Add(&tags::IonBeamLimitingDeviceSequence);
        data_dictionary->Add(&tags::IonBeamSequence);
        data_dictionary->Add(&tags::IonBlockSequence);
        data_dictionary->Add(&tags::IonControlPointDeliverySequence);
        data_dictionary->Add(&tags::IonControlPointSequence);
        data_dictionary->Add(&tags::IonControlPointVerificationSequence);
        data_dictionary->Add(&tags::IonMachineVerificationSequence);
        data_dictionary->Add(&tags::IonRangeCompensatorSequence);
        data_dictionary->Add(&tags::IonToleranceTableSequence);
        data_dictionary->Add(&tags::IonWedgePositionSequence);
        data_dictionary->Add(&tags::IonWedgeSequence);
        data_dictionary->Add(&tags::IrradiationEventIdentificationSequence);
        data_dictionary->Add(&tags::IrradiationEventUID);
        data_dictionary->Add(&tags::IsocenterPosition);
        data_dictionary->Add(&tags::IsocenterReferenceSystemSequence);
        data_dictionary->Add(&tags::IsocenterToBeamLimitingDeviceDistance);
        data_dictionary->Add(&tags::IsocenterToBlockTrayDistance);
        data_dictionary->Add(&tags::IsocenterToCompensatorDistances);
        data_dictionary->Add(&tags::IsocenterToCompensatorTrayDistance);
        data_dictionary->Add(&tags::IsocenterToLateralSpreadingDeviceDistance);
        data_dictionary->Add(&tags::IsocenterToRangeModulatorDistance);
        data_dictionary->Add(&tags::IsocenterToRangeShifterDistance);
        data_dictionary->Add(&tags::IsocenterToWedgeTrayDistance);
        data_dictionary->Add(&tags::IsotopeNumber);
        data_dictionary->Add(&tags::IssueDateOfImagingServiceRequest);
        data_dictionary->Add(&tags::IssuerOfAccessionNumberSequence);
        data_dictionary->Add(&tags::IssuerOfAdmissionID);
        data_dictionary->Add(&tags::IssuerOfAdmissionIDSequence);
        data_dictionary->Add(&tags::IssuerOfPatientID);
        data_dictionary->Add(&tags::IssuerOfPatientIDQualifiersSequence);
        data_dictionary->Add(&tags::IssuerOfServiceEpisodeID);
        data_dictionary->Add(&tags::IssuerOfServiceEpisodeIDSequence);
        data_dictionary->Add(&tags::IssuerOfTheContainerIdentifierSequence);
        data_dictionary->Add(&tags::IssuerOfTheSpecimenIdentifierSequence);
        data_dictionary->Add(&tags::IssueTimeOfImagingServiceRequest);
        data_dictionary->Add(&tags::Italic);
        data_dictionary->Add(&tags::ItemNumber);
        data_dictionary->Add(&tags::IterativeReconstructionMethod);
        data_dictionary->Add(&tags::ItineraryID);
        data_dictionary->Add(&tags::ItineraryIDAssigningAuthority);
        data_dictionary->Add(&tags::ItineraryIDType);
        data_dictionary->Add(&tags::IVUSAcquisition);
        data_dictionary->Add(&tags::IVUSGatedRate);
        data_dictionary->Add(&tags::IVUSPullbackRate);
        data_dictionary->Add(&tags::IVUSPullbackStartFrameNumber);
        data_dictionary->Add(&tags::IVUSPullbackStopFrameNumber);
        data_dictionary->Add(&tags::KeratoconusPredictionIndex);
        data_dictionary->Add(&tags::KeratometerIndex);
        data_dictionary->Add(&tags::KeratometricAxis);
        data_dictionary->Add(&tags::KeratometricPower);
        data_dictionary->Add(&tags::KeratometryLeftEyeSequence);
        data_dictionary->Add(&tags::KeratometryMeasurementTypeCodeSequence);
        data_dictionary->Add(&tags::KeratometryRightEyeSequence);
        data_dictionary->Add(&tags::KSpaceFiltering);
        data_dictionary->Add(&tags::KVP);
        data_dictionary->Add(&tags::KVUsedInGainCalibration);
        data_dictionary->Add(&tags::LabelStyleSelection);
        data_dictionary->Add(&tags::LabelText);
        data_dictionary->Add(&tags::LabelUsingInformationExtractedFromInstances);
        data_dictionary->Add(&tags::LanguageCodeSequence);
        data_dictionary->Add(&tags::LanguageCodeSequenceTrial);
        data_dictionary->Add(&tags::LargeBluePaletteColorLookupTableData);
        data_dictionary->Add(&tags::LargeBluePaletteColorLookupTableDescriptor);
        data_dictionary->Add(&tags::LargeGreenPaletteColorLookupTableData);
        data_dictionary->Add(&tags::LargeGreenPaletteColorLookupTableDescriptor);
        data_dictionary->Add(&tags::LargePaletteColorLookupTableUID);
        data_dictionary->Add(&tags::LargeRedPaletteColorLookupTableData);
        data_dictionary->Add(&tags::LargeRedPaletteColorLookupTableDescriptor);
        data_dictionary->Add(&tags::LargestImagePixelValue);
        data_dictionary->Add(&tags::LargestImagePixelValueInPlane);
        data_dictionary->Add(&tags::LargestMonochromePixelValue);
        data_dictionary->Add(&tags::LargestPixelValueInSeries);
        data_dictionary->Add(&tags::LargestValidPixelValue);
        data_dictionary->Add(&tags::LastMenstrualDate);
        data_dictionary->Add(&tags::Laterality);
        data_dictionary->Add(&tags::LateralSpreadingDeviceDescription);
        data_dictionary->Add(&tags::LateralSpreadingDeviceID);
        data_dictionary->Add(&tags::LateralSpreadingDeviceNumber);
        data_dictionary->Add(&tags::LateralSpreadingDeviceSequence);
        data_dictionary->Add(&tags::LateralSpreadingDeviceSetting);
        data_dictionary->Add(&tags::LateralSpreadingDeviceSettingsSequence);
        data_dictionary->Add(&tags::LateralSpreadingDeviceType);
        data_dictionary->Add(&tags::LateralSpreadingDeviceWaterEquivalentThickness);
        data_dictionary->Add(&tags::LeafJawPositions);
        data_dictionary->Add(&tags::LeafPositionBoundaries);
        data_dictionary->Add(&tags::LeftImageSequence);
        data_dictionary->Add(&tags::LeftLensSequence);
        data_dictionary->Add(&tags::LengthToEnd);
        data_dictionary->Add(&tags::LensConstantDescription);
        data_dictionary->Add(&tags::LensConstantSequence);
        data_dictionary->Add(&tags::LensDescription);
        data_dictionary->Add(&tags::LensesCodeSequence);
        data_dictionary->Add(&tags::LensSegmentType);
        data_dictionary->Add(&tags::LensStatusCodeSequence);
        data_dictionary->Add(&tags::LensStatusDescription);
        data_dictionary->Add(&tags::LensThickness);
        data_dictionary->Add(&tags::LensThicknessSequence);
        data_dictionary->Add(&tags::LesionNumber);
        data_dictionary->Add(&tags::LightDirection);
        data_dictionary->Add(&tags::LightPathFilterPassBand);
        data_dictionary->Add(&tags::LightPathFilterPassThroughWavelength);
        data_dictionary->Add(&tags::LightPathFilterTypeStackCodeSequence);
        data_dictionary->Add(&tags::LINACEnergy);
        data_dictionary->Add(&tags::LINACOutput);
        data_dictionary->Add(&tags::LineDashingStyle);
        data_dictionary->Add(&tags::LinePattern);
        data_dictionary->Add(&tags::LineSequence);
        data_dictionary->Add(&tags::LineStyleSequence);
        data_dictionary->Add(&tags::LineThickness);
        data_dictionary->Add(&tags::ListOfMIMETypes);
        data_dictionary->Add(&tags::LocalDeviationProbabilityNormalsFlag);
        data_dictionary->Add(&tags::LocalizedDeviationFromNormal);
        data_dictionary->Add(&tags::LocalizedDeviationProbability);
        data_dictionary->Add(&tags::LocalizedDeviationProbabilitySequence);
        data_dictionary->Add(&tags::LocalizingCursorPosition);
        data_dictionary->Add(&tags::LocalNamespaceEntityID);
        data_dictionary->Add(&tags::Location);
        data_dictionary->Add(&tags::LocationOfMeasuredBeamDiameter);
        data_dictionary->Add(&tags::LongCodeValue);
        data_dictionary->Add(&tags::LongEdgePointIndexList);
        data_dictionary->Add(&tags::LongitudinalTemporalEventType);
        data_dictionary->Add(&tags::LongitudinalTemporalInformationModified);
        data_dictionary->Add(&tags::LongitudinalTemporalOffsetFromEvent);
        data_dictionary->Add(&tags::LongPrimitivePointIndexList);
        data_dictionary->Add(&tags::LongTrianglePointIndexList);
        data_dictionary->Add(&tags::LongVertexPointIndexList);
        data_dictionary->Add(&tags::LossyImageCompression);
        data_dictionary->Add(&tags::LossyImageCompressionMethod);
        data_dictionary->Add(&tags::LossyImageCompressionRatio);
        data_dictionary->Add(&tags::LossyImageCompressionRetired);
        data_dictionary->Add(&tags::LowEnergyDetectors);
        data_dictionary->Add(&tags::LowRRValue);
        data_dictionary->Add(&tags::LuminanceCharacteristicsID);
        data_dictionary->Add(&tags::LuminanceResponseDescription);
        data_dictionary->Add(&tags::LuminanceResponseSequence);
        data_dictionary->Add(&tags::LuminanceResultSequence);
        data_dictionary->Add(&tags::LuminanceUniformityResultSequence);
        data_dictionary->Add(&tags::LuminanceValue);
        data_dictionary->Add(&tags::LUTData);
        data_dictionary->Add(&tags::LUTDescriptor);
        data_dictionary->Add(&tags::LUTExplanation);
        data_dictionary->Add(&tags::LUTFrameRange);
        data_dictionary->Add(&tags::LUTFunction);
        data_dictionary->Add(&tags::LUTLabel);
        data_dictionary->Add(&tags::LUTNumber);
        data_dictionary->Add(&tags::MAC);
        data_dictionary->Add(&tags::MACAlgorithm);
        data_dictionary->Add(&tags::MACCalculationTransferSyntaxUID);
        data_dictionary->Add(&tags::MACIDNumber);
        data_dictionary->Add(&tags::MACParametersSequence);
        data_dictionary->Add(&tags::MagneticFieldStrength);
        data_dictionary->Add(&tags::MagnetizationTransfer);
        data_dictionary->Add(&tags::MagnificationType);
        data_dictionary->Add(&tags::MagnifyToNumberOfColumns);
        data_dictionary->Add(&tags::MainLobeAngle);
        data_dictionary->Add(&tags::MainRoofAngle);
        data_dictionary->Add(&tags::MajorTicksSequence);
        data_dictionary->Add(&tags::MandatoryComponentType);
        data_dictionary->Add(&tags::Manifold);
        data_dictionary->Add(&tags::ManipulatedImage);
        data_dictionary->Add(&tags::Manufacturer);
        data_dictionary->Add(&tags::ManufacturerModelName);
        data_dictionary->Add(&tags::ManufacturerRelatedModelGroup);
        data_dictionary->Add(&tags::MappedPixelValue);
        data_dictionary->Add(&tags::MappingResource);
        data_dictionary->Add(&tags::MappingResourceIdentificationSequence);
        data_dictionary->Add(&tags::MappingResourceName);
        data_dictionary->Add(&tags::MappingResourceUID);
        data_dictionary->Add(&tags::MaskFrameNumbers);
        data_dictionary->Add(&tags::MaskingImage);
        data_dictionary->Add(&tags::MaskOperation);
        data_dictionary->Add(&tags::MaskOperationExplanation);
        data_dictionary->Add(&tags::MaskPointers);
        data_dictionary->Add(&tags::MaskSelectionMode);
        data_dictionary->Add(&tags::MaskSubPixelShift);
        data_dictionary->Add(&tags::MaskSubtractionSequence);
        data_dictionary->Add(&tags::MaskVisibilityPercentage);
        data_dictionary->Add(&tags::Mass);
        data_dictionary->Add(&tags::MaterialGrade);
        data_dictionary->Add(&tags::MaterialID);
        data_dictionary->Add(&tags::MaterialIsolationDiameter);
        data_dictionary->Add(&tags::MaterialNotes);
        data_dictionary->Add(&tags::MaterialPipeDiameter);
        data_dictionary->Add(&tags::MaterialPropertiesDescription);
        data_dictionary->Add(&tags::MaterialPropertiesFileFormatRetired);
        data_dictionary->Add(&tags::MaterialsCodeSequence);
        data_dictionary->Add(&tags::MaterialThickness);
        data_dictionary->Add(&tags::MatingFeatureDegreeOfFreedomSequence);
        data_dictionary->Add(&tags::MatingFeatureID);
        data_dictionary->Add(&tags::MatingFeatureSequence);
        data_dictionary->Add(&tags::MatingFeatureSetID);
        data_dictionary->Add(&tags::MatingFeatureSetLabel);
        data_dictionary->Add(&tags::MatingFeatureSetsSequence);
        data_dictionary->Add(&tags::MatrixRegistrationSequence);
        data_dictionary->Add(&tags::MatrixSequence);
        data_dictionary->Add(&tags::MAUsedInGainCalibration);
        data_dictionary->Add(&tags::MaxDensity);
        data_dictionary->Add(&tags::MaximumAcrossScanDistortion);
        data_dictionary->Add(&tags::MaximumAlongScanDistortion);
        data_dictionary->Add(&tags::MaximumCollatedFilms);
        data_dictionary->Add(&tags::MaximumCoordinateValue);
        data_dictionary->Add(&tags::MaximumCornealCurvature);
        data_dictionary->Add(&tags::MaximumCornealCurvatureLocation);
        data_dictionary->Add(&tags::MaximumCornealCurvatureSequence);
        data_dictionary->Add(&tags::MaximumDepthDistortion);
        data_dictionary->Add(&tags::MaximumFractionalValue);
        data_dictionary->Add(&tags::MaximumMemoryAllocation);
        data_dictionary->Add(&tags::MaximumPointDistance);
        data_dictionary->Add(&tags::MaximumStimulusLuminance);
        data_dictionary->Add(&tags::MaximumStoredValueMapped);
        data_dictionary->Add(&tags::MeanPointDistance);
        data_dictionary->Add(&tags::MeasuredAPDimension);
        data_dictionary->Add(&tags::MeasuredBandwidth);
        data_dictionary->Add(&tags::MeasuredBeamDimensionA);
        data_dictionary->Add(&tags::MeasuredBeamDimensionB);
        data_dictionary->Add(&tags::MeasuredCenterFrequency);
        data_dictionary->Add(&tags::MeasuredCharacteristics);
        data_dictionary->Add(&tags::MeasuredDoseDescription);
        data_dictionary->Add(&tags::MeasuredDoseReferenceNumber);
        data_dictionary->Add(&tags::MeasuredDoseReferenceSequence);
        data_dictionary->Add(&tags::MeasuredDoseType);
        data_dictionary->Add(&tags::MeasuredDoseValue);
        data_dictionary->Add(&tags::MeasuredLateralDimension);
        data_dictionary->Add(&tags::MeasuredValueSequence);
        data_dictionary->Add(&tags::MeasurementAutomationTrial);
        data_dictionary->Add(&tags::MeasurementEquipmentSequence);
        data_dictionary->Add(&tags::MeasurementEquipmentType);
        data_dictionary->Add(&tags::MeasurementFunctions);
        data_dictionary->Add(&tags::MeasurementLaterality);
        data_dictionary->Add(&tags::MeasurementPatternCodeSequence);
        data_dictionary->Add(&tags::MeasurementPrecisionDescriptionTrial);
        data_dictionary->Add(&tags::MeasurementsSequence);
        data_dictionary->Add(&tags::MeasurementUnitsCodeSequence);
        data_dictionary->Add(&tags::MeasurementValuesSequence);
        data_dictionary->Add(&tags::MeasuringUnitsSequence);
        data_dictionary->Add(&tags::MechanicalIndex);
        data_dictionary->Add(&tags::MediaDisposition);
        data_dictionary->Add(&tags::MediaInstalledSequence);
        data_dictionary->Add(&tags::MediaStorageSOPClassUID);
        data_dictionary->Add(&tags::MediaStorageSOPInstanceUID);
        data_dictionary->Add(&tags::MedicalAlerts);
        data_dictionary->Add(&tags::MedicalRecordLocator);
        data_dictionary->Add(&tags::MediumType);
        data_dictionary->Add(&tags::MemoryAllocation);
        data_dictionary->Add(&tags::MemoryBitDepth);
        data_dictionary->Add(&tags::MetaboliteMapCodeSequence);
        data_dictionary->Add(&tags::MetaboliteMapDescription);
        data_dictionary->Add(&tags::MetersetExposure);
        data_dictionary->Add(&tags::MetersetRate);
        data_dictionary->Add(&tags::MetersetRateDelivered);
        data_dictionary->Add(&tags::MetersetRateSet);
        data_dictionary->Add(&tags::MidSlabPosition);
        data_dictionary->Add(&tags::MilitaryRank);
        data_dictionary->Add(&tags::MIMETypeOfEncapsulatedDocument);
        data_dictionary->Add(&tags::MinDensity);
        data_dictionary->Add(&tags::MinimumCoordinateValue);
        data_dictionary->Add(&tags::MinimumKeratometricSequence);
        data_dictionary->Add(&tags::MinimumSensitivityValue);
        data_dictionary->Add(&tags::MinimumStoredValueMapped);
        data_dictionary->Add(&tags::ModalitiesInStudy);
        data_dictionary->Add(&tags::Modality);
        data_dictionary->Add(&tags::ModalityLUTSequence);
        data_dictionary->Add(&tags::ModalityLUTType);
        data_dictionary->Add(&tags::ModelMirroring);
        data_dictionary->Add(&tags::ModelModification);
        data_dictionary->Add(&tags::ModelSpecificationSequence);
        data_dictionary->Add(&tags::ModelUsageCodeSequence);
        data_dictionary->Add(&tags::ModeOfPercutaneousAccessSequence);
        data_dictionary->Add(&tags::ModifiableConstraintFlag);
        data_dictionary->Add(&tags::ModifiedAttributesSequence);
        data_dictionary->Add(&tags::ModifiedImageDate);
        data_dictionary->Add(&tags::ModifiedImageDescription);
        data_dictionary->Add(&tags::ModifiedImageID);
        data_dictionary->Add(&tags::ModifiedImageTime);
        data_dictionary->Add(&tags::ModifierCodeSequence);
        data_dictionary->Add(&tags::ModifyingDeviceID);
        data_dictionary->Add(&tags::ModifyingDeviceManufacturer);
        data_dictionary->Add(&tags::ModifyingSystem);
        data_dictionary->Add(&tags::ModulatedScanModeType);
        data_dictionary->Add(&tags::ModulationType);
        data_dictionary->Add(&tags::MostRecentTreatmentDate);
        data_dictionary->Add(&tags::MotionSynchronizationSequence);
        data_dictionary->Add(&tags::MPRSlabThickness);
        data_dictionary->Add(&tags::MPRThicknessType);
        data_dictionary->Add(&tags::MPRTopLeftHandCorner);
        data_dictionary->Add(&tags::MPRViewHeight);
        data_dictionary->Add(&tags::MPRViewHeightDirection);
        data_dictionary->Add(&tags::MPRViewWidth);
        data_dictionary->Add(&tags::MPRViewWidthDirection);
        data_dictionary->Add(&tags::MRAcquisitionFrequencyEncodingSteps);
        data_dictionary->Add(&tags::MRAcquisitionPhaseEncodingStepsInPlane);
        data_dictionary->Add(&tags::MRAcquisitionPhaseEncodingStepsOutOfPlane);
        data_dictionary->Add(&tags::MRAcquisitionType);
        data_dictionary->Add(&tags::MRArterialSpinLabelingSequence);
        data_dictionary->Add(&tags::MRAveragesSequence);
        data_dictionary->Add(&tags::MRDiffusionSequence);
        data_dictionary->Add(&tags::MRDRDirectoryRecordOffset);
        data_dictionary->Add(&tags::MREchoSequence);
        data_dictionary->Add(&tags::MRFOVGeometrySequence);
        data_dictionary->Add(&tags::MRImageFrameTypeSequence);
        data_dictionary->Add(&tags::MRImagingModifierSequence);
        data_dictionary->Add(&tags::MRMetaboliteMapSequence);
        data_dictionary->Add(&tags::MRModifierSequence);
        data_dictionary->Add(&tags::MRReceiveCoilSequence);
        data_dictionary->Add(&tags::MRSpatialSaturationSequence);
        data_dictionary->Add(&tags::MRSpectroscopyAcquisitionType);
        data_dictionary->Add(&tags::MRSpectroscopyFOVGeometrySequence);
        data_dictionary->Add(&tags::MRSpectroscopyFrameTypeSequence);
        data_dictionary->Add(&tags::MRTimingAndRelatedParametersSequence);
        data_dictionary->Add(&tags::MRTransmitCoilSequence);
        data_dictionary->Add(&tags::MRVelocityEncodingSequence);
        data_dictionary->Add(&tags::MultiCoilConfiguration);
        data_dictionary->Add(&tags::MultiCoilDefinitionSequence);
        data_dictionary->Add(&tags::MultiCoilElementName);
        data_dictionary->Add(&tags::MultiCoilElementUsed);
        data_dictionary->Add(&tags::MultiFramePresentationSequence);
        data_dictionary->Add(&tags::MultiFrameSourceSOPInstanceUID);
        data_dictionary->Add(&tags::MultiPlanarExcitation);
        data_dictionary->Add(&tags::MultiPlanarReconstructionStyle);
        data_dictionary->Add(&tags::MultipleComponentApprovalSequence);
        data_dictionary->Add(&tags::MultipleCopiesFlag);
        data_dictionary->Add(&tags::MultipleSpinEcho);
        data_dictionary->Add(&tags::MultiplexedAudioChannelsDescriptionCodeSequence);
        data_dictionary->Add(&tags::MultiplexGroupLabel);
        data_dictionary->Add(&tags::MultiplexGroupTimeOffset);
        data_dictionary->Add(&tags::MydriaticAgentCodeSequence);
        data_dictionary->Add(&tags::MydriaticAgentConcentration);
        data_dictionary->Add(&tags::MydriaticAgentConcentrationUnitsSequence);
        data_dictionary->Add(&tags::MydriaticAgentSequence);
        data_dictionary->Add(&tags::NameOfPhysiciansReadingStudy);
        data_dictionary->Add(&tags::NamesOfIntendedRecipientsOfResults);
        data_dictionary->Add(&tags::NavigationDisplaySet);
        data_dictionary->Add(&tags::NavigationIndicatorSequence);
        data_dictionary->Add(&tags::NearPupillaryDistance);
        data_dictionary->Add(&tags::NegativeCatchTrialsQuantity);
        data_dictionary->Add(&tags::NetworkID);
        data_dictionary->Add(&tags::NominalBeamAngle);
        data_dictionary->Add(&tags::NominalBeamEnergy);
        data_dictionary->Add(&tags::NominalBeamEnergyUnit);
        data_dictionary->Add(&tags::NominalCardiacTriggerDelayTime);
        data_dictionary->Add(&tags::NominalCardiacTriggerTimePriorToRPeak);
        data_dictionary->Add(&tags::NominalFrequency);
        data_dictionary->Add(&tags::NominalInterval);
        data_dictionary->Add(&tags::NominalPercentageOfCardiacPhase);
        data_dictionary->Add(&tags::NominalPercentageOfRespiratoryPhase);
        data_dictionary->Add(&tags::NominalPriorDose);
        data_dictionary->Add(&tags::NominalRangeModulatedRegionDepths);
        data_dictionary->Add(&tags::NominalRangeModulationFractions);
        data_dictionary->Add(&tags::NominalRespiratoryTriggerDelayTime);
        data_dictionary->Add(&tags::NominalScannedPixelSpacing);
        data_dictionary->Add(&tags::NominalScreenDefinitionSequence);
        data_dictionary->Add(&tags::NonDICOMOutputCodeSequence);
        data_dictionary->Add(&tags::NonidentifyingPrivateElements);
        data_dictionary->Add(&tags::NonUniformRadialSamplingCorrected);
        data_dictionary->Add(&tags::NormalizationFactorFormat);
        data_dictionary->Add(&tags::NormalizationPoint);
        data_dictionary->Add(&tags::NotchFilterBandwidth);
        data_dictionary->Add(&tags::NotchFilterFrequency);
        data_dictionary->Add(&tags::NotificationFromManufacturerSequence);
        data_dictionary->Add(&tags::NTPSourceAddress);
        data_dictionary->Add(&tags::NuclearMedicineSeriesType);
        data_dictionary->Add(&tags::NumberOfAlarmObjects);
        data_dictionary->Add(&tags::NumberOfAssessmentObservations);
        data_dictionary->Add(&tags::NumberOfAverages);
        data_dictionary->Add(&tags::NumberOfBeams);
        data_dictionary->Add(&tags::NumberOfBlocks);
        data_dictionary->Add(&tags::NumberOfBlockSlabItems);
        data_dictionary->Add(&tags::NumberOfBoli);
        data_dictionary->Add(&tags::NumberOfBrachyApplicationSetups);
        data_dictionary->Add(&tags::NumberofBscansPerFrame);
        data_dictionary->Add(&tags::NumberOfChannels);
        data_dictionary->Add(&tags::NumberOfCompensators);
        data_dictionary->Add(&tags::NumberOfContourPoints);
        data_dictionary->Add(&tags::NumberOfControlPoints);
        data_dictionary->Add(&tags::NumberOfCopies);
        data_dictionary->Add(&tags::NumberOfDetectors);
        data_dictionary->Add(&tags::NumberOfDisplaySubsystems);
        data_dictionary->Add(&tags::NumberOfElements);
        data_dictionary->Add(&tags::NumberOfEnergyWindows);
        data_dictionary->Add(&tags::NumberOfEventTimers);
        data_dictionary->Add(&tags::NumberOfFilms);
        data_dictionary->Add(&tags::NumberOfFocalPlanes);
        data_dictionary->Add(&tags::NumberOfFractionPatternDigitsPerDay);
        data_dictionary->Add(&tags::NumberOfFractionsDelivered);
        data_dictionary->Add(&tags::NumberOfFractionsPlanned);
        data_dictionary->Add(&tags::NumberOfFrames);
        data_dictionary->Add(&tags::NumberOfFramesInOverlay);
        data_dictionary->Add(&tags::NumberOfFramesInPhase);
        data_dictionary->Add(&tags::NumberOfFramesInRotation);
        data_dictionary->Add(&tags::NumberOfFramesIntegrated);
        data_dictionary->Add(&tags::NumberOfFramesUsedForIntegration);
        data_dictionary->Add(&tags::NumberOfGraphicPoints);
        data_dictionary->Add(&tags::NumberOfHorizontalPixels);
        data_dictionary->Add(&tags::NumberOfIterations);
        data_dictionary->Add(&tags::NumberOfKSpaceTrajectories);
        data_dictionary->Add(&tags::NumberOfLateralSpreadingDevices);
        data_dictionary->Add(&tags::NumberOfLeafJawPairs);
        data_dictionary->Add(&tags::NumberOfLuminancePoints);
        data_dictionary->Add(&tags::NumberOfMapPoints);
        data_dictionary->Add(&tags::NumberOfOpticalPaths);
        data_dictionary->Add(&tags::NumberOfPaddedALines);
        data_dictionary->Add(&tags::NumberOfPaintings);
        data_dictionary->Add(&tags::NumberOfPatientRelatedInstances);
        data_dictionary->Add(&tags::NumberOfPatientRelatedSeries);
        data_dictionary->Add(&tags::NumberOfPatientRelatedStudies);
        data_dictionary->Add(&tags::NumberOfPhaseEncodingSteps);
        data_dictionary->Add(&tags::NumberOfPhases);
        data_dictionary->Add(&tags::NumberOfPoints);
        data_dictionary->Add(&tags::NumberOfPriorsReferenced);
        data_dictionary->Add(&tags::NumberOfPulses);
        data_dictionary->Add(&tags::NumberOfRangeModulators);
        data_dictionary->Add(&tags::NumberOfRangeShifters);
        data_dictionary->Add(&tags::NumberOfReferences);
        data_dictionary->Add(&tags::NumberOfRotations);
        data_dictionary->Add(&tags::NumberOfRRIntervals);
        data_dictionary->Add(&tags::NumberOfSamples);
        data_dictionary->Add(&tags::NumberOfScanSpotPositions);
        data_dictionary->Add(&tags::NumberOfScreens);
        data_dictionary->Add(&tags::NumberOfSeriesRelatedInstances);
        data_dictionary->Add(&tags::NumberOfSlices);
        data_dictionary->Add(&tags::NumberOfStages);
        data_dictionary->Add(&tags::NumberOfStudyRelatedInstances);
        data_dictionary->Add(&tags::NumberOfStudyRelatedSeries);
        data_dictionary->Add(&tags::NumberOfSubsets);
        data_dictionary->Add(&tags::NumberOfSurfacePoints);
        data_dictionary->Add(&tags::NumberOfSurfaces);
        data_dictionary->Add(&tags::NumberOfTableBreakPoints);
        data_dictionary->Add(&tags::NumberOfTableEntries);
        data_dictionary->Add(&tags::NumberOfTables);
        data_dictionary->Add(&tags::NumberOfTemporalPositions);
        data_dictionary->Add(&tags::NumberOfTimeSlices);
        data_dictionary->Add(&tags::NumberOfTimeSlots);
        data_dictionary->Add(&tags::NumberOfTomosynthesisSourceImages);
        data_dictionary->Add(&tags::NumberOfTotalObjects);
        data_dictionary->Add(&tags::NumberOfTransformSteps);
        data_dictionary->Add(&tags::NumberOfTriggersInPhase);
        data_dictionary->Add(&tags::NumberOfVectors);
        data_dictionary->Add(&tags::NumberOfVerticalPixels);
        data_dictionary->Add(&tags::NumberOfViewsInStage);
        data_dictionary->Add(&tags::NumberOfVisualStimuli);
        data_dictionary->Add(&tags::NumberOfVolumetricCurvePoints);
        data_dictionary->Add(&tags::NumberOfWaveformChannels);
        data_dictionary->Add(&tags::NumberOfWaveformSamples);
        data_dictionary->Add(&tags::NumberOfWedges);
        data_dictionary->Add(&tags::NumberOfZeroFills);
        data_dictionary->Add(&tags::NumericValue);
        data_dictionary->Add(&tags::NumericValueQualifierCodeSequence);
        data_dictionary->Add(&tags::ObjectBinaryIdentifierTrial);
        data_dictionary->Add(&tags::ObjectDirectoryBinaryIdentifierTrial);
        data_dictionary->Add(&tags::ObjectiveLensNumericalAperture);
        data_dictionary->Add(&tags::ObjectiveLensPower);
        data_dictionary->Add(&tags::ObjectPixelSpacingInCenterOfBeam);
        data_dictionary->Add(&tags::ObjectThicknessSequence);
        data_dictionary->Add(&tags::ObliqueCroppingPlaneSequence);
        data_dictionary->Add(&tags::ObservationBasisCodeSequence);
        data_dictionary->Add(&tags::ObservationCategoryCodeSequenceTrial);
        data_dictionary->Add(&tags::ObservationDateTime);
        data_dictionary->Add(&tags::ObservationDateTrial);
        data_dictionary->Add(&tags::ObservationDescription);
        data_dictionary->Add(&tags::ObservationNumber);
        data_dictionary->Add(&tags::ObservationSignificance);
        data_dictionary->Add(&tags::ObservationSubjectClassTrial);
        data_dictionary->Add(&tags::ObservationSubjectContextFlagTrial);
        data_dictionary->Add(&tags::ObservationSubjectTypeCodeSequenceTrial);
        data_dictionary->Add(&tags::ObservationSubjectUIDTrial);
        data_dictionary->Add(&tags::ObservationTimeTrial);
        data_dictionary->Add(&tags::ObservationUID);
        data_dictionary->Add(&tags::ObserverContextFlagTrial);
        data_dictionary->Add(&tags::ObserverType);
        data_dictionary->Add(&tags::Occupation);
        data_dictionary->Add(&tags::OCTAcquisitionDomain);
        data_dictionary->Add(&tags::OCTBscanAnalysisAcquisitionParametersSequence);
        data_dictionary->Add(&tags::OCTFocalDistance);
        data_dictionary->Add(&tags::OCTOpticalCenterWavelength);
        data_dictionary->Add(&tags::OCTZOffsetApplied);
        data_dictionary->Add(&tags::OCTZOffsetCorrection);
        data_dictionary->Add(&tags::OffsetDirection);
        data_dictionary->Add(&tags::OffsetDistance);
        data_dictionary->Add(&tags::OffsetOfReferencedLowerLevelDirectoryEntity);
        data_dictionary->Add(&tags::OffsetOfTheFirstDirectoryRecordOfTheRootDirectoryEntity);
        data_dictionary->Add(&tags::OffsetOfTheLastDirectoryRecordOfTheRootDirectoryEntity);
        data_dictionary->Add(&tags::OffsetOfTheNextDirectoryRecord);
        data_dictionary->Add(&tags::OmittedApplicationSetupSequence);
        data_dictionary->Add(&tags::OmittedBeamTaskSequence);
        data_dictionary->Add(&tags::OmittedChannelSequence);
        data_dictionary->Add(&tags::OnAxisBackgroundAnatomicStructureCodeSequenceTrial);
        data_dictionary->Add(&tags::OOIOwnerCreationTime);
        data_dictionary->Add(&tags::OOIOwnerSequence);
        data_dictionary->Add(&tags::OOIOwnerType);
        data_dictionary->Add(&tags::OOISize);
        data_dictionary->Add(&tags::OOIType);
        data_dictionary->Add(&tags::OOITypeDescriptor);
        data_dictionary->Add(&tags::OperatingMode);
        data_dictionary->Add(&tags::OperatingModeSequence);
        data_dictionary->Add(&tags::OperatingModeType);
        data_dictionary->Add(&tags::OperatorIdentificationSequence);
        data_dictionary->Add(&tags::OperatorsName);
        data_dictionary->Add(&tags::OphthalmicAnatomicReferencePointXCoordinate);
        data_dictionary->Add(&tags::OphthalmicAnatomicReferencePointYCoordinate);
        data_dictionary->Add(&tags::OphthalmicAxialLength);
        data_dictionary->Add(&tags::OphthalmicAxialLengthAcquisitionMethodCodeSequence);
        data_dictionary->Add(&tags::OphthalmicAxialLengthDataSourceCodeSequence);
        data_dictionary->Add(&tags::OphthalmicAxialLengthDataSourceDescription);
        data_dictionary->Add(&tags::OphthalmicAxialLengthMeasurementModified);
        data_dictionary->Add(&tags::OphthalmicAxialLengthMeasurementsLengthSummationSequence);
        data_dictionary->Add(&tags::OphthalmicAxialLengthMeasurementsSegmentalLengthSequence);
        data_dictionary->Add(&tags::OphthalmicAxialLengthMeasurementsSegmentNameCodeSequence);
        data_dictionary->Add(&tags::OphthalmicAxialLengthMeasurementsSequence);
        data_dictionary->Add(&tags::OphthalmicAxialLengthMeasurementsTotalLengthSequence);
        data_dictionary->Add(&tags::OphthalmicAxialLengthMeasurementsType);
        data_dictionary->Add(&tags::OphthalmicAxialLengthMethod);
        data_dictionary->Add(&tags::OphthalmicAxialLengthQualityMetricSequence);
        data_dictionary->Add(&tags::OphthalmicAxialLengthQualityMetricTypeCodeSequence);
        data_dictionary->Add(&tags::OphthalmicAxialLengthQualityMetricTypeDescription);
        data_dictionary->Add(&tags::OphthalmicAxialLengthSelectionMethodCodeSequence);
        data_dictionary->Add(&tags::OphthalmicAxialLengthSequence);
        data_dictionary->Add(&tags::OphthalmicAxialLengthVelocity);
        data_dictionary->Add(&tags::OphthalmicAxialMeasurementsDeviceType);
        data_dictionary->Add(&tags::OphthalmicAxialMeasurementsLeftEyeSequence);
        data_dictionary->Add(&tags::OphthalmicAxialMeasurementsRightEyeSequence);
        data_dictionary->Add(&tags::OphthalmicEnFaceImageQualityRatingSequence);
        data_dictionary->Add(&tags::OphthalmicFOV);
        data_dictionary->Add(&tags::OphthalmicFrameLocationSequence);
        data_dictionary->Add(&tags::OphthalmicImageOrientation);
        data_dictionary->Add(&tags::OphthalmicImageTypeCodeSequence);
        data_dictionary->Add(&tags::OphthalmicImageTypeDescription);
        data_dictionary->Add(&tags::OphthalmicMappingDeviceType);
        data_dictionary->Add(&tags::OphthalmicPatientClinicalInformationLeftEyeSequence);
        data_dictionary->Add(&tags::OphthalmicPatientClinicalInformationRightEyeSequence);
        data_dictionary->Add(&tags::OphthalmicThicknessMappingNormalsSequence);
        data_dictionary->Add(&tags::OphthalmicThicknessMapQualityRatingSequence);
        data_dictionary->Add(&tags::OphthalmicThicknessMapQualityThresholdSequence);
        data_dictionary->Add(&tags::OphthalmicThicknessMapThresholdQualityRating);
        data_dictionary->Add(&tags::OphthalmicThicknessMapTypeCodeSequence);
        data_dictionary->Add(&tags::OphthalmicUltrasoundMethodCodeSequence);
        data_dictionary->Add(&tags::OphthalmicVolumetricPropertiesFlag);
        data_dictionary->Add(&tags::OpticalOphthalmicAxialLengthMeasurementsSequence);
        data_dictionary->Add(&tags::OpticalPathDescription);
        data_dictionary->Add(&tags::OpticalPathIdentificationSequence);
        data_dictionary->Add(&tags::OpticalPathIdentifier);
        data_dictionary->Add(&tags::OpticalPathSequence);
        data_dictionary->Add(&tags::OpticalSelectedOphthalmicAxialLengthSequence);
        data_dictionary->Add(&tags::OpticalTransmittance);
        data_dictionary->Add(&tags::Optotype);
        data_dictionary->Add(&tags::OptotypeDetailedDefinition);
        data_dictionary->Add(&tags::OptotypePresentation);
        data_dictionary->Add(&tags::OrderCallbackPhoneNumber);
        data_dictionary->Add(&tags::OrderCallbackTelecomInformation);
        data_dictionary->Add(&tags::OrderEnteredBy);
        data_dictionary->Add(&tags::OrderEntererLocation);
        data_dictionary->Add(&tags::OrderFillerIdentifierSequence);
        data_dictionary->Add(&tags::OrderPlacerIdentifierSequence);
        data_dictionary->Add(&tags::OrganAtRiskFullVolumeDose);
        data_dictionary->Add(&tags::OrganAtRiskLimitDose);
        data_dictionary->Add(&tags::OrganAtRiskMaximumDose);
        data_dictionary->Add(&tags::OrganAtRiskOverdoseVolumeFraction);
        data_dictionary->Add(&tags::OrganDose);
        data_dictionary->Add(&tags::OrganExposed);
        data_dictionary->Add(&tags::OrganizationalRoleCodeSequence);
        data_dictionary->Add(&tags::OriginalAttributesSequence);
        data_dictionary->Add(&tags::OriginalImageIdentification);
        data_dictionary->Add(&tags::OriginalImageIdentificationNomenclature);
        data_dictionary->Add(&tags::OriginalImageSequence);
        data_dictionary->Add(&tags::OriginalImplantAssemblyTemplateSequence);
        data_dictionary->Add(&tags::OriginalImplantTemplateSequence);
        data_dictionary->Add(&tags::OriginalSpecializedSOPClassUID);
        data_dictionary->Add(&tags::Originator);
        data_dictionary->Add(&tags::OtherApprovalStatus);
        data_dictionary->Add(&tags::OtherFailuresSequence);
        data_dictionary->Add(&tags::OtherMagnificationTypesAvailable);
        data_dictionary->Add(&tags::OtherMediaAvailableSequence);
        data_dictionary->Add(&tags::OtherPatientIDs);
        data_dictionary->Add(&tags::OtherPatientIDsSequence);
        data_dictionary->Add(&tags::OtherPatientNames);
        data_dictionary->Add(&tags::OtherPupillaryDistance);
        data_dictionary->Add(&tags::OtherSecondaryApprovalStatus);
        data_dictionary->Add(&tags::OtherSmoothingTypesAvailable);
        data_dictionary->Add(&tags::OtherStudyNumbers);
        data_dictionary->Add(&tags::OuterDiameter);
        data_dictionary->Add(&tags::OutputDestinationSequence);
        data_dictionary->Add(&tags::OutputInformationSequence);
        data_dictionary->Add(&tags::OutputPower);
        data_dictionary->Add(&tags::OverallTemplateSpatialTolerance);
        data_dictionary->Add(&tags::OverlayActivationLayer);
        data_dictionary->Add(&tags::OverlayBackgroundDensity);
        data_dictionary->Add(&tags::OverlayBitPosition);
        data_dictionary->Add(&tags::OverlayBitsAllocated);
        data_dictionary->Add(&tags::OverlayBitsForCodeWord);
        data_dictionary->Add(&tags::OverlayBitsGrouped);
        data_dictionary->Add(&tags::OverlayCodeLabel);
        data_dictionary->Add(&tags::OverlayCodeTableLocation);
        data_dictionary->Add(&tags::OverlayColumns);
        data_dictionary->Add(&tags::OverlayComments);
        data_dictionary->Add(&tags::OverlayCompressionCode);
        data_dictionary->Add(&tags::OverlayCompressionDescription);
        data_dictionary->Add(&tags::OverlayCompressionLabel);
        data_dictionary->Add(&tags::OverlayCompressionOriginator);
        data_dictionary->Add(&tags::OverlayCompressionStepPointers);
        data_dictionary->Add(&tags::OverlayData);
        data_dictionary->Add(&tags::OverlayDate);
        data_dictionary->Add(&tags::OverlayDescription);
        data_dictionary->Add(&tags::OverlayDescriptorBlue);
        data_dictionary->Add(&tags::OverlayDescriptorGray);
        data_dictionary->Add(&tags::OverlayDescriptorGreen);
        data_dictionary->Add(&tags::OverlayDescriptorRed);
        data_dictionary->Add(&tags::OverlayForegroundDensity);
        data_dictionary->Add(&tags::OverlayFormat);
        data_dictionary->Add(&tags::OverlayLabel);
        data_dictionary->Add(&tags::OverlayLocation);
        data_dictionary->Add(&tags::OverlayMagnificationType);
        data_dictionary->Add(&tags::OverlayMode);
        data_dictionary->Add(&tags::OverlayNumber);
        data_dictionary->Add(&tags::OverlayNumberOfTables);
        data_dictionary->Add(&tags::OverlayOrigin);
        data_dictionary->Add(&tags::OverlayOrImageMagnification);
        data_dictionary->Add(&tags::OverlayPixelDataSequence);
        data_dictionary->Add(&tags::OverlayPlaneOrigin);
        data_dictionary->Add(&tags::OverlayPlanes);
        data_dictionary->Add(&tags::OverlayRepeatInterval);
        data_dictionary->Add(&tags::OverlayRows);
        data_dictionary->Add(&tags::OverlaysBlue);
        data_dictionary->Add(&tags::OverlaysGray);
        data_dictionary->Add(&tags::OverlaysGreen);
        data_dictionary->Add(&tags::OverlaySmoothingType);
        data_dictionary->Add(&tags::OverlaysRed);
        data_dictionary->Add(&tags::OverlaySubtype);
        data_dictionary->Add(&tags::OverlayTime);
        data_dictionary->Add(&tags::OverlayType);
        data_dictionary->Add(&tags::OverriddenAttributesSequence);
        data_dictionary->Add(&tags::OverrideParameterPointer);
        data_dictionary->Add(&tags::OverrideReason);
        data_dictionary->Add(&tags::OverrideSequence);
        data_dictionary->Add(&tags::OversamplingPhase);
        data_dictionary->Add(&tags::OwnerID);
        data_dictionary->Add(&tags::PaddleDescription);
        data_dictionary->Add(&tags::PageNumberVector);
        data_dictionary->Add(&tags::PaletteColorLookupTableSequence);
        data_dictionary->Add(&tags::PaletteColorLookupTableUID);
        data_dictionary->Add(&tags::ParallelAcquisition);
        data_dictionary->Add(&tags::ParallelAcquisitionTechnique);
        data_dictionary->Add(&tags::ParallelReductionFactorInPlane);
        data_dictionary->Add(&tags::ParallelReductionFactorInPlaneRetired);
        data_dictionary->Add(&tags::ParallelReductionFactorOutOfPlane);
        data_dictionary->Add(&tags::ParallelReductionFactorSecondInPlane);
        data_dictionary->Add(&tags::ParameterItemIndex);
        data_dictionary->Add(&tags::ParameterPointer);
        data_dictionary->Add(&tags::ParameterSequencePointer);
        data_dictionary->Add(&tags::ParametersSpecificationSequence);
        data_dictionary->Add(&tags::ParameterValueNumber);
        data_dictionary->Add(&tags::ParametricMapFrameTypeSequence);
        data_dictionary->Add(&tags::PartialDataDisplayHandling);
        data_dictionary->Add(&tags::PartialFourier);
        data_dictionary->Add(&tags::PartialFourierDirection);
        data_dictionary->Add(&tags::PartialView);
        data_dictionary->Add(&tags::PartialViewCodeSequence);
        data_dictionary->Add(&tags::PartialViewDescription);
        data_dictionary->Add(&tags::ParticipantSequence);
        data_dictionary->Add(&tags::ParticipationDateTime);
        data_dictionary->Add(&tags::ParticipationType);
        data_dictionary->Add(&tags::PatientAdditionalPosition);
        data_dictionary->Add(&tags::PatientAddress);
        data_dictionary->Add(&tags::PatientAge);
        data_dictionary->Add(&tags::PatientAlternativeCalendar);
        data_dictionary->Add(&tags::PatientBirthDate);
        data_dictionary->Add(&tags::PatientBirthDateInAlternativeCalendar);
        data_dictionary->Add(&tags::PatientBirthName);
        data_dictionary->Add(&tags::PatientBirthTime);
        data_dictionary->Add(&tags::PatientBodyMassIndex);
        data_dictionary->Add(&tags::PatientBreedCodeSequence);
        data_dictionary->Add(&tags::PatientBreedDescription);
        data_dictionary->Add(&tags::PatientClinicalTrialParticipationSequence);
        data_dictionary->Add(&tags::PatientComments);
        data_dictionary->Add(&tags::PatientDeathDateInAlternativeCalendar);
        data_dictionary->Add(&tags::PatientEyeMovementCommandCodeSequence);
        data_dictionary->Add(&tags::PatientEyeMovementCommanded);
        data_dictionary->Add(&tags::PatientFrameOfReferenceSource);
        data_dictionary->Add(&tags::PatientGantryRelationshipCodeSequence);
        data_dictionary->Add(&tags::PatientID);
        data_dictionary->Add(&tags::PatientIdentityRemoved);
        data_dictionary->Add(&tags::PatientInstitutionResidence);
        data_dictionary->Add(&tags::PatientInsurancePlanCodeSequence);
        data_dictionary->Add(&tags::PatientMotherBirthName);
        data_dictionary->Add(&tags::PatientMotionCorrected);
        data_dictionary->Add(&tags::PatientName);
        data_dictionary->Add(&tags::PatientNotProperlyFixatedQuantity);
        data_dictionary->Add(&tags::PatientOrientation);
        data_dictionary->Add(&tags::PatientOrientationCodeSequence);
        data_dictionary->Add(&tags::PatientOrientationInFrameSequence);
        data_dictionary->Add(&tags::PatientOrientationModifierCodeSequence);
        data_dictionary->Add(&tags::PatientPhysiologicalStateCodeSequence);
        data_dictionary->Add(&tags::PatientPhysiologicalStateSequence);
        data_dictionary->Add(&tags::PatientPosition);
        data_dictionary->Add(&tags::PatientPositioningInstructionSequence);
        data_dictionary->Add(&tags::PatientPrimaryLanguageCodeSequence);
        data_dictionary->Add(&tags::PatientPrimaryLanguageModifierCodeSequence);
        data_dictionary->Add(&tags::PatientReliabilityIndicator);
        data_dictionary->Add(&tags::PatientReligiousPreference);
        data_dictionary->Add(&tags::PatientSetupLabel);
        data_dictionary->Add(&tags::PatientSetupNumber);
        data_dictionary->Add(&tags::PatientSetupSequence);
        data_dictionary->Add(&tags::PatientSex);
        data_dictionary->Add(&tags::PatientSexNeutered);
        data_dictionary->Add(&tags::PatientSize);
        data_dictionary->Add(&tags::PatientSizeCodeSequence);
        data_dictionary->Add(&tags::PatientSpeciesCodeSequence);
        data_dictionary->Add(&tags::PatientSpeciesDescription);
        data_dictionary->Add(&tags::PatientSpecificationSequence);
        data_dictionary->Add(&tags::PatientState);
        data_dictionary->Add(&tags::PatientSupportAccessoryCode);
        data_dictionary->Add(&tags::PatientSupportAdjustedAngle);
        data_dictionary->Add(&tags::PatientSupportAngle);
        data_dictionary->Add(&tags::PatientSupportAngleTolerance);
        data_dictionary->Add(&tags::PatientSupportID);
        data_dictionary->Add(&tags::PatientSupportRotationDirection);
        data_dictionary->Add(&tags::PatientSupportType);
        data_dictionary->Add(&tags::PatientTelecomInformation);
        data_dictionary->Add(&tags::PatientTelephoneNumbers);
        data_dictionary->Add(&tags::PatientTransportArrangements);
        data_dictionary->Add(&tags::PatientWeight);
        data_dictionary->Add(&tags::PatternOffColorCIELabValue);
        data_dictionary->Add(&tags::PatternOffOpacity);
        data_dictionary->Add(&tags::PatternOnColorCIELabValue);
        data_dictionary->Add(&tags::PatternOnOpacity);
        data_dictionary->Add(&tags::PauseBetweenFrames);
        data_dictionary->Add(&tags::PercentPhaseFieldOfView);
        data_dictionary->Add(&tags::PercentSampling);
        data_dictionary->Add(&tags::PerformedLocation);
        data_dictionary->Add(&tags::PerformedProcedureCodeSequence);
        data_dictionary->Add(&tags::PerformedProcedureStepDescription);
        data_dictionary->Add(&tags::PerformedProcedureStepDiscontinuationReasonCodeSequence);
        data_dictionary->Add(&tags::PerformedProcedureStepEndDate);
        data_dictionary->Add(&tags::PerformedProcedureStepEndDateTime);
        data_dictionary->Add(&tags::PerformedProcedureStepEndTime);
        data_dictionary->Add(&tags::PerformedProcedureStepID);
        data_dictionary->Add(&tags::PerformedProcedureStepStartDate);
        data_dictionary->Add(&tags::PerformedProcedureStepStartDateTime);
        data_dictionary->Add(&tags::PerformedProcedureStepStartTime);
        data_dictionary->Add(&tags::PerformedProcedureStepStatus);
        data_dictionary->Add(&tags::PerformedProcedureTypeDescription);
        data_dictionary->Add(&tags::PerformedProcessingApplicationsCodeSequence);
        data_dictionary->Add(&tags::PerformedProcessingParametersSequence);
        data_dictionary->Add(&tags::PerformedProtocolCodeSequence);
        data_dictionary->Add(&tags::PerformedProtocolType);
        data_dictionary->Add(&tags::PerformedSeriesSequence);
        data_dictionary->Add(&tags::PerformedStationAETitle);
        data_dictionary->Add(&tags::PerformedStationClassCodeSequence);
        data_dictionary->Add(&tags::PerformedStationGeographicLocationCodeSequence);
        data_dictionary->Add(&tags::PerformedStationName);
        data_dictionary->Add(&tags::PerformedStationNameCodeSequence);
        data_dictionary->Add(&tags::PerformedWorkitemCodeSequence);
        data_dictionary->Add(&tags::PerformingPhysicianIdentificationSequence);
        data_dictionary->Add(&tags::PerformingPhysicianName);
        data_dictionary->Add(&tags::PerFrameFunctionalGroupsSequence);
        data_dictionary->Add(&tags::PerimeterTable);
        data_dictionary->Add(&tags::PerimeterValue);
        data_dictionary->Add(&tags::PerProjectionAcquisitionSequence);
        data_dictionary->Add(&tags::PersonAddress);
        data_dictionary->Add(&tags::PersonIdentificationCodeSequence);
        data_dictionary->Add(&tags::PersonName);
        data_dictionary->Add(&tags::PersonTelecomInformation);
        data_dictionary->Add(&tags::PersonTelephoneNumbers);
        data_dictionary->Add(&tags::PertinentDocumentsSequence);
        data_dictionary->Add(&tags::PertinentOtherEvidenceSequence);
        data_dictionary->Add(&tags::PertinentResourcesSequence);
        data_dictionary->Add(&tags::PETDetectorMotionDetailsSequence);
        data_dictionary->Add(&tags::PETFrameAcquisitionSequence);
        data_dictionary->Add(&tags::PETFrameCorrectionFactorsSequence);
        data_dictionary->Add(&tags::PETFrameTypeSequence);
        data_dictionary->Add(&tags::PETPositionSequence);
        data_dictionary->Add(&tags::PETReconstructionSequence);
        data_dictionary->Add(&tags::PETTableDynamicsSequence);
        data_dictionary->Add(&tags::PhantomType);
        data_dictionary->Add(&tags::PhaseContrast);
        data_dictionary->Add(&tags::PhaseDelay);
        data_dictionary->Add(&tags::PhaseDescription);
        data_dictionary->Add(&tags::PhaseInformationSequence);
        data_dictionary->Add(&tags::PhaseNumber);
        data_dictionary->Add(&tags::PhaseVector);
        data_dictionary->Add(&tags::PhosphorType);
        data_dictionary->Add(&tags::PhotometricInterpretation);
        data_dictionary->Add(&tags::PhototimerSetting);
        data_dictionary->Add(&tags::PhysicalDeltaX);
        data_dictionary->Add(&tags::PhysicalDeltaY);
        data_dictionary->Add(&tags::PhysicalDetectorSize);
        data_dictionary->Add(&tags::PhysicalUnitsXDirection);
        data_dictionary->Add(&tags::PhysicalUnitsYDirection);
        data_dictionary->Add(&tags::PhysicianApprovingInterpretation);
        data_dictionary->Add(&tags::PhysiciansOfRecord);
        data_dictionary->Add(&tags::PhysiciansOfRecordIdentificationSequence);
        data_dictionary->Add(&tags::PhysiciansReadingStudyIdentificationSequence);
        data_dictionary->Add(&tags::PixelAspectRatio);
        data_dictionary->Add(&tags::PixelBandwidth);
        data_dictionary->Add(&tags::PixelComponentDataType);
        data_dictionary->Add(&tags::PixelComponentMask);
        data_dictionary->Add(&tags::PixelComponentOrganization);
        data_dictionary->Add(&tags::PixelComponentPhysicalUnits);
        data_dictionary->Add(&tags::PixelComponentRangeStart);
        data_dictionary->Add(&tags::PixelComponentRangeStop);
        data_dictionary->Add(&tags::PixelCoordinatesSetTrial);
        data_dictionary->Add(&tags::PixelData);
        data_dictionary->Add(&tags::PixelDataAreaOriginRelativeToFOV);
        data_dictionary->Add(&tags::PixelDataAreaRotationAngleRelativeToFOV);
        data_dictionary->Add(&tags::PixelDataProviderURL);
        data_dictionary->Add(&tags::PixelIntensityRelationship);
        data_dictionary->Add(&tags::PixelIntensityRelationshipLUTSequence);
        data_dictionary->Add(&tags::PixelIntensityRelationshipSign);
        data_dictionary->Add(&tags::PixelMeasuresSequence);
        data_dictionary->Add(&tags::PixelOriginInterpretation);
        data_dictionary->Add(&tags::PixelPaddingRangeLimit);
        data_dictionary->Add(&tags::PixelPaddingValue);
        data_dictionary->Add(&tags::PixelPresentation);
        data_dictionary->Add(&tags::PixelRepresentation);
        data_dictionary->Add(&tags::PixelShiftFrameRange);
        data_dictionary->Add(&tags::PixelShiftSequence);
        data_dictionary->Add(&tags::PixelSpacing);
        data_dictionary->Add(&tags::PixelSpacingCalibrationDescription);
        data_dictionary->Add(&tags::PixelSpacingCalibrationType);
        data_dictionary->Add(&tags::PixelSpacingSequence);
        data_dictionary->Add(&tags::PixelValueMappingCodeSequence);
        data_dictionary->Add(&tags::PixelValueMappingExplanation);
        data_dictionary->Add(&tags::PixelValueMappingToCodedConceptSequence);
        data_dictionary->Add(&tags::PixelValueTransformationSequence);
        data_dictionary->Add(&tags::PlacerOrderNumberImagingServiceRequest);
        data_dictionary->Add(&tags::PlacerOrderNumberImagingServiceRequestRetired);
        data_dictionary->Add(&tags::PlacerOrderNumberProcedure);
        data_dictionary->Add(&tags::PlanarConfiguration);
        data_dictionary->Add(&tags::Plane);
        data_dictionary->Add(&tags::PlaneIdentification);
        data_dictionary->Add(&tags::PlaneNormal);
        data_dictionary->Add(&tags::PlaneOrientationSequence);
        data_dictionary->Add(&tags::PlaneOrientationVolumeSequence);
        data_dictionary->Add(&tags::PlanePositionSequence);
        data_dictionary->Add(&tags::PlanePositionSlideSequence);
        data_dictionary->Add(&tags::PlanePositionVolumeSequence);
        data_dictionary->Add(&tags::Planes);
        data_dictionary->Add(&tags::PlanesInAcquisition);
        data_dictionary->Add(&tags::PlanIntent);
        data_dictionary->Add(&tags::PlannedVerificationImageSequence);
        data_dictionary->Add(&tags::PlanningLandmarkDescription);
        data_dictionary->Add(&tags::PlanningLandmarkID);
        data_dictionary->Add(&tags::PlanningLandmarkIdentificationCodeSequence);
        data_dictionary->Add(&tags::PlanningLandmarkLineSequence);
        data_dictionary->Add(&tags::PlanningLandmarkPlaneSequence);
        data_dictionary->Add(&tags::PlanningLandmarkPointSequence);
        data_dictionary->Add(&tags::PlateID);
        data_dictionary->Add(&tags::PlateType);
        data_dictionary->Add(&tags::PointCoordinatesData);
        data_dictionary->Add(&tags::PointPositionAccuracy);
        data_dictionary->Add(&tags::PointsBoundingBoxCoordinates);
        data_dictionary->Add(&tags::Polarity);
        data_dictionary->Add(&tags::PositionerIsocenterDetectorRotationAngle);
        data_dictionary->Add(&tags::PositionerIsocenterPrimaryAngle);
        data_dictionary->Add(&tags::PositionerIsocenterSecondaryAngle);
        data_dictionary->Add(&tags::PositionerMotion);
        data_dictionary->Add(&tags::PositionerPositionSequence);
        data_dictionary->Add(&tags::PositionerPrimaryAngle);
        data_dictionary->Add(&tags::PositionerPrimaryAngleDirection);
        data_dictionary->Add(&tags::PositionerPrimaryAngleIncrement);
        data_dictionary->Add(&tags::PositionerSecondaryAngle);
        data_dictionary->Add(&tags::PositionerSecondaryAngleIncrement);
        data_dictionary->Add(&tags::PositionerType);
        data_dictionary->Add(&tags::PositioningLandmarkSequence);
        data_dictionary->Add(&tags::PositioningMethodCodeSequence);
        data_dictionary->Add(&tags::PositionMeasuringDeviceUsed);
        data_dictionary->Add(&tags::PositionOfIsocenterProjection);
        data_dictionary->Add(&tags::PositionReferenceIndicator);
        data_dictionary->Add(&tags::PositiveCatchTrialsQuantity);
        data_dictionary->Add(&tags::PostDeformationMatrixRegistrationSequence);
        data_dictionary->Add(&tags::PostprocessingFunction);
        data_dictionary->Add(&tags::PotentialDiagnosticTasks);
        data_dictionary->Add(&tags::PotentialReasonsForProcedure);
        data_dictionary->Add(&tags::PotentialReasonsForProcedureCodeSequence);
        data_dictionary->Add(&tags::PotentialRequestedProcedureCodeSequence);
        data_dictionary->Add(&tags::PotentialScheduledProtocolCodeSequence);
        data_dictionary->Add(&tags::PotentialThreatObjectID);
        data_dictionary->Add(&tags::PRCSToRCSOrientation);
        data_dictionary->Add(&tags::PreAmplifierEquipmentSequence);
        data_dictionary->Add(&tags::PreAmplifierNotes);
        data_dictionary->Add(&tags::PreAmplifierSettingsSequence);
        data_dictionary->Add(&tags::PredecessorDocumentsSequence);
        data_dictionary->Add(&tags::PredecessorProtocolSequence);
        data_dictionary->Add(&tags::PredecessorStructureSetSequence);
        data_dictionary->Add(&tags::PreDeformationMatrixRegistrationSequence);
        data_dictionary->Add(&tags::PredictedRefractiveError);
        data_dictionary->Add(&tags::PredictorColumns);
        data_dictionary->Add(&tags::PredictorConstants);
        data_dictionary->Add(&tags::PredictorRows);
        data_dictionary->Add(&tags::PreferredPlaybackSequencing);
        data_dictionary->Add(&tags::PregnancyStatus);
        data_dictionary->Add(&tags::PreliminaryFlag);
        data_dictionary->Add(&tags::PreMedication);
        data_dictionary->Add(&tags::PrescriptionDescription);
        data_dictionary->Add(&tags::PresentationAnimationStyle);
        data_dictionary->Add(&tags::PresentationCreationDate);
        data_dictionary->Add(&tags::PresentationCreationTime);
        data_dictionary->Add(&tags::PresentationDisplayCollectionUID);
        data_dictionary->Add(&tags::PresentationGroupNumber);
        data_dictionary->Add(&tags::PresentationInputType);
        data_dictionary->Add(&tags::PresentationIntentType);
        data_dictionary->Add(&tags::PresentationLUTContentSequence);
        data_dictionary->Add(&tags::PresentationLUTFlag);
        data_dictionary->Add(&tags::PresentationLUTSequence);
        data_dictionary->Add(&tags::PresentationLUTShape);
        data_dictionary->Add(&tags::PresentationPixelAspectRatio);
        data_dictionary->Add(&tags::PresentationPixelMagnificationRatio);
        data_dictionary->Add(&tags::PresentationPixelSpacing);
        data_dictionary->Add(&tags::PresentationSequenceCollectionUID);
        data_dictionary->Add(&tags::PresentationSequencePositionIndex);
        data_dictionary->Add(&tags::PresentationSizeMode);
        data_dictionary->Add(&tags::PresentationStateClassificationComponentSequence);
        data_dictionary->Add(&tags::PresentationStateCompositorComponentSequence);
        data_dictionary->Add(&tags::PresentedVisualStimuliDataFlag);
        data_dictionary->Add(&tags::PreserveCompositeInstancesAfterMediaCreation);
        data_dictionary->Add(&tags::PrimaryAnatomicStructureModifierSequence);
        data_dictionary->Add(&tags::PrimaryAnatomicStructureSequence);
        data_dictionary->Add(&tags::PrimaryDosimeterUnit);
        data_dictionary->Add(&tags::PrimaryFluenceModeSequence);
        data_dictionary->Add(&tags::PrimaryPositionerIncrement);
        data_dictionary->Add(&tags::PrimaryPositionerIncrementSign);
        data_dictionary->Add(&tags::PrimaryPositionerScanArc);
        data_dictionary->Add(&tags::PrimaryPositionerScanStartAngle);
        data_dictionary->Add(&tags::PrimaryPromptsCountsAccumulated);
        data_dictionary->Add(&tags::PrimitivePointIndexList);
        data_dictionary->Add(&tags::PrinterCharacteristicsSequence);
        data_dictionary->Add(&tags::PrinterConfigurationSequence);
        data_dictionary->Add(&tags::PrinterName);
        data_dictionary->Add(&tags::PrinterPixelSpacing);
        data_dictionary->Add(&tags::PrinterResolutionID);
        data_dictionary->Add(&tags::PrinterStatus);
        data_dictionary->Add(&tags::PrinterStatusInfo);
        data_dictionary->Add(&tags::PrintingBitDepth);
        data_dictionary->Add(&tags::PrintJobDescriptionSequence);
        data_dictionary->Add(&tags::PrintJobID);
        data_dictionary->Add(&tags::PrintManagementCapabilitiesSequence);
        data_dictionary->Add(&tags::PrintPriority);
        data_dictionary->Add(&tags::PrintQueueID);
        data_dictionary->Add(&tags::PrismSequence);
        data_dictionary->Add(&tags::PrivateCreatorReference);
        data_dictionary->Add(&tags::PrivateDataElement);
        data_dictionary->Add(&tags::PrivateDataElementCharacteristicsSequence);
        data_dictionary->Add(&tags::PrivateDataElementDefinitionSequence);
        data_dictionary->Add(&tags::PrivateDataElementDescription);
        data_dictionary->Add(&tags::PrivateDataElementEncoding);
        data_dictionary->Add(&tags::PrivateDataElementKeyword);
        data_dictionary->Add(&tags::PrivateDataElementName);
        data_dictionary->Add(&tags::PrivateDataElementNumberOfItems);
        data_dictionary->Add(&tags::PrivateDataElementValueMultiplicity);
        data_dictionary->Add(&tags::PrivateDataElementValueRepresentation);
        data_dictionary->Add(&tags::PrivateGroupReference);
        data_dictionary->Add(&tags::PrivateInformation);
        data_dictionary->Add(&tags::PrivateInformationCreatorUID);
        data_dictionary->Add(&tags::PrivateRecordUID);
        data_dictionary->Add(&tags::ProbeCenterLocationX);
        data_dictionary->Add(&tags::ProbeCenterLocationZ);
        data_dictionary->Add(&tags::ProbeDriveEquipmentSequence);
        data_dictionary->Add(&tags::ProbeDriveNotes);
        data_dictionary->Add(&tags::ProbeDriveSettingsSequence);
        data_dictionary->Add(&tags::ProbeInductance);
        data_dictionary->Add(&tags::ProbeOrientationAngle);
        data_dictionary->Add(&tags::ProbeResistance);
        data_dictionary->Add(&tags::ProcedureCodeSequence);
        data_dictionary->Add(&tags::ProcedureContextFlagTrial);
        data_dictionary->Add(&tags::ProcedureContextSequenceTrial);
        data_dictionary->Add(&tags::ProcedureCreationDate);
        data_dictionary->Add(&tags::ProcedureExpirationDate);
        data_dictionary->Add(&tags::ProcedureIdentifierCodeSequenceTrial);
        data_dictionary->Add(&tags::ProcedureLastModifiedDate);
        data_dictionary->Add(&tags::ProcedureStepCancellationDateTime);
        data_dictionary->Add(&tags::ProcedureStepCommunicationsURISequence);
        data_dictionary->Add(&tags::ProcedureStepDiscontinuationReasonCodeSequence);
        data_dictionary->Add(&tags::ProcedureStepLabel);
        data_dictionary->Add(&tags::ProcedureStepProgress);
        data_dictionary->Add(&tags::ProcedureStepProgressDescription);
        data_dictionary->Add(&tags::ProcedureStepProgressInformationSequence);
        data_dictionary->Add(&tags::ProcedureStepProgressParametersSequence);
        data_dictionary->Add(&tags::ProcedureStepRelationshipType);
        data_dictionary->Add(&tags::ProcedureStepState);
        data_dictionary->Add(&tags::ProcedureTypeCodeSequence);
        data_dictionary->Add(&tags::ProcedureVersion);
        data_dictionary->Add(&tags::ProcessingFunction);
        data_dictionary->Add(&tags::ProductDescription);
        data_dictionary->Add(&tags::ProductExpirationDateTime);
        data_dictionary->Add(&tags::ProductLotIdentifier);
        data_dictionary->Add(&tags::ProductName);
        data_dictionary->Add(&tags::ProductPackageIdentifier);
        data_dictionary->Add(&tags::ProductParameterSequence);
        data_dictionary->Add(&tags::ProductTypeCodeSequence);
        data_dictionary->Add(&tags::ProjectionEponymousNameCodeSequence);
        data_dictionary->Add(&tags::ProjectionPixelCalibrationSequence);
        data_dictionary->Add(&tags::PropertyLabel);
        data_dictionary->Add(&tags::ProposedStudySequence);
        data_dictionary->Add(&tags::ProtocolContextSequence);
        data_dictionary->Add(&tags::ProtocolDefinedPatientPosition);
        data_dictionary->Add(&tags::ProtocolDesignRationale);
        data_dictionary->Add(&tags::ProtocolElementCharacteristicsSummary);
        data_dictionary->Add(&tags::ProtocolElementName);
        data_dictionary->Add(&tags::ProtocolElementNumber);
        data_dictionary->Add(&tags::ProtocolElementPurpose);
        data_dictionary->Add(&tags::ProtocolName);
        data_dictionary->Add(&tags::ProtocolPlanningInformation);
        data_dictionary->Add(&tags::PseudoColorPaletteInstanceReferenceSequence);
        data_dictionary->Add(&tags::PseudoColorType);
        data_dictionary->Add(&tags::PTOLocationDescription);
        data_dictionary->Add(&tags::PTORegionSequence);
        data_dictionary->Add(&tags::PTORepresentationSequence);
        data_dictionary->Add(&tags::PulseNumber);
        data_dictionary->Add(&tags::PulseRepetitionFrequency);
        data_dictionary->Add(&tags::PulseRepetitionInterval);
        data_dictionary->Add(&tags::PulserEquipmentSequence);
        data_dictionary->Add(&tags::PulserNotes);
        data_dictionary->Add(&tags::PulserSettingsSequence);
        data_dictionary->Add(&tags::PulserType);
        data_dictionary->Add(&tags::PulseSequenceName);
        data_dictionary->Add(&tags::PulseSpecificBrachyControlPointDeliveredSequence);
        data_dictionary->Add(&tags::PulseWidth);
        data_dictionary->Add(&tags::PupilCentroidXCoordinate);
        data_dictionary->Add(&tags::PupilCentroidYCoordinate);
        data_dictionary->Add(&tags::PupilDilated);
        data_dictionary->Add(&tags::PupilSize);
        data_dictionary->Add(&tags::PurposeOfReferenceCodeSequence);
        data_dictionary->Add(&tags::PVCRejection);
        data_dictionary->Add(&tags::QAResultsSequence);
        data_dictionary->Add(&tags::QRMeasurementsSequence);
        data_dictionary->Add(&tags::QuadratureReceiveCoil);
        data_dictionary->Add(&tags::QualityControlImage);
        data_dictionary->Add(&tags::QualityControlSubject);
        data_dictionary->Add(&tags::QualityControlSubjectTypeCodeSequence);
        data_dictionary->Add(&tags::QualityThreshold);
        data_dictionary->Add(&tags::QuantifiedDefect);
        data_dictionary->Add(&tags::Quantity);
        data_dictionary->Add(&tags::QuantityDefinitionSequence);
        data_dictionary->Add(&tags::QuantitySequence);
        data_dictionary->Add(&tags::QueryRetrieveLevel);
        data_dictionary->Add(&tags::QueryRetrieveView);
        data_dictionary->Add(&tags::QueueStatus);
        data_dictionary->Add(&tags::RadialPosition);
        data_dictionary->Add(&tags::RadiationAtomicNumber);
        data_dictionary->Add(&tags::RadiationChargeState);
        data_dictionary->Add(&tags::RadiationMachineName);
        data_dictionary->Add(&tags::RadiationMachineSAD);
        data_dictionary->Add(&tags::RadiationMachineSSD);
        data_dictionary->Add(&tags::RadiationMassNumber);
        data_dictionary->Add(&tags::RadiationMode);
        data_dictionary->Add(&tags::RadiationSetting);
        data_dictionary->Add(&tags::RadiationType);
        data_dictionary->Add(&tags::Radionuclide);
        data_dictionary->Add(&tags::RadionuclideCodeSequence);
        data_dictionary->Add(&tags::RadionuclideHalfLife);
        data_dictionary->Add(&tags::RadionuclidePositronFraction);
        data_dictionary->Add(&tags::RadionuclideTotalDose);
        data_dictionary->Add(&tags::Radiopharmaceutical);
        data_dictionary->Add(&tags::RadiopharmaceuticalAdministrationEventUID);
        data_dictionary->Add(&tags::RadiopharmaceuticalAgentNumber);
        data_dictionary->Add(&tags::RadiopharmaceuticalCodeSequence);
        data_dictionary->Add(&tags::RadiopharmaceuticalInformationSequence);
        data_dictionary->Add(&tags::RadiopharmaceuticalRoute);
        data_dictionary->Add(&tags::RadiopharmaceuticalSpecificActivity);
        data_dictionary->Add(&tags::RadiopharmaceuticalStartDateTime);
        data_dictionary->Add(&tags::RadiopharmaceuticalStartTime);
        data_dictionary->Add(&tags::RadiopharmaceuticalStopDateTime);
        data_dictionary->Add(&tags::RadiopharmaceuticalStopTime);
        data_dictionary->Add(&tags::RadiopharmaceuticalUsageSequence);
        data_dictionary->Add(&tags::RadiopharmaceuticalVolume);
        data_dictionary->Add(&tags::RadiusAlongWedge);
        data_dictionary->Add(&tags::RadiusOfCircularCollimator);
        data_dictionary->Add(&tags::RadiusOfCircularExposureControlSensingRegion);
        data_dictionary->Add(&tags::RadiusOfCircularShutter);
        data_dictionary->Add(&tags::RadiusOfCurvature);
        data_dictionary->Add(&tags::RandomsCorrected);
        data_dictionary->Add(&tags::RandomsCorrectionMethod);
        data_dictionary->Add(&tags::RangeModulatorDescription);
        data_dictionary->Add(&tags::RangeModulatorGatingStartValue);
        data_dictionary->Add(&tags::RangeModulatorGatingStartWaterEquivalentThickness);
        data_dictionary->Add(&tags::RangeModulatorGatingStopValue);
        data_dictionary->Add(&tags::RangeModulatorGatingStopWaterEquivalentThickness);
        data_dictionary->Add(&tags::RangeModulatorID);
        data_dictionary->Add(&tags::RangeModulatorNumber);
        data_dictionary->Add(&tags::RangeModulatorSequence);
        data_dictionary->Add(&tags::RangeModulatorSettingsSequence);
        data_dictionary->Add(&tags::RangeModulatorType);
        data_dictionary->Add(&tags::RangeOfFreedom);
        data_dictionary->Add(&tags::RangeShifterDescription);
        data_dictionary->Add(&tags::RangeShifterID);
        data_dictionary->Add(&tags::RangeShifterNumber);
        data_dictionary->Add(&tags::RangeShifterSequence);
        data_dictionary->Add(&tags::RangeShifterSetting);
        data_dictionary->Add(&tags::RangeShifterSettingsSequence);
        data_dictionary->Add(&tags::RangeShifterType);
        data_dictionary->Add(&tags::RangeShifterWaterEquivalentThickness);
        data_dictionary->Add(&tags::RangingDepth);
        data_dictionary->Add(&tags::RationalDenominatorValue);
        data_dictionary->Add(&tags::RationalNumeratorValue);
        data_dictionary->Add(&tags::RawDataHandling);
        data_dictionary->Add(&tags::RealWorldValueFirstValueMapped);
        data_dictionary->Add(&tags::RealWorldValueIntercept);
        data_dictionary->Add(&tags::RealWorldValueLastValueMapped);
        data_dictionary->Add(&tags::RealWorldValueLUTData);
        data_dictionary->Add(&tags::RealWorldValueMappingSequence);
        data_dictionary->Add(&tags::RealWorldValueSlope);
        data_dictionary->Add(&tags::ReasonForCancellation);
        data_dictionary->Add(&tags::ReasonForChannelOmission);
        data_dictionary->Add(&tags::ReasonForChannelOmissionDescription);
        data_dictionary->Add(&tags::ReasonForOmission);
        data_dictionary->Add(&tags::ReasonForOmissionDescription);
        data_dictionary->Add(&tags::ReasonForPerformedProcedureCodeSequence);
        data_dictionary->Add(&tags::ReasonForRequestedProcedureCodeSequence);
        data_dictionary->Add(&tags::ReasonForStudy);
        data_dictionary->Add(&tags::ReasonForTheAttributeModification);
        data_dictionary->Add(&tags::ReasonForTheImagingServiceRequest);
        data_dictionary->Add(&tags::ReasonForTheRequestedProcedure);
        data_dictionary->Add(&tags::ReceiveCoilManufacturerName);
        data_dictionary->Add(&tags::ReceiveCoilName);
        data_dictionary->Add(&tags::ReceiveCoilType);
        data_dictionary->Add(&tags::ReceiveProbeSequence);
        data_dictionary->Add(&tags::ReceiverEquipmentSequence);
        data_dictionary->Add(&tags::ReceiverNotes);
        data_dictionary->Add(&tags::ReceiverSettingsSequence);
        data_dictionary->Add(&tags::ReceiveTransducerSequence);
        data_dictionary->Add(&tags::ReceiveTransducerSettingsSequence);
        data_dictionary->Add(&tags::ReceivingAE);
        data_dictionary->Add(&tags::ReceivingApplicationEntityTitle);
        data_dictionary->Add(&tags::RecognitionCode);
        data_dictionary->Add(&tags::RecognizableVisualFeatures);
        data_dictionary->Add(&tags::RecommendedAbsentPixelCIELabValue);
        data_dictionary->Add(&tags::RecommendedAnimationRate);
        data_dictionary->Add(&tags::RecommendedDefaultValueSequence);
        data_dictionary->Add(&tags::RecommendedDisplayCIELabValue);
        data_dictionary->Add(&tags::RecommendedDisplayCIELabValueList);
        data_dictionary->Add(&tags::RecommendedDisplayFrameRate);
        data_dictionary->Add(&tags::RecommendedDisplayFrameRateInFloat);
        data_dictionary->Add(&tags::RecommendedDisplayGrayscaleValue);
        data_dictionary->Add(&tags::RecommendedLineThickness);
        data_dictionary->Add(&tags::RecommendedPointRadius);
        data_dictionary->Add(&tags::RecommendedPresentationOpacity);
        data_dictionary->Add(&tags::RecommendedPresentationType);
        data_dictionary->Add(&tags::RecommendedRotationPoint);
        data_dictionary->Add(&tags::RecommendedViewingMode);
        data_dictionary->Add(&tags::ReconstructionAlgorithm);
        data_dictionary->Add(&tags::ReconstructionAlgorithmSequence);
        data_dictionary->Add(&tags::ReconstructionAngle);
        data_dictionary->Add(&tags::ReconstructionDescription);
        data_dictionary->Add(&tags::ReconstructionDiameter);
        data_dictionary->Add(&tags::ReconstructionEndLocationSequence);
        data_dictionary->Add(&tags::ReconstructionFieldOfView);
        data_dictionary->Add(&tags::ReconstructionIndex);
        data_dictionary->Add(&tags::ReconstructionMethod);
        data_dictionary->Add(&tags::ReconstructionPixelSpacing);
        data_dictionary->Add(&tags::ReconstructionProtocolElementSequence);
        data_dictionary->Add(&tags::ReconstructionProtocolElementSpecificationSequence);
        data_dictionary->Add(&tags::ReconstructionStartLocationSequence);
        data_dictionary->Add(&tags::ReconstructionTargetCenterLocationSequence);
        data_dictionary->Add(&tags::ReconstructionTargetCenterPatient);
        data_dictionary->Add(&tags::ReconstructionType);
        data_dictionary->Add(&tags::RecordedBlockSequence);
        data_dictionary->Add(&tags::RecordedBrachyAccessoryDeviceSequence);
        data_dictionary->Add(&tags::RecordedChannelSequence);
        data_dictionary->Add(&tags::RecordedChannelShieldSequence);
        data_dictionary->Add(&tags::RecordedCompensatorSequence);
        data_dictionary->Add(&tags::RecordedLateralSpreadingDeviceSequence);
        data_dictionary->Add(&tags::RecordedRangeModulatorSequence);
        data_dictionary->Add(&tags::RecordedRangeShifterSequence);
        data_dictionary->Add(&tags::RecordedSnoutSequence);
        data_dictionary->Add(&tags::RecordedSourceApplicatorSequence);
        data_dictionary->Add(&tags::RecordedSourceSequence);
        data_dictionary->Add(&tags::RecordedWedgeSequence);
        data_dictionary->Add(&tags::RecordInUseFlag);
        data_dictionary->Add(&tags::RectificationType);
        data_dictionary->Add(&tags::RectifierSmoothing);
        data_dictionary->Add(&tags::RectilinearPhaseEncodeReordering);
        data_dictionary->Add(&tags::RedPaletteColorLookupTableData);
        data_dictionary->Add(&tags::RedPaletteColorLookupTableDescriptor);
        data_dictionary->Add(&tags::Reference);
        data_dictionary->Add(&tags::ReferenceAirKermaRate);
        data_dictionary->Add(&tags::ReferenceBasisCodeSequence);
        data_dictionary->Add(&tags::ReferenceCoordinates);
        data_dictionary->Add(&tags::ReferencedAccessionSequenceTrial);
        data_dictionary->Add(&tags::ReferencedAssertionUID);
        data_dictionary->Add(&tags::ReferencedBasicAnnotationBoxSequence);
        data_dictionary->Add(&tags::ReferencedBeamNumber);
        data_dictionary->Add(&tags::ReferencedBeamSequence);
        data_dictionary->Add(&tags::ReferencedBlockNumber);
        data_dictionary->Add(&tags::ReferencedBolusSequence);
        data_dictionary->Add(&tags::ReferencedBrachyAccessoryDeviceNumber);
        data_dictionary->Add(&tags::ReferencedBrachyApplicationSetupNumber);
        data_dictionary->Add(&tags::ReferencedBrachyApplicationSetupSequence);
        data_dictionary->Add(&tags::ReferencedCalculatedDoseReferenceNumber);
        data_dictionary->Add(&tags::ReferencedCalculatedDoseReferenceSequence);
        data_dictionary->Add(&tags::ReferencedChannelNumber);
        data_dictionary->Add(&tags::ReferencedChannelShieldNumber);
        data_dictionary->Add(&tags::ReferencedColorPaletteInstanceUID);
        data_dictionary->Add(&tags::ReferencedComparisonSOPInstanceSequence);
        data_dictionary->Add(&tags::ReferencedCompensatorNumber);
        data_dictionary->Add(&tags::ReferencedContentItem);
        data_dictionary->Add(&tags::ReferencedContentItemIdentifier);
        data_dictionary->Add(&tags::ReferencedControlPointIndex);
        data_dictionary->Add(&tags::ReferencedControlPointSequence);
        data_dictionary->Add(&tags::ReferencedCurveSequence);
        data_dictionary->Add(&tags::ReferencedDateTime);
        data_dictionary->Add(&tags::ReferencedDefinedProtocolSequence);
        data_dictionary->Add(&tags::ReferencedDigitalSignatureSequence);
        data_dictionary->Add(&tags::ReferencedDoseReferenceNumber);
        data_dictionary->Add(&tags::ReferencedDoseReferenceSequence);
        data_dictionary->Add(&tags::ReferencedDoseReferenceUID);
        data_dictionary->Add(&tags::ReferencedDoseSequence);
        data_dictionary->Add(&tags::ReferencedFiducialUID);
        data_dictionary->Add(&tags::ReferencedFileID);
        data_dictionary->Add(&tags::ReferencedFilmBoxSequence);
        data_dictionary->Add(&tags::ReferencedFilmSessionSequence);
        data_dictionary->Add(&tags::ReferencedFindingsGroupUIDTrial);
        data_dictionary->Add(&tags::ReferencedFirstFrameSequence);
        data_dictionary->Add(&tags::ReferencedFractionGroupNumber);
        data_dictionary->Add(&tags::ReferencedFractionGroupSequence);
        data_dictionary->Add(&tags::ReferencedFractionNumber);
        data_dictionary->Add(&tags::ReferencedFrameNumber);
        data_dictionary->Add(&tags::ReferencedFrameNumbers);
        data_dictionary->Add(&tags::ReferencedFrameOfReferenceSequence);
        data_dictionary->Add(&tags::ReferencedFrameOfReferenceUID);
        data_dictionary->Add(&tags::ReferencedGeneralPurposeScheduledProcedureStepSequence);
        data_dictionary->Add(&tags::ReferencedGeneralPurposeScheduledProcedureStepTransactionUID);
        data_dictionary->Add(&tags::ReferencedHPGLDocumentID);
        data_dictionary->Add(&tags::ReferencedImageBoxSequence);
        data_dictionary->Add(&tags::ReferencedImageBoxSequenceRetired);
        data_dictionary->Add(&tags::ReferencedImageEvidenceSequence);
        data_dictionary->Add(&tags::ReferencedImageNavigationSequence);
        data_dictionary->Add(&tags::ReferencedImageOverlayBoxSequence);
        data_dictionary->Add(&tags::ReferencedImageRealWorldValueMappingSequence);
        data_dictionary->Add(&tags::ReferencedImageSequence);
        data_dictionary->Add(&tags::ReferencedImplantTemplateGroupMemberID);
        data_dictionary->Add(&tags::ReferencedInstanceSequence);
        data_dictionary->Add(&tags::ReferencedInterpretationSequence);
        data_dictionary->Add(&tags::ReferenceDisplaySets);
        data_dictionary->Add(&tags::ReferencedLateralSpreadingDeviceNumber);
        data_dictionary->Add(&tags::ReferencedMeasuredDoseReferenceNumber);
        data_dictionary->Add(&tags::ReferencedMeasuredDoseReferenceSequence);
        data_dictionary->Add(&tags::ReferencedNonImageCompositeSOPInstanceSequence);
        data_dictionary->Add(&tags::ReferencedObjectObservationClassTrial);
        data_dictionary->Add(&tags::ReferencedObservationClassTrial);
        data_dictionary->Add(&tags::ReferencedObservationUIDTrial);
        data_dictionary->Add(&tags::ReferencedOphthalmicAxialLengthMeasurementQCImageSequence);
        data_dictionary->Add(&tags::ReferencedOphthalmicAxialMeasurementsSequence);
        data_dictionary->Add(&tags::ReferenceDoseDefinition);
        data_dictionary->Add(&tags::ReferencedOtherPlaneSequence);
        data_dictionary->Add(&tags::ReferencedOverlayPlaneGroups);
        data_dictionary->Add(&tags::ReferencedOverlayPlaneSequence);
        data_dictionary->Add(&tags::ReferencedOverlaySequence);
        data_dictionary->Add(&tags::ReferencedPatientAliasSequence);
        data_dictionary->Add(&tags::ReferencedPatientPhotoSequence);
        data_dictionary->Add(&tags::ReferencedPatientSequence);
        data_dictionary->Add(&tags::ReferencedPatientSetupNumber);
        data_dictionary->Add(&tags::ReferencedPerformedProcedureStepSequence);
        data_dictionary->Add(&tags::ReferencedPerformedProtocolSequence);
        data_dictionary->Add(&tags::ReferencedPresentationLUTSequence);
        data_dictionary->Add(&tags::ReferencedPresentationStateSequence);
        data_dictionary->Add(&tags::ReferencedPrintJobSequence);
        data_dictionary->Add(&tags::ReferencedPrintJobSequencePullStoredPrint);
        data_dictionary->Add(&tags::ReferencedProcedureStepSequence);
        data_dictionary->Add(&tags::ReferencedPTOSequence);
        data_dictionary->Add(&tags::ReferencedRangeModulatorNumber);
        data_dictionary->Add(&tags::ReferencedRangeShifterNumber);
        data_dictionary->Add(&tags::ReferencedRawDataSequence);
        data_dictionary->Add(&tags::ReferencedRealWorldValueMappingInstanceSequence);
        data_dictionary->Add(&tags::ReferencedReferenceImageNumber);
        data_dictionary->Add(&tags::ReferencedReferenceImageSequence);
        data_dictionary->Add(&tags::ReferencedRefractiveMeasurementsSequence);
        data_dictionary->Add(&tags::ReferencedRelatedGeneralSOPClassUIDInFile);
        data_dictionary->Add(&tags::ReferencedRequestSequence);
        data_dictionary->Add(&tags::ReferencedResultsSequence);
        data_dictionary->Add(&tags::ReferencedROINumber);
        data_dictionary->Add(&tags::ReferencedRTPlanSequence);
        data_dictionary->Add(&tags::ReferencedSamplePositions);
        data_dictionary->Add(&tags::ReferencedSegmentNumber);
        data_dictionary->Add(&tags::ReferencedSeriesSequence);
        data_dictionary->Add(&tags::ReferencedSetupImageSequence);
        data_dictionary->Add(&tags::ReferencedSOPClassUID);
        data_dictionary->Add(&tags::ReferencedSOPClassUIDInFile);
        data_dictionary->Add(&tags::ReferencedSOPInstanceMACSequence);
        data_dictionary->Add(&tags::ReferencedSOPInstanceUID);
        data_dictionary->Add(&tags::ReferencedSOPInstanceUIDInFile);
        data_dictionary->Add(&tags::ReferencedSOPSequence);
        data_dictionary->Add(&tags::ReferencedSourceApplicatorNumber);
        data_dictionary->Add(&tags::ReferencedSourceNumber);
        data_dictionary->Add(&tags::ReferencedSpatialRegistrationSequence);
        data_dictionary->Add(&tags::ReferencedStartControlPointIndex);
        data_dictionary->Add(&tags::ReferencedStereometricInstanceSequence);
        data_dictionary->Add(&tags::ReferencedStopControlPointIndex);
        data_dictionary->Add(&tags::ReferencedStorageMediaSequence);
        data_dictionary->Add(&tags::ReferencedStoredPrintSequence);
        data_dictionary->Add(&tags::ReferencedStructuredContextSequence);
        data_dictionary->Add(&tags::ReferencedStructureSetSequence);
        data_dictionary->Add(&tags::ReferencedStudySequence);
        data_dictionary->Add(&tags::ReferencedSurfaceDataSequence);
        data_dictionary->Add(&tags::ReferencedSurfaceMeshIdentificationSequence);
        data_dictionary->Add(&tags::ReferencedSurfaceNumber);
        data_dictionary->Add(&tags::ReferencedSurfaceSequence);
        data_dictionary->Add(&tags::ReferencedTargetLuminanceCharacteristicsID);
        data_dictionary->Add(&tags::ReferencedTDRInstanceSequence);
        data_dictionary->Add(&tags::ReferencedTextureSequence);
        data_dictionary->Add(&tags::ReferencedTimeOffsets);
        data_dictionary->Add(&tags::ReferencedToleranceTableNumber);
        data_dictionary->Add(&tags::ReferencedTransferSyntaxUIDInFile);
        data_dictionary->Add(&tags::ReferencedTreatmentRecordSequence);
        data_dictionary->Add(&tags::ReferencedVerificationImageSequence);
        data_dictionary->Add(&tags::ReferencedVisitSequence);
        data_dictionary->Add(&tags::ReferencedVOILUTBoxSequence);
        data_dictionary->Add(&tags::ReferencedWaveformChannels);
        data_dictionary->Add(&tags::ReferencedWaveformSequence);
        data_dictionary->Add(&tags::ReferencedWedgeNumber);
        data_dictionary->Add(&tags::ReferenceGeometryCodeSequence);
        data_dictionary->Add(&tags::ReferenceImageNumber);
        data_dictionary->Add(&tags::ReferenceLocationDescription);
        data_dictionary->Add(&tags::ReferenceLocationLabel);
        data_dictionary->Add(&tags::ReferencePixelPhysicalValueX);
        data_dictionary->Add(&tags::ReferencePixelPhysicalValueY);
        data_dictionary->Add(&tags::ReferencePixelX0);
        data_dictionary->Add(&tags::ReferencePixelY0);
        data_dictionary->Add(&tags::ReferenceToRecordedSound);
        data_dictionary->Add(&tags::ReferringPhysicianAddress);
        data_dictionary->Add(&tags::ReferringPhysicianIdentificationSequence);
        data_dictionary->Add(&tags::ReferringPhysicianName);
        data_dictionary->Add(&tags::ReferringPhysicianTelephoneNumbers);
        data_dictionary->Add(&tags::ReflectedAmbientLight);
        data_dictionary->Add(&tags::ReformattingInterval);
        data_dictionary->Add(&tags::ReformattingOperationInitialViewDirection);
        data_dictionary->Add(&tags::ReformattingOperationType);
        data_dictionary->Add(&tags::ReformattingThickness);
        data_dictionary->Add(&tags::RefractiveErrorBeforeRefractiveSurgeryCodeSequence);
        data_dictionary->Add(&tags::RefractiveIndexApplied);
        data_dictionary->Add(&tags::RefractiveParametersUsedOnPatientSequence);
        data_dictionary->Add(&tags::RefractivePower);
        data_dictionary->Add(&tags::RefractiveProcedureOccurred);
        data_dictionary->Add(&tags::RefractiveStateSequence);
        data_dictionary->Add(&tags::RefractiveSurgeryTypeCodeSequence);
        data_dictionary->Add(&tags::RegionDataType);
        data_dictionary->Add(&tags::RegionFlags);
        data_dictionary->Add(&tags::RegionLocationMaxX1);
        data_dictionary->Add(&tags::RegionLocationMaxY1);
        data_dictionary->Add(&tags::RegionLocationMinX0);
        data_dictionary->Add(&tags::RegionLocationMinY0);
        data_dictionary->Add(&tags::RegionOfResidence);
        data_dictionary->Add(&tags::RegionPixelShiftSequence);
        data_dictionary->Add(&tags::RegionSpatialFormat);
        data_dictionary->Add(&tags::RegisteredLocalizerBottomRightHandCorner);
        data_dictionary->Add(&tags::RegisteredLocalizerTopLeftHandCorner);
        data_dictionary->Add(&tags::RegisteredLocalizerUnits);
        data_dictionary->Add(&tags::RegistrationMethodCodeSequence);
        data_dictionary->Add(&tags::RegistrationSequence);
        data_dictionary->Add(&tags::RegistrationToLocalizerSequence);
        data_dictionary->Add(&tags::RegistrationTypeCodeSequence);
        data_dictionary->Add(&tags::RelatedAssertionSequence);
        data_dictionary->Add(&tags::RelatedFrameOfReferenceUID);
        data_dictionary->Add(&tags::RelatedGeneralSOPClassUID);
        data_dictionary->Add(&tags::RelatedProcedureStepSequence);
        data_dictionary->Add(&tags::RelatedReferenceRTImageSequence);
        data_dictionary->Add(&tags::RelatedRTROIObservationsSequence);
        data_dictionary->Add(&tags::RelatedSeriesSequence);
        data_dictionary->Add(&tags::RelationshipSequenceTrial);
        data_dictionary->Add(&tags::RelationshipType);
        data_dictionary->Add(&tags::RelationshipTypeCodeSequenceTrial);
        data_dictionary->Add(&tags::RelativeElevation);
        data_dictionary->Add(&tags::RelativeImagePositionCodeSequence);
        data_dictionary->Add(&tags::RelativeOpacity);
        data_dictionary->Add(&tags::RelativeTime);
        data_dictionary->Add(&tags::RelativeTimeUnits);
        data_dictionary->Add(&tags::RelativeXRayExposure);
        data_dictionary->Add(&tags::RelevantInformationSequence);
        data_dictionary->Add(&tags::RelevantOPTAttributesSequence);
        data_dictionary->Add(&tags::RenderedImageReferenceSequence);
        data_dictionary->Add(&tags::RenderFieldOfView);
        data_dictionary->Add(&tags::RenderingMethod);
        data_dictionary->Add(&tags::RenderProjection);
        data_dictionary->Add(&tags::RepairID);
        data_dictionary->Add(&tags::RepeatFractionCycleLength);
        data_dictionary->Add(&tags::RepeatInterval);
        data_dictionary->Add(&tags::RepetitionTime);
        data_dictionary->Add(&tags::ReplacedImplantAssemblyTemplateSequence);
        data_dictionary->Add(&tags::ReplacedImplantTemplateGroupSequence);
        data_dictionary->Add(&tags::ReplacedImplantTemplateSequence);
        data_dictionary->Add(&tags::ReplacedProcedureStepSequence);
        data_dictionary->Add(&tags::ReportDetailSequenceTrial);
        data_dictionary->Add(&tags::ReportedValuesOrigin);
        data_dictionary->Add(&tags::ReportingPriority);
        data_dictionary->Add(&tags::ReportNumber);
        data_dictionary->Add(&tags::ReportProductionStatusTrial);
        data_dictionary->Add(&tags::ReportStatusCommentTrial);
        data_dictionary->Add(&tags::ReportStatusIDTrial);
        data_dictionary->Add(&tags::RepositoryUniqueID);
        data_dictionary->Add(&tags::RepresentativeFrameNumber);
        data_dictionary->Add(&tags::ReprojectionMethod);
        data_dictionary->Add(&tags::RequestAttributesSequence);
        data_dictionary->Add(&tags::RequestedContrastAgent);
        data_dictionary->Add(&tags::RequestedDecimateCropBehavior);
        data_dictionary->Add(&tags::RequestedImageSize);
        data_dictionary->Add(&tags::RequestedImageSizeFlag);
        data_dictionary->Add(&tags::RequestedMediaApplicationProfile);
        data_dictionary->Add(&tags::RequestedProcedureCodeSequence);
        data_dictionary->Add(&tags::RequestedProcedureComments);
        data_dictionary->Add(&tags::RequestedProcedureDescription);
        data_dictionary->Add(&tags::RequestedProcedureDescriptionTrial);
        data_dictionary->Add(&tags::RequestedProcedureID);
        data_dictionary->Add(&tags::RequestedProcedureLocation);
        data_dictionary->Add(&tags::RequestedProcedurePriority);
        data_dictionary->Add(&tags::RequestedResolutionID);
        data_dictionary->Add(&tags::RequestedSeriesDescription);
        data_dictionary->Add(&tags::RequestedSubsequentWorkitemCodeSequence);
        data_dictionary->Add(&tags::RequestingAE);
        data_dictionary->Add(&tags::RequestingPhysician);
        data_dictionary->Add(&tags::RequestingPhysicianIdentificationSequence);
        data_dictionary->Add(&tags::RequestingService);
        data_dictionary->Add(&tags::RequestingServiceCodeSequence);
        data_dictionary->Add(&tags::RequestPriority);
        data_dictionary->Add(&tags::RescaleIntercept);
        data_dictionary->Add(&tags::RescaleSlope);
        data_dictionary->Add(&tags::RescaleType);
        data_dictionary->Add(&tags::ResidualSyringeCounts);
        data_dictionary->Add(&tags::ResonantNucleus);
        data_dictionary->Add(&tags::ResourceDescription);
        data_dictionary->Add(&tags::RespiratoryCyclePosition);
        data_dictionary->Add(&tags::RespiratoryIntervalTime);
        data_dictionary->Add(&tags::RespiratoryMotionCompensationTechnique);
        data_dictionary->Add(&tags::RespiratoryMotionCompensationTechniqueDescription);
        data_dictionary->Add(&tags::RespiratorySignalSource);
        data_dictionary->Add(&tags::RespiratorySignalSourceID);
        data_dictionary->Add(&tags::RespiratorySynchronizationSequence);
        data_dictionary->Add(&tags::RespiratoryTriggerDelayThreshold);
        data_dictionary->Add(&tags::RespiratoryTriggerType);
        data_dictionary->Add(&tags::ResponsibleGroupCodeSequence);
        data_dictionary->Add(&tags::ResponsibleOrganization);
        data_dictionary->Add(&tags::ResponsiblePerson);
        data_dictionary->Add(&tags::ResponsiblePersonRole);
        data_dictionary->Add(&tags::ResultingGeneralPurposePerformedProcedureStepsSequence);
        data_dictionary->Add(&tags::ResultsComments);
        data_dictionary->Add(&tags::ResultsDistributionListSequence);
        data_dictionary->Add(&tags::ResultsID);
        data_dictionary->Add(&tags::ResultsIDIssuer);
        data_dictionary->Add(&tags::ResultsNormalsSequence);
        data_dictionary->Add(&tags::RetestSensitivityValue);
        data_dictionary->Add(&tags::RetestStimulusSeen);
        data_dictionary->Add(&tags::RetinalThicknessDefinitionCodeSequence);
        data_dictionary->Add(&tags::RetrieveAETitle);
        data_dictionary->Add(&tags::RetrieveLocationUID);
        data_dictionary->Add(&tags::RetrieveURI);
        data_dictionary->Add(&tags::RetrieveURL);
        data_dictionary->Add(&tags::ReviewDate);
        data_dictionary->Add(&tags::ReviewerName);
        data_dictionary->Add(&tags::ReviewTime);
        data_dictionary->Add(&tags::RevolutionTime);
        data_dictionary->Add(&tags::RFEchoTrainLength);
        data_dictionary->Add(&tags::RGBATransferFunctionDescription);
        data_dictionary->Add(&tags::RGBLUTTransferFunction);
        data_dictionary->Add(&tags::RightImageSequence);
        data_dictionary->Add(&tags::RightLensSequence);
        data_dictionary->Add(&tags::ROIArea);
        data_dictionary->Add(&tags::ROIContourSequence);
        data_dictionary->Add(&tags::ROIDescription);
        data_dictionary->Add(&tags::ROIDisplayColor);
        data_dictionary->Add(&tags::ROIElementalCompositionAtomicMassFraction);
        data_dictionary->Add(&tags::ROIElementalCompositionAtomicNumber);
        data_dictionary->Add(&tags::ROIElementalCompositionSequence);
        data_dictionary->Add(&tags::ROIGenerationAlgorithm);
        data_dictionary->Add(&tags::ROIGenerationDescription);
        data_dictionary->Add(&tags::ROIInterpreter);
        data_dictionary->Add(&tags::ROIMean);
        data_dictionary->Add(&tags::ROIName);
        data_dictionary->Add(&tags::ROINumber);
        data_dictionary->Add(&tags::ROIObservationDescription);
        data_dictionary->Add(&tags::ROIObservationLabel);
        data_dictionary->Add(&tags::ROIPhysicalPropertiesSequence);
        data_dictionary->Add(&tags::ROIPhysicalProperty);
        data_dictionary->Add(&tags::ROIPhysicalPropertyValue);
        data_dictionary->Add(&tags::ROIStandardDeviation);
        data_dictionary->Add(&tags::ROIVolume);
        data_dictionary->Add(&tags::RotationAngle);
        data_dictionary->Add(&tags::RotationDirection);
        data_dictionary->Add(&tags::RotationInformationSequence);
        data_dictionary->Add(&tags::RotationOffset);
        data_dictionary->Add(&tags::RotationOfScannedFilm);
        data_dictionary->Add(&tags::RotationPoint);
        data_dictionary->Add(&tags::RotationVector);
        data_dictionary->Add(&tags::RouteID);
        data_dictionary->Add(&tags::RouteIDAssigningAuthority);
        data_dictionary->Add(&tags::RouteOfAdmissions);
        data_dictionary->Add(&tags::RouteSegmentEndLocationID);
        data_dictionary->Add(&tags::RouteSegmentEndTime);
        data_dictionary->Add(&tags::RouteSegmentID);
        data_dictionary->Add(&tags::RouteSegmentLocationIDType);
        data_dictionary->Add(&tags::RouteSegmentSequence);
        data_dictionary->Add(&tags::RouteSegmentStartLocationID);
        data_dictionary->Add(&tags::RouteSegmentStartTime);
        data_dictionary->Add(&tags::RowOverlap);
        data_dictionary->Add(&tags::RowPositionInTotalImagePixelMatrix);
        data_dictionary->Add(&tags::Rows);
        data_dictionary->Add(&tags::RowsForNthOrderCoefficients);
        data_dictionary->Add(&tags::RRIntervalTimeNominal);
        data_dictionary->Add(&tags::RRIntervalVector);
        data_dictionary->Add(&tags::RTBeamLimitingDeviceType);
        data_dictionary->Add(&tags::RTDoseROISequence);
        data_dictionary->Add(&tags::RTImageDescription);
        data_dictionary->Add(&tags::RTImageLabel);
        data_dictionary->Add(&tags::RTImageName);
        data_dictionary->Add(&tags::RTImageOrientation);
        data_dictionary->Add(&tags::RTImagePlane);
        data_dictionary->Add(&tags::RTImagePosition);
        data_dictionary->Add(&tags::RTImageSID);
        data_dictionary->Add(&tags::RTPlanDate);
        data_dictionary->Add(&tags::RTPlanDescription);
        data_dictionary->Add(&tags::RTPlanGeometry);
        data_dictionary->Add(&tags::RTPlanLabel);
        data_dictionary->Add(&tags::RTPlanName);
        data_dictionary->Add(&tags::RTPlanRelationship);
        data_dictionary->Add(&tags::RTPlanTime);
        data_dictionary->Add(&tags::RTReferencedSeriesSequence);
        data_dictionary->Add(&tags::RTReferencedStudySequence);
        data_dictionary->Add(&tags::RTRelatedROISequence);
        data_dictionary->Add(&tags::RTROIIdentificationCodeSequence);
        data_dictionary->Add(&tags::RTROIInterpretedType);
        data_dictionary->Add(&tags::RTROIObservationsSequence);
        data_dictionary->Add(&tags::RTROIRelationship);
        data_dictionary->Add(&tags::RunLengthTriplet);
        data_dictionary->Add(&tags::RWavePointer);
        data_dictionary->Add(&tags::RWaveTimeVector);
        data_dictionary->Add(&tags::SafePositionExitDate);
        data_dictionary->Add(&tags::SafePositionExitTime);
        data_dictionary->Add(&tags::SafePositionReturnDate);
        data_dictionary->Add(&tags::SafePositionReturnTime);
        data_dictionary->Add(&tags::SampleRate);
        data_dictionary->Add(&tags::SamplesPerPixel);
        data_dictionary->Add(&tags::SamplesPerPixelUsed);
        data_dictionary->Add(&tags::SamplingFrequency);
        data_dictionary->Add(&tags::SamplingStepSize);
        data_dictionary->Add(&tags::SAR);
        data_dictionary->Add(&tags::SaturationRecovery);
        data_dictionary->Add(&tags::ScanArc);
        data_dictionary->Add(&tags::ScanLength);
        data_dictionary->Add(&tags::ScanMode);
        data_dictionary->Add(&tags::ScannerSettingsSequence);
        data_dictionary->Add(&tags::ScanningSequence);
        data_dictionary->Add(&tags::ScanningSpotSize);
        data_dictionary->Add(&tags::ScanOptions);
        data_dictionary->Add(&tags::ScanPatternTypeCodeSequence);
        data_dictionary->Add(&tags::ScanProcedure);
        data_dictionary->Add(&tags::ScanProgressionDirection);
        data_dictionary->Add(&tags::ScanSpotMetersetsDelivered);
        data_dictionary->Add(&tags::ScanSpotMetersetWeights);
        data_dictionary->Add(&tags::ScanSpotPositionMap);
        data_dictionary->Add(&tags::ScanSpotPrescribedIndices);
        data_dictionary->Add(&tags::ScanSpotReordered);
        data_dictionary->Add(&tags::ScanSpotReorderingAllowed);
        data_dictionary->Add(&tags::ScanSpotTimeOffset);
        data_dictionary->Add(&tags::ScanSpotTuneID);
        data_dictionary->Add(&tags::ScanType);
        data_dictionary->Add(&tags::ScanVelocity);
        data_dictionary->Add(&tags::ScatterCorrected);
        data_dictionary->Add(&tags::ScatterCorrectionMethod);
        data_dictionary->Add(&tags::ScatterFractionFactor);
        data_dictionary->Add(&tags::ScheduledAdmissionDate);
        data_dictionary->Add(&tags::ScheduledAdmissionTime);
        data_dictionary->Add(&tags::ScheduledDischargeDate);
        data_dictionary->Add(&tags::ScheduledDischargeTime);
        data_dictionary->Add(&tags::ScheduledHumanPerformersSequence);
        data_dictionary->Add(&tags::ScheduledPatientInstitutionResidence);
        data_dictionary->Add(&tags::ScheduledPerformingPhysicianIdentificationSequence);
        data_dictionary->Add(&tags::ScheduledPerformingPhysicianName);
        data_dictionary->Add(&tags::ScheduledProcedureStepDescription);
        data_dictionary->Add(&tags::ScheduledProcedureStepEndDate);
        data_dictionary->Add(&tags::ScheduledProcedureStepEndTime);
        data_dictionary->Add(&tags::ScheduledProcedureStepExpirationDateTime);
        data_dictionary->Add(&tags::ScheduledProcedureStepID);
        data_dictionary->Add(&tags::ScheduledProcedureStepLocation);
        data_dictionary->Add(&tags::ScheduledProcedureStepModificationDateTime);
        data_dictionary->Add(&tags::ScheduledProcedureStepPriority);
        data_dictionary->Add(&tags::ScheduledProcedureStepSequence);
        data_dictionary->Add(&tags::ScheduledProcedureStepStartDate);
        data_dictionary->Add(&tags::ScheduledProcedureStepStartDateTime);
        data_dictionary->Add(&tags::ScheduledProcedureStepStartTime);
        data_dictionary->Add(&tags::ScheduledProcedureStepStatus);
        data_dictionary->Add(&tags::ScheduledProcessingApplicationsCodeSequence);
        data_dictionary->Add(&tags::ScheduledProcessingParametersSequence);
        data_dictionary->Add(&tags::ScheduledProtocolCodeSequence);
        data_dictionary->Add(&tags::ScheduledSpecimenSequence);
        data_dictionary->Add(&tags::ScheduledStationAETitle);
        data_dictionary->Add(&tags::ScheduledStationClassCodeSequence);
        data_dictionary->Add(&tags::ScheduledStationGeographicLocationCodeSequence);
        data_dictionary->Add(&tags::ScheduledStationName);
        data_dictionary->Add(&tags::ScheduledStationNameCodeSequence);
        data_dictionary->Add(&tags::ScheduledStepAttributesSequence);
        data_dictionary->Add(&tags::ScheduledStudyLocation);
        data_dictionary->Add(&tags::ScheduledStudyLocationAETitle);
        data_dictionary->Add(&tags::ScheduledStudyStartDate);
        data_dictionary->Add(&tags::ScheduledStudyStartTime);
        data_dictionary->Add(&tags::ScheduledStudyStopDate);
        data_dictionary->Add(&tags::ScheduledStudyStopTime);
        data_dictionary->Add(&tags::ScheduledWorkitemCodeSequence);
        data_dictionary->Add(&tags::SCPStatus);
        data_dictionary->Add(&tags::ScreeningBaselineMeasured);
        data_dictionary->Add(&tags::ScreeningBaselineMeasuredSequence);
        data_dictionary->Add(&tags::ScreeningBaselineType);
        data_dictionary->Add(&tags::ScreeningBaselineValue);
        data_dictionary->Add(&tags::ScreeningTestModeCodeSequence);
        data_dictionary->Add(&tags::ScreenMinimumColorBitDepth);
        data_dictionary->Add(&tags::ScreenMinimumGrayscaleBitDepth);
        data_dictionary->Add(&tags::SeamLineIndex);
        data_dictionary->Add(&tags::SeamLineLocation);
        data_dictionary->Add(&tags::SecondaryApprovalStatus);
        data_dictionary->Add(&tags::SecondaryCaptureDeviceID);
        data_dictionary->Add(&tags::SecondaryCaptureDeviceManufacturer);
        data_dictionary->Add(&tags::SecondaryCaptureDeviceManufacturerModelName);
        data_dictionary->Add(&tags::SecondaryCaptureDeviceSoftwareVersions);
        data_dictionary->Add(&tags::SecondaryCountsAccumulated);
        data_dictionary->Add(&tags::SecondaryCountsType);
        data_dictionary->Add(&tags::SecondaryInspectionMethodSequence);
        data_dictionary->Add(&tags::SecondaryPositionerIncrement);
        data_dictionary->Add(&tags::SecondaryPositionerIncrementSign);
        data_dictionary->Add(&tags::SecondaryPositionerScanArc);
        data_dictionary->Add(&tags::SecondaryPositionerScanStartAngle);
        data_dictionary->Add(&tags::SecondaryReviewDate);
        data_dictionary->Add(&tags::SecondaryReviewerName);
        data_dictionary->Add(&tags::SecondaryReviewTime);
        data_dictionary->Add(&tags::SegmentAlgorithmName);
        data_dictionary->Add(&tags::SegmentAlgorithmType);
        data_dictionary->Add(&tags::SegmentationAlgorithmIdentificationSequence);
        data_dictionary->Add(&tags::SegmentationFractionalType);
        data_dictionary->Add(&tags::SegmentationType);
        data_dictionary->Add(&tags::SegmentDescription);
        data_dictionary->Add(&tags::SegmentedAlphaPaletteColorLookupTableData);
        data_dictionary->Add(&tags::SegmentedBluePaletteColorLookupTableData);
        data_dictionary->Add(&tags::SegmentedGreenPaletteColorLookupTableData);
        data_dictionary->Add(&tags::SegmentedKSpaceTraversal);
        data_dictionary->Add(&tags::SegmentedPropertyCategoryCodeSequence);
        data_dictionary->Add(&tags::SegmentedPropertyTypeCodeSequence);
        data_dictionary->Add(&tags::SegmentedPropertyTypeModifierCodeSequence);
        data_dictionary->Add(&tags::SegmentedRedPaletteColorLookupTableData);
        data_dictionary->Add(&tags::SegmentIdentificationSequence);
        data_dictionary->Add(&tags::SegmentLabel);
        data_dictionary->Add(&tags::SegmentNumber);
        data_dictionary->Add(&tags::SegmentSequence);
        data_dictionary->Add(&tags::SegmentSurfaceGenerationAlgorithmIdentificationSequence);
        data_dictionary->Add(&tags::SegmentSurfaceSourceInstanceSequence);
        data_dictionary->Add(&tags::SelectedSegmentalOphthalmicAxialLengthSequence);
        data_dictionary->Add(&tags::SelectedTotalOphthalmicAxialLengthSequence);
        data_dictionary->Add(&tags::SelectorAEValue);
        data_dictionary->Add(&tags::SelectorASValue);
        data_dictionary->Add(&tags::SelectorAttribute);
        data_dictionary->Add(&tags::SelectorAttributeKeyword);
        data_dictionary->Add(&tags::SelectorAttributeName);
        data_dictionary->Add(&tags::SelectorAttributePrivateCreator);
        data_dictionary->Add(&tags::SelectorAttributeVR);
        data_dictionary->Add(&tags::SelectorATValue);
        data_dictionary->Add(&tags::SelectorCodeSequenceValue);
        data_dictionary->Add(&tags::SelectorCSValue);
        data_dictionary->Add(&tags::SelectorDAValue);
        data_dictionary->Add(&tags::SelectorDSValue);
        data_dictionary->Add(&tags::SelectorDTValue);
        data_dictionary->Add(&tags::SelectorFDValue);
        data_dictionary->Add(&tags::SelectorFLValue);
        data_dictionary->Add(&tags::SelectorISValue);
        data_dictionary->Add(&tags::SelectorLOValue);
        data_dictionary->Add(&tags::SelectorLTValue);
        data_dictionary->Add(&tags::SelectorOBValue);
        data_dictionary->Add(&tags::SelectorODValue);
        data_dictionary->Add(&tags::SelectorOFValue);
        data_dictionary->Add(&tags::SelectorOLValue);
        data_dictionary->Add(&tags::SelectorOWValue);
        data_dictionary->Add(&tags::SelectorPNValue);
        data_dictionary->Add(&tags::SelectorSequencePointer);
        data_dictionary->Add(&tags::SelectorSequencePointerItems);
        data_dictionary->Add(&tags::SelectorSequencePointerPrivateCreator);
        data_dictionary->Add(&tags::SelectorSHValue);
        data_dictionary->Add(&tags::SelectorSLValue);
        data_dictionary->Add(&tags::SelectorSSValue);
        data_dictionary->Add(&tags::SelectorSTValue);
        data_dictionary->Add(&tags::SelectorTMValue);
        data_dictionary->Add(&tags::SelectorUCValue);
        data_dictionary->Add(&tags::SelectorUIValue);
        data_dictionary->Add(&tags::SelectorULValue);
        data_dictionary->Add(&tags::SelectorUNValue);
        data_dictionary->Add(&tags::SelectorURValue);
        data_dictionary->Add(&tags::SelectorUSValue);
        data_dictionary->Add(&tags::SelectorUTValue);
        data_dictionary->Add(&tags::SelectorValueNumber);
        data_dictionary->Add(&tags::SendingApplicationEntityTitle);
        data_dictionary->Add(&tags::Sensitivity);
        data_dictionary->Add(&tags::SensitivityCalibrated);
        data_dictionary->Add(&tags::SensitivityValue);
        data_dictionary->Add(&tags::SensorName);
        data_dictionary->Add(&tags::SensorTemperature);
        data_dictionary->Add(&tags::SequenceName);
        data_dictionary->Add(&tags::SequenceOfCompressedData);
        data_dictionary->Add(&tags::SequenceOfUltrasoundRegions);
        data_dictionary->Add(&tags::SequenceVariant);
        data_dictionary->Add(&tags::SequencingIndicatorTrial);
        data_dictionary->Add(&tags::SeriesDate);
        data_dictionary->Add(&tags::SeriesDescription);
        data_dictionary->Add(&tags::SeriesDescriptionCodeSequence);
        data_dictionary->Add(&tags::SeriesInstanceUID);
        data_dictionary->Add(&tags::SeriesInStudy);
        data_dictionary->Add(&tags::SeriesNumber);
        data_dictionary->Add(&tags::SeriesTime);
        data_dictionary->Add(&tags::SeriesType);
        data_dictionary->Add(&tags::ServiceEpisodeDescription);
        data_dictionary->Add(&tags::ServiceEpisodeID);
        data_dictionary->Add(&tags::SettlingPhaseFrame);
        data_dictionary->Add(&tags::SetupDeviceDescription);
        data_dictionary->Add(&tags::SetupDeviceLabel);
        data_dictionary->Add(&tags::SetupDeviceParameter);
        data_dictionary->Add(&tags::SetupDeviceSequence);
        data_dictionary->Add(&tags::SetupDeviceType);
        data_dictionary->Add(&tags::SetupImageComment);
        data_dictionary->Add(&tags::SetupReferenceDescription);
        data_dictionary->Add(&tags::SetupTechnique);
        data_dictionary->Add(&tags::SetupTechniqueDescription);
        data_dictionary->Add(&tags::ShadingStyle);
        data_dictionary->Add(&tags::ShadowColorCIELabValue);
        data_dictionary->Add(&tags::ShadowOffsetX);
        data_dictionary->Add(&tags::ShadowOffsetY);
        data_dictionary->Add(&tags::ShadowOpacity);
        data_dictionary->Add(&tags::ShadowStyle);
        data_dictionary->Add(&tags::ShapeType);
        data_dictionary->Add(&tags::SharedFunctionalGroupsSequence);
        data_dictionary->Add(&tags::ShieldingDeviceDescription);
        data_dictionary->Add(&tags::ShieldingDeviceLabel);
        data_dictionary->Add(&tags::ShieldingDevicePosition);
        data_dictionary->Add(&tags::ShieldingDeviceSequence);
        data_dictionary->Add(&tags::ShieldingDeviceType);
        data_dictionary->Add(&tags::ShiftTableSize);
        data_dictionary->Add(&tags::ShiftTableTriplet);
        data_dictionary->Add(&tags::Shininess);
        data_dictionary->Add(&tags::ShortTermFluctuation);
        data_dictionary->Add(&tags::ShortTermFluctuationCalculated);
        data_dictionary->Add(&tags::ShortTermFluctuationProbability);
        data_dictionary->Add(&tags::ShortTermFluctuationProbabilityCalculated);
        data_dictionary->Add(&tags::ShotDurationTime);
        data_dictionary->Add(&tags::ShotOffsetTime);
        data_dictionary->Add(&tags::ShowAcquisitionTechniquesFlag);
        data_dictionary->Add(&tags::ShowGraphicAnnotationFlag);
        data_dictionary->Add(&tags::ShowGrayscaleInverted);
        data_dictionary->Add(&tags::ShowImageTrueSizeFlag);
        data_dictionary->Add(&tags::ShowPatientDemographicsFlag);
        data_dictionary->Add(&tags::ShowTickLabel);
        data_dictionary->Add(&tags::ShutterLeftVerticalEdge);
        data_dictionary->Add(&tags::ShutterLowerHorizontalEdge);
        data_dictionary->Add(&tags::ShutterOverlayGroup);
        data_dictionary->Add(&tags::ShutterPresentationColorCIELabValue);
        data_dictionary->Add(&tags::ShutterPresentationValue);
        data_dictionary->Add(&tags::ShutterRightVerticalEdge);
        data_dictionary->Add(&tags::ShutterShape);
        data_dictionary->Add(&tags::ShutterUpperHorizontalEdge);
        data_dictionary->Add(&tags::SignalDomainColumns);
        data_dictionary->Add(&tags::SignalDomainRows);
        data_dictionary->Add(&tags::SignalToNoiseRatio);
        data_dictionary->Add(&tags::Signature);
        data_dictionary->Add(&tags::SimpleFrameList);
        data_dictionary->Add(&tags::SimulatedKeratometricCylinderSequence);
        data_dictionary->Add(&tags::SingleCollimationWidth);
        data_dictionary->Add(&tags::SkipBeats);
        data_dictionary->Add(&tags::SkipFrameRangeFlag);
        data_dictionary->Add(&tags::SlabOrientation);
        data_dictionary->Add(&tags::SlabThickness);
        data_dictionary->Add(&tags::SliceLocation);
        data_dictionary->Add(&tags::SliceLocationVector);
        data_dictionary->Add(&tags::SliceProgressionDirection);
        data_dictionary->Add(&tags::SliceSensitivityFactor);
        data_dictionary->Add(&tags::SliceThickness);
        data_dictionary->Add(&tags::SliceVector);
        data_dictionary->Add(&tags::SlideIdentifier);
        data_dictionary->Add(&tags::SmallestImagePixelValue);
        data_dictionary->Add(&tags::SmallestImagePixelValueInPlane);
        data_dictionary->Add(&tags::SmallestPixelValueInSeries);
        data_dictionary->Add(&tags::SmallestValidPixelValue);
        data_dictionary->Add(&tags::SmokingStatus);
        data_dictionary->Add(&tags::SmoothingType);
        data_dictionary->Add(&tags::SnoutID);
        data_dictionary->Add(&tags::SnoutPosition);
        data_dictionary->Add(&tags::SnoutPositionTolerance);
        data_dictionary->Add(&tags::SnoutSequence);
        data_dictionary->Add(&tags::SNRThreshold);
        data_dictionary->Add(&tags::SoftcopyVOILUTSequence);
        data_dictionary->Add(&tags::SoftTissueFocusThermalIndex);
        data_dictionary->Add(&tags::SoftTissueSurfaceThermalIndex);
        data_dictionary->Add(&tags::SoftTissueThermalIndex);
        data_dictionary->Add(&tags::SoftwareVersions);
        data_dictionary->Add(&tags::SOPAuthorizationComment);
        data_dictionary->Add(&tags::SOPAuthorizationDateTime);
        data_dictionary->Add(&tags::SOPClassesInStudy);
        data_dictionary->Add(&tags::SOPClassesSupported);
        data_dictionary->Add(&tags::SOPClassUID);
        data_dictionary->Add(&tags::SOPInstanceStatus);
        data_dictionary->Add(&tags::SOPInstanceUID);
        data_dictionary->Add(&tags::SOPInstanceUIDOfConcatenationSource);
        data_dictionary->Add(&tags::SortByCategory);
        data_dictionary->Add(&tags::SortingDirection);
        data_dictionary->Add(&tags::SortingOperationsSequence);
        data_dictionary->Add(&tags::SoundPathLength);
        data_dictionary->Add(&tags::SourceAcquisitionBeamNumber);
        data_dictionary->Add(&tags::SourceAcquisitionProtocolElementNumber);
        data_dictionary->Add(&tags::SourceApplicationEntityTitle);
        data_dictionary->Add(&tags::SourceApplicatorID);
        data_dictionary->Add(&tags::SourceApplicatorLength);
        data_dictionary->Add(&tags::SourceApplicatorManufacturer);
        data_dictionary->Add(&tags::SourceApplicatorName);
        data_dictionary->Add(&tags::SourceApplicatorNumber);
        data_dictionary->Add(&tags::SourceApplicatorStepSize);
        data_dictionary->Add(&tags::SourceApplicatorTipLength);
        data_dictionary->Add(&tags::SourceApplicatorType);
        data_dictionary->Add(&tags::SourceApplicatorWallNominalThickness);
        data_dictionary->Add(&tags::SourceApplicatorWallNominalTransmission);
        data_dictionary->Add(&tags::SourceAxisDistance);
        data_dictionary->Add(&tags::SourceDescription);
        data_dictionary->Add(&tags::SourceEncapsulationNominalThickness);
        data_dictionary->Add(&tags::SourceEncapsulationNominalTransmission);
        data_dictionary->Add(&tags::SourceFrameOfReferenceUID);
        data_dictionary->Add(&tags::SourceHangingProtocolSequence);
        data_dictionary->Add(&tags::SourceImageCornealProcessedDataSequence);
        data_dictionary->Add(&tags::SourceImageEvidenceSequence);
        data_dictionary->Add(&tags::SourceImageIDs);
        data_dictionary->Add(&tags::SourceImageSequence);
        data_dictionary->Add(&tags::SourceInstanceSequence);
        data_dictionary->Add(&tags::SourceIrradiationEventSequence);
        data_dictionary->Add(&tags::SourceIsotopeHalfLife);
        data_dictionary->Add(&tags::SourceIsotopeName);
        data_dictionary->Add(&tags::SourceManufacturer);
        data_dictionary->Add(&tags::SourceModelID);
        data_dictionary->Add(&tags::SourceMovementType);
        data_dictionary->Add(&tags::SourceNumber);
        data_dictionary->Add(&tags::SourceOfAnteriorChamberDepthDataCodeSequence);
        data_dictionary->Add(&tags::SourceOfLensThicknessDataCodeSequence);
        data_dictionary->Add(&tags::SourceOfOphthalmicAxialLengthCodeSequence);
        data_dictionary->Add(&tags::SourceOfPreviousValues);
        data_dictionary->Add(&tags::SourceOfRefractiveMeasurementsCodeSequence);
        data_dictionary->Add(&tags::SourceOfRefractiveMeasurementsSequence);
        data_dictionary->Add(&tags::SourceOrientation);
        data_dictionary->Add(&tags::SourcePatientGroupIdentificationSequence);
        data_dictionary->Add(&tags::SourcePosition);
        data_dictionary->Add(&tags::SourceReconstructionProtocolElementNumber);
        data_dictionary->Add(&tags::SourceSequence);
        data_dictionary->Add(&tags::SourceSerialNumber);
        data_dictionary->Add(&tags::SourceStrength);
        data_dictionary->Add(&tags::SourceStrengthReferenceDate);
        data_dictionary->Add(&tags::SourceStrengthReferenceTime);
        data_dictionary->Add(&tags::SourceStrengthUnits);
        data_dictionary->Add(&tags::SourceToApplicatorMountingPositionDistance);
        data_dictionary->Add(&tags::SourceToBeamLimitingDeviceDistance);
        data_dictionary->Add(&tags::SourceToBlockTrayDistance);
        data_dictionary->Add(&tags::SourceToCompensatorDistance);
        data_dictionary->Add(&tags::SourceToCompensatorTrayDistance);
        data_dictionary->Add(&tags::SourceToExternalContourDistance);
        data_dictionary->Add(&tags::SourceToGeneralAccessoryDistance);
        data_dictionary->Add(&tags::SourceToReferenceObjectDistance);
        data_dictionary->Add(&tags::SourceToSurfaceDistance);
        data_dictionary->Add(&tags::SourceToWedgeTrayDistance);
        data_dictionary->Add(&tags::SourceType);
        data_dictionary->Add(&tags::SourceWaveformSequence);
        data_dictionary->Add(&tags::SpacingBetweenSlices);
        data_dictionary->Add(&tags::SpatialLocationsPreserved);
        data_dictionary->Add(&tags::SpatialPresaturation);
        data_dictionary->Add(&tags::SpatialResolution);
        data_dictionary->Add(&tags::SpatialTransformOfDose);
        data_dictionary->Add(&tags::SpecialNeeds);
        data_dictionary->Add(&tags::SpecificAbsorptionRateDefinition);
        data_dictionary->Add(&tags::SpecificAbsorptionRateSequence);
        data_dictionary->Add(&tags::SpecificAbsorptionRateValue);
        data_dictionary->Add(&tags::SpecificationSelectionGuidance);
        data_dictionary->Add(&tags::SpecificCharacterSet);
        data_dictionary->Add(&tags::SpecificCharacterSetOfFileSetDescriptorFile);
        data_dictionary->Add(&tags::SpecifiedChannelTotalTime);
        data_dictionary->Add(&tags::SpecifiedMeterset);
        data_dictionary->Add(&tags::SpecifiedNumberOfPulses);
        data_dictionary->Add(&tags::SpecifiedPrimaryMeterset);
        data_dictionary->Add(&tags::SpecifiedPulseRepetitionInterval);
        data_dictionary->Add(&tags::SpecifiedSecondaryMeterset);
        data_dictionary->Add(&tags::SpecifiedTreatmentTime);
        data_dictionary->Add(&tags::SpecimenAccessionNumber);
        data_dictionary->Add(&tags::SpecimenDescriptionSequence);
        data_dictionary->Add(&tags::SpecimenDescriptionSequenceTrial);
        data_dictionary->Add(&tags::SpecimenDescriptionTrial);
        data_dictionary->Add(&tags::SpecimenDetailedDescription);
        data_dictionary->Add(&tags::SpecimenIdentifier);
        data_dictionary->Add(&tags::SpecimenLabelInImage);
        data_dictionary->Add(&tags::SpecimenLocalizationContentItemSequence);
        data_dictionary->Add(&tags::SpecimenPreparationSequence);
        data_dictionary->Add(&tags::SpecimenPreparationStepContentItemSequence);
        data_dictionary->Add(&tags::SpecimenReferenceSequence);
        data_dictionary->Add(&tags::SpecimenSequence);
        data_dictionary->Add(&tags::SpecimenShortDescription);
        data_dictionary->Add(&tags::SpecimenTypeCodeSequence);
        data_dictionary->Add(&tags::SpecimenUID);
        data_dictionary->Add(&tags::SpectrallySelectedExcitation);
        data_dictionary->Add(&tags::SpectrallySelectedSuppression);
        data_dictionary->Add(&tags::SpectralWidth);
        data_dictionary->Add(&tags::SpectroscopyAcquisitionDataColumns);
        data_dictionary->Add(&tags::SpectroscopyAcquisitionOutOfPlanePhaseSteps);
        data_dictionary->Add(&tags::SpectroscopyAcquisitionPhaseColumns);
        data_dictionary->Add(&tags::SpectroscopyAcquisitionPhaseRows);
        data_dictionary->Add(&tags::SpectroscopyData);
        data_dictionary->Add(&tags::SpecularReflectionIntensity);
        data_dictionary->Add(&tags::SpherePower);
        data_dictionary->Add(&tags::SphericalLensPower);
        data_dictionary->Add(&tags::SpiralPitchFactor);
        data_dictionary->Add(&tags::Spoiling);
        data_dictionary->Add(&tags::StackID);
        data_dictionary->Add(&tags::StageCodeSequence);
        data_dictionary->Add(&tags::StageName);
        data_dictionary->Add(&tags::StageNumber);
        data_dictionary->Add(&tags::StartAcquisitionDateTime);
        data_dictionary->Add(&tags::StartAngle);
        data_dictionary->Add(&tags::StartCardiacTriggerCountThreshold);
        data_dictionary->Add(&tags::StartCumulativeMetersetWeight);
        data_dictionary->Add(&tags::StartCumulativeTimeWeight);
        data_dictionary->Add(&tags::StartDensityThreshold);
        data_dictionary->Add(&tags::StartingRespiratoryAmplitude);
        data_dictionary->Add(&tags::StartingRespiratoryPhase);
        data_dictionary->Add(&tags::StartMeterset);
        data_dictionary->Add(&tags::StartRelativeDensityDifferenceThreshold);
        data_dictionary->Add(&tags::StartRespiratoryTriggerCountThreshold);
        data_dictionary->Add(&tags::StartTrim);
        data_dictionary->Add(&tags::StationAETitle);
        data_dictionary->Add(&tags::StationName);
        data_dictionary->Add(&tags::SteadyStatePulseSequence);
        data_dictionary->Add(&tags::SteepKeratometricAxisSequence);
        data_dictionary->Add(&tags::SteeringAngle);
        data_dictionary->Add(&tags::StereoBaselineAngle);
        data_dictionary->Add(&tags::StereoBaselineDisplacement);
        data_dictionary->Add(&tags::StereoHorizontalPixelOffset);
        data_dictionary->Add(&tags::StereoPairsPresent);
        data_dictionary->Add(&tags::StereoPairsSequence);
        data_dictionary->Add(&tags::StereoRotation);
        data_dictionary->Add(&tags::StereoVerticalPixelOffset);
        data_dictionary->Add(&tags::StimuliRetestingQuantity);
        data_dictionary->Add(&tags::StimulusArea);
        data_dictionary->Add(&tags::StimulusColorCodeSequence);
        data_dictionary->Add(&tags::StimulusPresentationTime);
        data_dictionary->Add(&tags::StimulusResults);
        data_dictionary->Add(&tags::StopTrim);
        data_dictionary->Add(&tags::StorageMediaFileSetID);
        data_dictionary->Add(&tags::StorageMediaFileSetUID);
        data_dictionary->Add(&tags::StorageProtocolElementSequence);
        data_dictionary->Add(&tags::StorageProtocolElementSpecificationSequence);
        data_dictionary->Add(&tags::StorageURL);
        data_dictionary->Add(&tags::StoredValueColorRangeSequence);
        data_dictionary->Add(&tags::STOWRSStorageSequence);
        data_dictionary->Add(&tags::StrainAdditionalInformation);
        data_dictionary->Add(&tags::StrainCodeSequence);
        data_dictionary->Add(&tags::StrainDescription);
        data_dictionary->Add(&tags::StrainNomenclature);
        data_dictionary->Add(&tags::StrainSource);
        data_dictionary->Add(&tags::StrainSourceRegistryCodeSequence);
        data_dictionary->Add(&tags::StrainStockNumber);
        data_dictionary->Add(&tags::StrainStockSequence);
        data_dictionary->Add(&tags::StructuredConstraintObservationSequence);
        data_dictionary->Add(&tags::StructuredDisplayBackgroundCIELabValue);
        data_dictionary->Add(&tags::StructuredDisplayImageBoxSequence);
        data_dictionary->Add(&tags::StructuredDisplayTextBoxSequence);
        data_dictionary->Add(&tags::StructureSetDate);
        data_dictionary->Add(&tags::StructureSetDescription);
        data_dictionary->Add(&tags::StructureSetLabel);
        data_dictionary->Add(&tags::StructureSetName);
        data_dictionary->Add(&tags::StructureSetROISequence);
        data_dictionary->Add(&tags::StructureSetTime);
        data_dictionary->Add(&tags::StudiesContainingOtherReferencedInstancesSequence);
        data_dictionary->Add(&tags::StudyArrivalDate);
        data_dictionary->Add(&tags::StudyArrivalTime);
        data_dictionary->Add(&tags::StudyComments);
        data_dictionary->Add(&tags::StudyCompletionDate);
        data_dictionary->Add(&tags::StudyCompletionTime);
        data_dictionary->Add(&tags::StudyComponentStatusID);
        data_dictionary->Add(&tags::StudyDate);
        data_dictionary->Add(&tags::StudyDescription);
        data_dictionary->Add(&tags::StudyID);
        data_dictionary->Add(&tags::StudyIDIssuer);
        data_dictionary->Add(&tags::StudyInstanceUID);
        data_dictionary->Add(&tags::StudyPriorityID);
        data_dictionary->Add(&tags::StudyReadDate);
        data_dictionary->Add(&tags::StudyReadTime);
        data_dictionary->Add(&tags::StudyStatusID);
        data_dictionary->Add(&tags::StudyTime);
        data_dictionary->Add(&tags::StudyVerifiedDate);
        data_dictionary->Add(&tags::StudyVerifiedTime);
        data_dictionary->Add(&tags::SubjectiveRefractionLeftEyeSequence);
        data_dictionary->Add(&tags::SubjectiveRefractionRightEyeSequence);
        data_dictionary->Add(&tags::SubjectRelativePositionInImage);
        data_dictionary->Add(&tags::SubscriptionListStatus);
        data_dictionary->Add(&tags::SubstanceAdministrationApproval);
        data_dictionary->Add(&tags::SubstanceAdministrationDateTime);
        data_dictionary->Add(&tags::SubstanceAdministrationDeviceID);
        data_dictionary->Add(&tags::SubstanceAdministrationNotes);
        data_dictionary->Add(&tags::SubstanceAdministrationParameterSequence);
        data_dictionary->Add(&tags::SubtractionItemID);
        data_dictionary->Add(&tags::SupportedImageDisplayFormatsSequence);
        data_dictionary->Add(&tags::SurfaceAsymmetryIndex);
        data_dictionary->Add(&tags::SurfaceComments);
        data_dictionary->Add(&tags::SurfaceCount);
        data_dictionary->Add(&tags::SurfaceEntryPoint);
        data_dictionary->Add(&tags::SurfaceMeshPrimitivesSequence);
        data_dictionary->Add(&tags::SurfaceMeshZPixelOffset);
        data_dictionary->Add(&tags::SurfaceModelDescriptionSequence);
        data_dictionary->Add(&tags::SurfaceModelLabel);
        data_dictionary->Add(&tags::SurfaceModelScalingFactor);
        data_dictionary->Add(&tags::SurfaceNumber);
        data_dictionary->Add(&tags::SurfacePointColorCIELabValueData);
        data_dictionary->Add(&tags::SurfacePointPresentationValueData);
        data_dictionary->Add(&tags::SurfacePointsNormalsSequence);
        data_dictionary->Add(&tags::SurfacePointsSequence);
        data_dictionary->Add(&tags::SurfaceProcessing);
        data_dictionary->Add(&tags::SurfaceProcessingAlgorithmIdentificationSequence);
        data_dictionary->Add(&tags::SurfaceProcessingDescription);
        data_dictionary->Add(&tags::SurfaceProcessingRatio);
        data_dictionary->Add(&tags::SurfaceRegularityIndex);
        data_dictionary->Add(&tags::SurfaceScanAcquisitionTypeCodeSequence);
        data_dictionary->Add(&tags::SurfaceScanModeCodeSequence);
        data_dictionary->Add(&tags::SurfaceSequence);
        data_dictionary->Add(&tags::SurgicalTechnique);
        data_dictionary->Add(&tags::SUVType);
        data_dictionary->Add(&tags::SwivelRange);
        data_dictionary->Add(&tags::SynchronizationChannel);
        data_dictionary->Add(&tags::SynchronizationFrameOfReferenceUID);
        data_dictionary->Add(&tags::SynchronizationTrigger);
        data_dictionary->Add(&tags::SynchronizedImageBoxList);
        data_dictionary->Add(&tags::SynchronizedScrollingSequence);
        data_dictionary->Add(&tags::SyringeCounts);
        data_dictionary->Add(&tags::SystemStatus);
        data_dictionary->Add(&tags::SystemStatusComment);
        data_dictionary->Add(&tags::T2Preparation);
        data_dictionary->Add(&tags::TableAngle);
        data_dictionary->Add(&tags::TableCradleTiltAngle);
        data_dictionary->Add(&tags::TableFeedPerRotation);
        data_dictionary->Add(&tags::TableFrameOfReferenceUID);
        data_dictionary->Add(&tags::TableHeadTiltAngle);
        data_dictionary->Add(&tags::TableHeight);
        data_dictionary->Add(&tags::TableHorizontalRotationAngle);
        data_dictionary->Add(&tags::TableLateralIncrement);
        data_dictionary->Add(&tags::TableLongitudinalIncrement);
        data_dictionary->Add(&tags::TableMotion);
        data_dictionary->Add(&tags::TableOfParameterValues);
        data_dictionary->Add(&tags::TableOfPixelValues);
        data_dictionary->Add(&tags::TableOfXBreakPoints);
        data_dictionary->Add(&tags::TableOfYBreakPoints);
        data_dictionary->Add(&tags::TablePosition);
        data_dictionary->Add(&tags::TablePositionSequence);
        data_dictionary->Add(&tags::TableSpeed);
        data_dictionary->Add(&tags::TableTopEccentricAdjustedAngle);
        data_dictionary->Add(&tags::TableTopEccentricAngle);
        data_dictionary->Add(&tags::TableTopEccentricAngleTolerance);
        data_dictionary->Add(&tags::TableTopEccentricAxisDistance);
        data_dictionary->Add(&tags::TableTopEccentricRotationDirection);
        data_dictionary->Add(&tags::TableTopLateralAdjustedPosition);
        data_dictionary->Add(&tags::TableTopLateralPosition);
        data_dictionary->Add(&tags::TableTopLateralPositionTolerance);
        data_dictionary->Add(&tags::TableTopLateralSetupDisplacement);
        data_dictionary->Add(&tags::TableTopLongitudinalAdjustedPosition);
        data_dictionary->Add(&tags::TableTopLongitudinalPosition);
        data_dictionary->Add(&tags::TableTopLongitudinalPositionTolerance);
        data_dictionary->Add(&tags::TableTopLongitudinalSetupDisplacement);
        data_dictionary->Add(&tags::TableTopPitchAdjustedAngle);
        data_dictionary->Add(&tags::TableTopPitchAngle);
        data_dictionary->Add(&tags::TableTopPitchAngleTolerance);
        data_dictionary->Add(&tags::TableTopPitchRotationDirection);
        data_dictionary->Add(&tags::TableTopRollAdjustedAngle);
        data_dictionary->Add(&tags::TableTopRollAngle);
        data_dictionary->Add(&tags::TableTopRollAngleTolerance);
        data_dictionary->Add(&tags::TableTopRollRotationDirection);
        data_dictionary->Add(&tags::TableTopVerticalAdjustedPosition);
        data_dictionary->Add(&tags::TableTopVerticalPosition);
        data_dictionary->Add(&tags::TableTopVerticalPositionTolerance);
        data_dictionary->Add(&tags::TableTopVerticalSetupDisplacement);
        data_dictionary->Add(&tags::TableTraverse);
        data_dictionary->Add(&tags::TableType);
        data_dictionary->Add(&tags::TableVerticalIncrement);
        data_dictionary->Add(&tags::TableXPositionToIsocenter);
        data_dictionary->Add(&tags::TableYPositionToIsocenter);
        data_dictionary->Add(&tags::TableZPositionToIsocenter);
        data_dictionary->Add(&tags::TagAngleFirstAxis);
        data_dictionary->Add(&tags::TagAngleSecondAxis);
        data_dictionary->Add(&tags::Tagging);
        data_dictionary->Add(&tags::TaggingDelay);
        data_dictionary->Add(&tags::TagSpacingFirstDimension);
        data_dictionary->Add(&tags::TagSpacingSecondDimension);
        data_dictionary->Add(&tags::TagThickness);
        data_dictionary->Add(&tags::TangentialPower);
        data_dictionary->Add(&tags::TargetExposureIndex);
        data_dictionary->Add(&tags::TargetFrameOfReferenceUID);
        data_dictionary->Add(&tags::TargetLabel);
        data_dictionary->Add(&tags::TargetLuminanceCharacteristicsSequence);
        data_dictionary->Add(&tags::TargetMaterialSequence);
        data_dictionary->Add(&tags::TargetMaximumDose);
        data_dictionary->Add(&tags::TargetMaximumLuminance);
        data_dictionary->Add(&tags::TargetMinimumDose);
        data_dictionary->Add(&tags::TargetMinimumLuminance);
        data_dictionary->Add(&tags::TargetPositionReferenceIndicator);
        data_dictionary->Add(&tags::TargetPrescriptionDose);
        data_dictionary->Add(&tags::TargetRefraction);
        data_dictionary->Add(&tags::TargetUID);
        data_dictionary->Add(&tags::TargetUnderdoseVolumeFraction);
        data_dictionary->Add(&tags::TDRType);
        data_dictionary->Add(&tags::TelephoneNumberTrial);
        data_dictionary->Add(&tags::TemplateExtensionCreatorUID);
        data_dictionary->Add(&tags::TemplateExtensionFlag);
        data_dictionary->Add(&tags::TemplateExtensionOrganizationUID);
        data_dictionary->Add(&tags::TemplateIdentifier);
        data_dictionary->Add(&tags::TemplateLocalVersion);
        data_dictionary->Add(&tags::TemplateName);
        data_dictionary->Add(&tags::TemplateNumber);
        data_dictionary->Add(&tags::TemplateType);
        data_dictionary->Add(&tags::TemplateVersion);
        data_dictionary->Add(&tags::TemporalPositionIdentifier);
        data_dictionary->Add(&tags::TemporalPositionIndex);
        data_dictionary->Add(&tags::TemporalPositionSequence);
        data_dictionary->Add(&tags::TemporalPositionTimeOffset);
        data_dictionary->Add(&tags::TemporalRangeType);
        data_dictionary->Add(&tags::TemporalResolution);
        data_dictionary->Add(&tags::TerminationCardiacTriggerCountThreshold);
        data_dictionary->Add(&tags::TerminationCountsThreshold);
        data_dictionary->Add(&tags::TerminationDensityThreshold);
        data_dictionary->Add(&tags::TerminationRelativeDensityThreshold);
        data_dictionary->Add(&tags::TerminationRespiratoryTriggerCountThreshold);
        data_dictionary->Add(&tags::TerminationTimeThreshold);
        data_dictionary->Add(&tags::TestImageValidation);
        data_dictionary->Add(&tags::TestPatternCodeSequence);
        data_dictionary->Add(&tags::TestPointNormalsDataFlag);
        data_dictionary->Add(&tags::TestPointNormalsSequence);
        data_dictionary->Add(&tags::TestResult);
        data_dictionary->Add(&tags::TestResultComment);
        data_dictionary->Add(&tags::TextColorCIELabValue);
        data_dictionary->Add(&tags::TextComments);
        data_dictionary->Add(&tags::TextObjectSequence);
        data_dictionary->Add(&tags::TextString);
        data_dictionary->Add(&tags::TextStyleSequence);
        data_dictionary->Add(&tags::TextureLabel);
        data_dictionary->Add(&tags::TextValue);
        data_dictionary->Add(&tags::TherapyDescription);
        data_dictionary->Add(&tags::TherapyType);
        data_dictionary->Add(&tags::ThreatCategory);
        data_dictionary->Add(&tags::ThreatCategoryDescription);
        data_dictionary->Add(&tags::ThreatDetectionAlgorithmandVersion);
        data_dictionary->Add(&tags::ThreatROIBase);
        data_dictionary->Add(&tags::ThreatROIBitmap);
        data_dictionary->Add(&tags::ThreatROIExtents);
        data_dictionary->Add(&tags::ThreatROIVoxelSequence);
        data_dictionary->Add(&tags::ThreatSequence);
        data_dictionary->Add(&tags::ThreeDDegreeOfFreedomAxis);
        data_dictionary->Add(&tags::ThreeDImplantTemplateGroupMemberMatchingAxes);
        data_dictionary->Add(&tags::ThreeDImplantTemplateGroupMemberMatchingPoint);
        data_dictionary->Add(&tags::ThreeDLineCoordinates);
        data_dictionary->Add(&tags::ThreeDMatingAxes);
        data_dictionary->Add(&tags::ThreeDMatingPoint);
        data_dictionary->Add(&tags::ThreeDPlaneNormal);
        data_dictionary->Add(&tags::ThreeDPlaneOrigin);
        data_dictionary->Add(&tags::ThreeDPointCoordinates);
        data_dictionary->Add(&tags::ThreeDRenderingType);
        data_dictionary->Add(&tags::ThresholdDensity);
        data_dictionary->Add(&tags::ThresholdSequence);
        data_dictionary->Add(&tags::ThresholdType);
        data_dictionary->Add(&tags::ThresholdValue);
        data_dictionary->Add(&tags::ThresholdValueSequence);
        data_dictionary->Add(&tags::TickAlignment);
        data_dictionary->Add(&tags::TickLabel);
        data_dictionary->Add(&tags::TickLabelAlignment);
        data_dictionary->Add(&tags::TickPosition);
        data_dictionary->Add(&tags::TIDOffset);
        data_dictionary->Add(&tags::Time);
        data_dictionary->Add(&tags::TimeBasedImageSetsSequence);
        data_dictionary->Add(&tags::TimeDistributionProtocol);
        data_dictionary->Add(&tags::TimeDomainFiltering);
        data_dictionary->Add(&tags::TimeOfDocumentCreationOrVerbalTransactionTrial);
        data_dictionary->Add(&tags::TimeOfFlightContrast);
        data_dictionary->Add(&tags::TimeOfFlightInformationUsed);
        data_dictionary->Add(&tags::TimeOfGainCalibration);
        data_dictionary->Add(&tags::TimeOfLastCalibration);
        data_dictionary->Add(&tags::TimeOfLastDetectorCalibration);
        data_dictionary->Add(&tags::TimeOfSecondaryCapture);
        data_dictionary->Add(&tags::TimeRange);
        data_dictionary->Add(&tags::TimeSeriesBlending);
        data_dictionary->Add(&tags::TimeSliceVector);
        data_dictionary->Add(&tags::TimeSlotInformationSequence);
        data_dictionary->Add(&tags::TimeSlotNumber);
        data_dictionary->Add(&tags::TimeSlotTime);
        data_dictionary->Add(&tags::TimeSlotVector);
        data_dictionary->Add(&tags::TimeSource);
        data_dictionary->Add(&tags::TimezoneOffsetFromUTC);
        data_dictionary->Add(&tags::TIPType);
        data_dictionary->Add(&tags::TissueHeterogeneityCorrection);
        data_dictionary->Add(&tags::TMLinePositionX0);
        data_dictionary->Add(&tags::TMLinePositionX0Retired);
        data_dictionary->Add(&tags::TMLinePositionX1);
        data_dictionary->Add(&tags::TMLinePositionX1Retired);
        data_dictionary->Add(&tags::TMLinePositionY0);
        data_dictionary->Add(&tags::TMLinePositionY0Retired);
        data_dictionary->Add(&tags::TMLinePositionY1);
        data_dictionary->Add(&tags::TMLinePositionY1Retired);
        data_dictionary->Add(&tags::ToleranceTableLabel);
        data_dictionary->Add(&tags::ToleranceTableNumber);
        data_dictionary->Add(&tags::ToleranceTableSequence);
        data_dictionary->Add(&tags::TomoAngle);
        data_dictionary->Add(&tags::TomoClass);
        data_dictionary->Add(&tags::TomoLayerHeight);
        data_dictionary->Add(&tags::TomoTime);
        data_dictionary->Add(&tags::TomoType);
        data_dictionary->Add(&tags::TopicAuthor);
        data_dictionary->Add(&tags::TopicKeywords);
        data_dictionary->Add(&tags::TopicSubject);
        data_dictionary->Add(&tags::TopicTitle);
        data_dictionary->Add(&tags::TopLeftHandCornerOfLocalizerArea);
        data_dictionary->Add(&tags::TotalAperture);
        data_dictionary->Add(&tags::TotalBlockTrayFactor);
        data_dictionary->Add(&tags::TotalBlockTrayWaterEquivalentThickness);
        data_dictionary->Add(&tags::TotalCollimationWidth);
        data_dictionary->Add(&tags::TotalCompensatorTrayFactor);
        data_dictionary->Add(&tags::TotalCompensatorTrayWaterEquivalentThickness);
        data_dictionary->Add(&tags::TotalGain);
        data_dictionary->Add(&tags::TotalNumberOfExposures);
        data_dictionary->Add(&tags::TotalNumberOfPiecesOfMediaCreated);
        data_dictionary->Add(&tags::TotalPixelMatrixColumns);
        data_dictionary->Add(&tags::TotalPixelMatrixFocalPlanes);
        data_dictionary->Add(&tags::TotalPixelMatrixOriginSequence);
        data_dictionary->Add(&tags::TotalPixelMatrixRows);
        data_dictionary->Add(&tags::TotalProcessingTime);
        data_dictionary->Add(&tags::TotalReferenceAirKerma);
        data_dictionary->Add(&tags::TotalTime);
        data_dictionary->Add(&tags::TotalTimeOfFluoroscopy);
        data_dictionary->Add(&tags::TotalWedgeTrayWaterEquivalentThickness);
        data_dictionary->Add(&tags::TrackingAlgorithmIdentificationSequence);
        data_dictionary->Add(&tags::TrackingID);
        data_dictionary->Add(&tags::TrackingUID);
        data_dictionary->Add(&tags::TrackPointIndexList);
        data_dictionary->Add(&tags::TrackSequence);
        data_dictionary->Add(&tags::TrackSetAnatomicalTypeCodeSequence);
        data_dictionary->Add(&tags::TrackSetDescription);
        data_dictionary->Add(&tags::TrackSetLabel);
        data_dictionary->Add(&tags::TrackSetNumber);
        data_dictionary->Add(&tags::TrackSetSequence);
        data_dictionary->Add(&tags::TrackSetStatisticsSequence);
        data_dictionary->Add(&tags::TrackStatisticsSequence);
        data_dictionary->Add(&tags::TransactionUID);
        data_dictionary->Add(&tags::TransducerApplicationCodeSequence);
        data_dictionary->Add(&tags::TransducerBeamSteeringCodeSequence);
        data_dictionary->Add(&tags::TransducerData);
        data_dictionary->Add(&tags::TransducerFrequency);
        data_dictionary->Add(&tags::TransducerGeometryCodeSequence);
        data_dictionary->Add(&tags::TransducerOrientation);
        data_dictionary->Add(&tags::TransducerOrientationModifierSequence);
        data_dictionary->Add(&tags::TransducerOrientationSequence);
        data_dictionary->Add(&tags::TransducerPosition);
        data_dictionary->Add(&tags::TransducerPositionModifierSequence);
        data_dictionary->Add(&tags::TransducerPositionSequence);
        data_dictionary->Add(&tags::TransducerScanPatternCodeSequence);
        data_dictionary->Add(&tags::TransducerType);
        data_dictionary->Add(&tags::TransferSyntaxUID);
        data_dictionary->Add(&tags::TransferTubeLength);
        data_dictionary->Add(&tags::TransferTubeNumber);
        data_dictionary->Add(&tags::TransformationAlgorithmSequence);
        data_dictionary->Add(&tags::TransformationMethodCodeSequence);
        data_dictionary->Add(&tags::TransformDescription);
        data_dictionary->Add(&tags::TransformedAxisUnits);
        data_dictionary->Add(&tags::TransformLabel);
        data_dictionary->Add(&tags::TransformNumberOfAxes);
        data_dictionary->Add(&tags::TransformOrderOfAxes);
        data_dictionary->Add(&tags::TransformVersionNumber);
        data_dictionary->Add(&tags::TranslationRateX);
        data_dictionary->Add(&tags::TranslationRateY);
        data_dictionary->Add(&tags::TransmitCoilManufacturerName);
        data_dictionary->Add(&tags::TransmitCoilName);
        data_dictionary->Add(&tags::TransmitCoilType);
        data_dictionary->Add(&tags::TransmitterFrequency);
        data_dictionary->Add(&tags::TransmitTransducerSequence);
        data_dictionary->Add(&tags::TransmitTransducerSettingsSequence);
        data_dictionary->Add(&tags::TransportClassification);
        data_dictionary->Add(&tags::TransverseDetectorSeparation);
        data_dictionary->Add(&tags::TransverseMash);
        data_dictionary->Add(&tags::TrayAccessoryCode);
        data_dictionary->Add(&tags::TreatmentControlPointDate);
        data_dictionary->Add(&tags::TreatmentControlPointTime);
        data_dictionary->Add(&tags::TreatmentDate);
        data_dictionary->Add(&tags::TreatmentDeliveryType);
        data_dictionary->Add(&tags::TreatmentMachineName);
        data_dictionary->Add(&tags::TreatmentMachineSequence);
        data_dictionary->Add(&tags::TreatmentProtocols);
        data_dictionary->Add(&tags::TreatmentSessionApplicationSetupSequence);
        data_dictionary->Add(&tags::TreatmentSessionBeamSequence);
        data_dictionary->Add(&tags::TreatmentSessionIonBeamSequence);
        data_dictionary->Add(&tags::TreatmentSites);
        data_dictionary->Add(&tags::TreatmentStatusComment);
        data_dictionary->Add(&tags::TreatmentSummaryCalculatedDoseReferenceSequence);
        data_dictionary->Add(&tags::TreatmentSummaryMeasuredDoseReferenceSequence);
        data_dictionary->Add(&tags::TreatmentTerminationCode);
        data_dictionary->Add(&tags::TreatmentTerminationStatus);
        data_dictionary->Add(&tags::TreatmentTime);
        data_dictionary->Add(&tags::TreatmentVerificationStatus);
        data_dictionary->Add(&tags::TriangleFanSequence);
        data_dictionary->Add(&tags::TrianglePointIndexList);
        data_dictionary->Add(&tags::TriangleStripSequence);
        data_dictionary->Add(&tags::TriggerSamplePosition);
        data_dictionary->Add(&tags::TriggerSourceOrType);
        data_dictionary->Add(&tags::TriggerTime);
        data_dictionary->Add(&tags::TriggerTimeOffset);
        data_dictionary->Add(&tags::TriggerVector);
        data_dictionary->Add(&tags::TriggerWindow);
        data_dictionary->Add(&tags::Trim);
        data_dictionary->Add(&tags::TubeAngle);
        data_dictionary->Add(&tags::TwoDDegreeOfFreedomAxis);
        data_dictionary->Add(&tags::TwoDDegreeOfFreedomSequence);
        data_dictionary->Add(&tags::TwoDimensionalToThreeDimensionalMapData);
        data_dictionary->Add(&tags::TwoDimensionalToThreeDimensionalMapSequence);
        data_dictionary->Add(&tags::TwoDImplantTemplateGroupMemberMatchingAxes);
        data_dictionary->Add(&tags::TwoDImplantTemplateGroupMemberMatchingPoint);
        data_dictionary->Add(&tags::TwoDLineCoordinates);
        data_dictionary->Add(&tags::TwoDLineCoordinatesSequence);
        data_dictionary->Add(&tags::TwoDMatingAxes);
        data_dictionary->Add(&tags::TwoDMatingFeatureCoordinatesSequence);
        data_dictionary->Add(&tags::TwoDMatingPoint);
        data_dictionary->Add(&tags::TwoDPlaneCoordinatesSequence);
        data_dictionary->Add(&tags::TwoDPlaneIntersection);
        data_dictionary->Add(&tags::TwoDPointCoordinates);
        data_dictionary->Add(&tags::TwoDPointCoordinatesSequence);
        data_dictionary->Add(&tags::TypeOfData);
        data_dictionary->Add(&tags::TypeOfDetectorMotion);
        data_dictionary->Add(&tags::TypeOfFilters);
        data_dictionary->Add(&tags::TypeOfInstances);
        data_dictionary->Add(&tags::TypeOfPatientID);
        data_dictionary->Add(&tags::TypeOfSynchronization);
        data_dictionary->Add(&tags::UDISequence);
        data_dictionary->Add(&tags::UID);
        data_dictionary->Add(&tags::UltrasoundAcquisitionGeometry);
        data_dictionary->Add(&tags::UltrasoundColorDataPresent);
        data_dictionary->Add(&tags::UltrasoundOphthalmicAxialLengthMeasurementsSequence);
        data_dictionary->Add(&tags::UltrasoundSelectedOphthalmicAxialLengthSequence);
        data_dictionary->Add(&tags::UnassignedPerFrameConvertedAttributesSequence);
        data_dictionary->Add(&tags::UnassignedSharedConvertedAttributesSequence);
        data_dictionary->Add(&tags::Underlined);
        data_dictionary->Add(&tags::UnformattedTextValue);
        data_dictionary->Add(&tags::UnifiedProcedureStepListStatus);
        data_dictionary->Add(&tags::UnifiedProcedureStepPerformedProcedureSequence);
        data_dictionary->Add(&tags::UniformResourceLocatorTrial);
        data_dictionary->Add(&tags::UniqueDeviceIdentifier);
        data_dictionary->Add(&tags::Units);
        data_dictionary->Add(&tags::UniversalEntityID);
        data_dictionary->Add(&tags::UniversalEntityIDType);
        data_dictionary->Add(&tags::UnspecifiedLateralityLensSequence);
        data_dictionary->Add(&tags::UpperLowerPixelValues);
        data_dictionary->Add(&tags::UrgencyOrPriorityAlertsTrial);
        data_dictionary->Add(&tags::URNCodeValue);
        data_dictionary->Add(&tags::UsedFiducialsSequence);
        data_dictionary->Add(&tags::UsedSegmentsSequence);
        data_dictionary->Add(&tags::UserSelectedGainY);
        data_dictionary->Add(&tags::UserSelectedOffsetX);
        data_dictionary->Add(&tags::UserSelectedOffsetY);
        data_dictionary->Add(&tags::UserSelectedPhase);
        data_dictionary->Add(&tags::USImageDescriptionSequence);
        data_dictionary->Add(&tags::UValueData);
        data_dictionary->Add(&tags::UVMappingSequence);
        data_dictionary->Add(&tags::ValueType);
        data_dictionary->Add(&tags::VariableCoefficientsSDDN);
        data_dictionary->Add(&tags::VariableCoefficientsSDHN);
        data_dictionary->Add(&tags::VariableCoefficientsSDVN);
        data_dictionary->Add(&tags::VariableFlipAngleFlag);
        data_dictionary->Add(&tags::VariableNextDataGroup);
        data_dictionary->Add(&tags::VariablePixelData);
        data_dictionary->Add(&tags::VectorAccuracy);
        data_dictionary->Add(&tags::VectorCoordinateData);
        data_dictionary->Add(&tags::VectorDimensionality);
        data_dictionary->Add(&tags::VectorGridData);
        data_dictionary->Add(&tags::VelocityEncodingAcquisitionSequence);
        data_dictionary->Add(&tags::VelocityEncodingDirection);
        data_dictionary->Add(&tags::VelocityEncodingMaximumValue);
        data_dictionary->Add(&tags::VelocityEncodingMinimumValue);
        data_dictionary->Add(&tags::VelocityOfSound);
        data_dictionary->Add(&tags::VerbalSourceIdentifierCodeSequenceTrial);
        data_dictionary->Add(&tags::VerbalSourceTrial);
        data_dictionary->Add(&tags::VerificationDateTime);
        data_dictionary->Add(&tags::VerificationFlag);
        data_dictionary->Add(&tags::VerificationImageTiming);
        data_dictionary->Add(&tags::VerifyingObserverIdentificationCodeSequence);
        data_dictionary->Add(&tags::VerifyingObserverName);
        data_dictionary->Add(&tags::VerifyingObserverSequence);
        data_dictionary->Add(&tags::VerifyingOrganization);
        data_dictionary->Add(&tags::VertexPointIndexList);
        data_dictionary->Add(&tags::VerticalAlignment);
        data_dictionary->Add(&tags::VerticalOffsetOfSensor);
        data_dictionary->Add(&tags::VerticalPrismBase);
        data_dictionary->Add(&tags::VerticalPrismPower);
        data_dictionary->Add(&tags::VerticesOfTheOutlineOfPupil);
        data_dictionary->Add(&tags::VerticesOfThePolygonalCollimator);
        data_dictionary->Add(&tags::VerticesOfThePolygonalExposureControlSensingRegion);
        data_dictionary->Add(&tags::VerticesOfThePolygonalShutter);
        data_dictionary->Add(&tags::VerticesOfTheRegion);
        data_dictionary->Add(&tags::VideoImageFormatAcquired);
        data_dictionary->Add(&tags::ViewCodeSequence);
        data_dictionary->Add(&tags::ViewingDistance);
        data_dictionary->Add(&tags::ViewingDistanceType);
        data_dictionary->Add(&tags::ViewModifierCodeSequence);
        data_dictionary->Add(&tags::ViewName);
        data_dictionary->Add(&tags::ViewNumber);
        data_dictionary->Add(&tags::ViewOrientationCodeSequence);
        data_dictionary->Add(&tags::ViewOrientationModifierCodeSequence);
        data_dictionary->Add(&tags::ViewpointLookAtPoint);
        data_dictionary->Add(&tags::ViewpointPosition);
        data_dictionary->Add(&tags::ViewpointUpDirection);
        data_dictionary->Add(&tags::ViewPosition);
        data_dictionary->Add(&tags::VirtualSourceAxisDistances);
        data_dictionary->Add(&tags::VisitComments);
        data_dictionary->Add(&tags::VisitStatusID);
        data_dictionary->Add(&tags::VisualAcuityBothEyesOpenSequence);
        data_dictionary->Add(&tags::VisualAcuityLeftEyeSequence);
        data_dictionary->Add(&tags::VisualAcuityMeasurementSequence);
        data_dictionary->Add(&tags::VisualAcuityModifiers);
        data_dictionary->Add(&tags::VisualAcuityRightEyeSequence);
        data_dictionary->Add(&tags::VisualAcuityTypeCodeSequence);
        data_dictionary->Add(&tags::VisualEvaluationMethodCodeSequence);
        data_dictionary->Add(&tags::VisualEvaluationResultSequence);
        data_dictionary->Add(&tags::VisualEvaluationTestSequence);
        data_dictionary->Add(&tags::VisualFieldCatchTrialSequence);
        data_dictionary->Add(&tags::VisualFieldGlobalResultsIndexSequence);
        data_dictionary->Add(&tags::VisualFieldHorizontalExtent);
        data_dictionary->Add(&tags::VisualFieldMeanSensitivity);
        data_dictionary->Add(&tags::VisualFieldShape);
        data_dictionary->Add(&tags::VisualFieldTestDuration);
        data_dictionary->Add(&tags::VisualFieldTestNormalsFlag);
        data_dictionary->Add(&tags::VisualFieldTestPointNormalsSequence);
        data_dictionary->Add(&tags::VisualFieldTestPointSequence);
        data_dictionary->Add(&tags::VisualFieldTestPointXCoordinate);
        data_dictionary->Add(&tags::VisualFieldTestPointYCoordinate);
        data_dictionary->Add(&tags::VisualFieldTestReliabilityGlobalIndexSequence);
        data_dictionary->Add(&tags::VisualFieldVerticalExtent);
        data_dictionary->Add(&tags::VitalStainCodeSequenceTrial);
        data_dictionary->Add(&tags::VitreousStatusCodeSequence);
        data_dictionary->Add(&tags::VitreousStatusDescription);
        data_dictionary->Add(&tags::VOILUTFunction);
        data_dictionary->Add(&tags::VOILUTSequence);
        data_dictionary->Add(&tags::VOIType);
        data_dictionary->Add(&tags::VolumeBasedCalculationTechnique);
        data_dictionary->Add(&tags::VolumeCroppingMethod);
        data_dictionary->Add(&tags::VolumeCroppingSequence);
        data_dictionary->Add(&tags::VolumeFrameOfReferenceUID);
        data_dictionary->Add(&tags::VolumeLocalizationSequence);
        data_dictionary->Add(&tags::VolumeLocalizationTechnique);
        data_dictionary->Add(&tags::VolumeOfPTO);
        data_dictionary->Add(&tags::VolumeStreamSequence);
        data_dictionary->Add(&tags::VolumeToTableMappingMatrix);
        data_dictionary->Add(&tags::VolumeToTransducerMappingMatrix);
        data_dictionary->Add(&tags::VolumeToTransducerRelationship);
        data_dictionary->Add(&tags::VolumetricAnnotationSequence);
        data_dictionary->Add(&tags::VolumetricCurvePoints);
        data_dictionary->Add(&tags::VolumetricCurveUpDirections);
        data_dictionary->Add(&tags::VolumetricPresentationInputAnnotationSequence);
        data_dictionary->Add(&tags::VolumetricPresentationInputIndex);
        data_dictionary->Add(&tags::VolumetricPresentationInputNumber);
        data_dictionary->Add(&tags::VolumetricPresentationInputSetSequence);
        data_dictionary->Add(&tags::VolumetricPresentationInputSetUID);
        data_dictionary->Add(&tags::VolumetricPresentationStateInputSequence);
        data_dictionary->Add(&tags::VolumetricProperties);
        data_dictionary->Add(&tags::VValueData);
        data_dictionary->Add(&tags::WADORetrievalSequence);
        data_dictionary->Add(&tags::WADORSRetrievalSequence);
        data_dictionary->Add(&tags::WarningReason);
        data_dictionary->Add(&tags::WaterEquivalentDiameter);
        data_dictionary->Add(&tags::WaterEquivalentDiameterCalculationMethodCodeSequence);
        data_dictionary->Add(&tags::WaterReferenceAcquisition);
        data_dictionary->Add(&tags::WaterReferencedPhaseCorrection);
        data_dictionary->Add(&tags::WaveformAnnotationSequence);
        data_dictionary->Add(&tags::WaveformBitsAllocated);
        data_dictionary->Add(&tags::WaveformBitsStored);
        data_dictionary->Add(&tags::WaveformChannelNumber);
        data_dictionary->Add(&tags::WaveformData);
        data_dictionary->Add(&tags::WaveformDataDisplayScale);
        data_dictionary->Add(&tags::WaveformDisplayBackgroundCIELabValue);
        data_dictionary->Add(&tags::WaveformOriginality);
        data_dictionary->Add(&tags::WaveformPaddingValue);
        data_dictionary->Add(&tags::WaveformPresentationGroupSequence);
        data_dictionary->Add(&tags::WaveformSampleInterpretation);
        data_dictionary->Add(&tags::WaveformSequence);
        data_dictionary->Add(&tags::WedgeAngle);
        data_dictionary->Add(&tags::WedgeAngleFloat);
        data_dictionary->Add(&tags::WedgeChamferHeight);
        data_dictionary->Add(&tags::WedgeCurve);
        data_dictionary->Add(&tags::WedgeDescription);
        data_dictionary->Add(&tags::WedgeElement1Position);
        data_dictionary->Add(&tags::WedgeFactor);
        data_dictionary->Add(&tags::WedgeFrontGap);
        data_dictionary->Add(&tags::WedgeFrontHeight);
        data_dictionary->Add(&tags::WedgeID);
        data_dictionary->Add(&tags::WedgeInContactLength);
        data_dictionary->Add(&tags::WedgeInContactWidth);
        data_dictionary->Add(&tags::WedgeManufacturerName);
        data_dictionary->Add(&tags::WedgeMaterial);
        data_dictionary->Add(&tags::WedgeMaterialVelocity);
        data_dictionary->Add(&tags::WedgeModelNumber);
        data_dictionary->Add(&tags::WedgeName);
        data_dictionary->Add(&tags::WedgeNumber);
        data_dictionary->Add(&tags::WedgeOffsetX);
        data_dictionary->Add(&tags::WedgeOffsetY);
        data_dictionary->Add(&tags::WedgeOffsetZ);
        data_dictionary->Add(&tags::WedgeOrientation);
        data_dictionary->Add(&tags::WedgeOriginOffsetX);
        data_dictionary->Add(&tags::WedgePosition);
        data_dictionary->Add(&tags::WedgePositionSequence);
        data_dictionary->Add(&tags::WedgeRearHeight);
        data_dictionary->Add(&tags::WedgeRoofAngle);
        data_dictionary->Add(&tags::WedgeSequence);
        data_dictionary->Add(&tags::WedgeThinEdgePosition);
        data_dictionary->Add(&tags::WedgeTimeDelay);
        data_dictionary->Add(&tags::WedgeTotalHeight);
        data_dictionary->Add(&tags::WedgeTotalLength);
        data_dictionary->Add(&tags::WedgeTotalWidth);
        data_dictionary->Add(&tags::WedgeType);
        data_dictionary->Add(&tags::WeightingLookupTableData);
        data_dictionary->Add(&tags::WeightingLookupTableDescriptor);
        data_dictionary->Add(&tags::WeightingTransferFunctionSequence);
        data_dictionary->Add(&tags::WhitePointFlag);
        data_dictionary->Add(&tags::WholeBodyTechnique);
        data_dictionary->Add(&tags::WholeSlideMicroscopyImageFrameTypeSequence);
        data_dictionary->Add(&tags::WideFieldOphthalmicPhotographyQualityRatingSequence);
        data_dictionary->Add(&tags::WideFieldOphthalmicPhotographyQualityThresholdSequence);
        data_dictionary->Add(&tags::WideFieldOphthalmicPhotographyThresholdQualityRating);
        data_dictionary->Add(&tags::WindowCenter);
        data_dictionary->Add(&tags::WindowCenterWidthExplanation);
        data_dictionary->Add(&tags::WindowWidth);
        data_dictionary->Add(&tags::WorklistLabel);
        data_dictionary->Add(&tags::XAXRFFrameCharacteristicsSequence);
        data_dictionary->Add(&tags::XCoordinatesCenterPixelViewAngle);
        data_dictionary->Add(&tags::XDSRetrievalSequence);
        data_dictionary->Add(&tags::XDSStorageSequence);
        data_dictionary->Add(&tags::XFocusCenter);
        data_dictionary->Add(&tags::XOffsetInSlideCoordinateSystem);
        data_dictionary->Add(&tags::XRay3DAcquisitionSequence);
        data_dictionary->Add(&tags::XRay3DFrameTypeSequence);
        data_dictionary->Add(&tags::XRay3DReconstructionSequence);
        data_dictionary->Add(&tags::XRayAcquisitionDoseSequence);
        data_dictionary->Add(&tags::XRayFilterSequence);
        data_dictionary->Add(&tags::XRayGeometrySequence);
        data_dictionary->Add(&tags::XRayGridSequence);
        data_dictionary->Add(&tags::XRayImageReceptorAngle);
        data_dictionary->Add(&tags::XRayImageReceptorTranslation);
        data_dictionary->Add(&tags::XRayOutput);
        data_dictionary->Add(&tags::XRayReceptorType);
        data_dictionary->Add(&tags::XRaySourceIsocenterPrimaryAngle);
        data_dictionary->Add(&tags::XRaySourceIsocenterSecondaryAngle);
        data_dictionary->Add(&tags::XRayTubeCurrent);
        data_dictionary->Add(&tags::XRayTubeCurrentInmA);
        data_dictionary->Add(&tags::XRayTubeCurrentInuA);
        data_dictionary->Add(&tags::YCoordinatesCenterPixelViewAngle);
        data_dictionary->Add(&tags::YFocusCenter);
        data_dictionary->Add(&tags::YOffsetInSlideCoordinateSystem);
        data_dictionary->Add(&tags::ZEffective);
        data_dictionary->Add(&tags::ZeroVelocityPixelValue);
        data_dictionary->Add(&tags::ZOffsetInSlideCoordinateSystem);
        data_dictionary->Add(&tags::ZonalMap);
        data_dictionary->Add(&tags::ZonalMapFormat);
        data_dictionary->Add(&tags::ZonalMapLocation);
        data_dictionary->Add(&tags::ZonalMapNumberFormat);
        data_dictionary->Add(&tags::ZoomCenter);
        data_dictionary->Add(&tags::ZoomFactor);
    }
}
